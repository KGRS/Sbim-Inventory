/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tools;

import static MainFiles.IndexPage.PriceEdit;
import db.ConnectSql;
import functions.ReadConfig;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;


public class PurchaseSellingPriceEdit extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_PurSellPriceEdit;
    private final String spliter = "--";

    /**
     * Creates new form PurchaseSellingPriceEdit
     */
    public PurchaseSellingPriceEdit() {
        initComponents();
        LoadDepartmentsToCombo();

        rBtnCode.setSelected(true);
        cmbDepartment.requestFocus();
        model_PurSellPriceEdit = (DefaultTableModel) TablePurSellPriceEdit.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");

//        rBtnCode.setEnabled(false);
//        rBtnName.setEnabled(false);
//        txtSearch.setEnabled(false);
//        btnUpdate.setEnabled(false);
        ButtonFilter.setVisible(false);
        ButtonAddToTable.setEnabled(false);

        if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
//            FormattedTextNewPurchasePrice.setEnabled(false);
            txtSellingPrice.setEnabled(false);
//            FormattedTextNewPurchasePrice.setText("0.00");
            txtSellingPrice.setText("0.00");
            TextPresentageShowSellPrice.setEnabled(true);
            TextPresentageBillSellPrice.setEnabled(true);
        } else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
            TextPresentageShowSellPrice.setEnabled(false);
            TextPresentageBillSellPrice.setEnabled(false);
            TextPresentageShowSellPrice.setText("0.00");
            TextPresentageBillSellPrice.setText("0.00");
            FormattedTextNewPurchasePrice.setEnabled(true);
            txtSellingPrice.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        ButtonView = new javax.swing.JButton();
        ButtonFilter = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePurSellPriceEdit = new javax.swing.JTable();
        cmbDepartment = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        rBtnName = new javax.swing.JRadioButton();
        rBtnCode = new javax.swing.JRadioButton();
        lbl_subAccount = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JFormattedTextField();
        FormattedTextNewPurchasePrice = new javax.swing.JFormattedTextField();
        lbl_subAccount1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        ButtonAddToTable = new javax.swing.JButton();
        lbl_subAccount3 = new javax.swing.JLabel();
        TextPresentageShowSellPrice = new javax.swing.JFormattedTextField();
        ButtonCalculate = new javax.swing.JButton();
        lbl_subAccount5 = new javax.swing.JLabel();
        TextPresentageBillSellPrice = new javax.swing.JFormattedTextField();
        checkBoxSetBillPresentageToAllItems = new javax.swing.JCheckBox();

        setIconifiable(true);
        setTitle("Purchase/Selling Price Edit ");
        setPreferredSize(new java.awt.Dimension(990, 688));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText(" Department");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        ButtonView.setText("View");
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });
        panel1.add(ButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 80, 20));

        ButtonFilter.setText("Filter");
        ButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonFilterActionPerformed(evt);
            }
        });
        panel1.add(ButtonFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 80, -1));

        btnUpdate.setMnemonic('s');
        btnUpdate.setText("Update");
        btnUpdate.setActionCommand("Delete");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        panel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 80, -1));

        jButton1.setText("Preview");
        panel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 610, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 610, 80, -1));

        TablePurSellPriceEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Old purchase price", "New purchase price ", "Old selling price", "New selling price", "% for showroom sell price", "% for billing sell price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablePurSellPriceEdit.getTableHeader().setReorderingAllowed(false);
        TablePurSellPriceEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePurSellPriceEditMouseClicked(evt);
            }
        });
        TablePurSellPriceEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePurSellPriceEditKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TablePurSellPriceEdit);
        if (TablePurSellPriceEdit.getColumnModel().getColumnCount() > 0) {
            TablePurSellPriceEdit.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 930, 440));

        cmbDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbDepartmentKeyPressed(evt);
            }
        });
        panel1.add(cmbDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 250, 20));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, 210, 20));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 60, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, 60, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("% for billing sell price");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 150, 20));

        txtSellingPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtSellingPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSellingPrice.setText("0.00");
        txtSellingPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSellingPriceFocusGained(evt);
            }
        });
        txtSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSellingPriceKeyPressed(evt);
            }
        });
        panel1.add(txtSellingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 110, 110, -1));

        FormattedTextNewPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        FormattedTextNewPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        FormattedTextNewPurchasePrice.setText("0.00");
        FormattedTextNewPurchasePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FormattedTextNewPurchasePriceFocusGained(evt);
            }
        });
        FormattedTextNewPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FormattedTextNewPurchasePriceKeyPressed(evt);
            }
        });
        panel1.add(FormattedTextNewPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 110, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Search item by");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 90, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("% for showroom sell price");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 140, 20));

        ButtonAddToTable.setText("Add to table");
        ButtonAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddToTableActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 110, 110, -1));

        lbl_subAccount3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount3.setText(" Purchase price");
        panel1.add(lbl_subAccount3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 90, 20));

        TextPresentageShowSellPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPresentageShowSellPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPresentageShowSellPrice.setText("0.00");
        TextPresentageShowSellPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextPresentageShowSellPriceFocusGained(evt);
            }
        });
        TextPresentageShowSellPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPresentageShowSellPriceKeyPressed(evt);
            }
        });
        panel1.add(TextPresentageShowSellPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 70, -1));

        ButtonCalculate.setText("Calculate");
        ButtonCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCalculateActionPerformed(evt);
            }
        });
        panel1.add(ButtonCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 80, 110, -1));

        lbl_subAccount5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount5.setText("Sell price (Showroom)");
        panel1.add(lbl_subAccount5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 110, 20));

        TextPresentageBillSellPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPresentageBillSellPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPresentageBillSellPrice.setText("0.00");
        TextPresentageBillSellPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextPresentageBillSellPriceFocusGained(evt);
            }
        });
        TextPresentageBillSellPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPresentageBillSellPriceKeyPressed(evt);
            }
        });
        panel1.add(TextPresentageBillSellPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 70, -1));

        checkBoxSetBillPresentageToAllItems.setBackground(new java.awt.Color(255, 255, 255));
        checkBoxSetBillPresentageToAllItems.setForeground(new java.awt.Color(102, 102, 102));
        checkBoxSetBillPresentageToAllItems.setText("Set this % for billing sell price to all items");
        checkBoxSetBillPresentageToAllItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkBoxSetBillPresentageToAllItemsKeyPressed(evt);
            }
        });
        panel1.add(checkBoxSetBillPresentageToAllItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, 270, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            cmbDepartment.removeAllItems();
            cmbDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
        String Department = cmbDepartment.getSelectedItem().toString();
        if (!Department.equals(select)) {
            LoadToPriceEditTable();
        } else if (Department.equals(select)) {
            JOptionPane.showMessageDialog(this, "Department is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonViewActionPerformed

    private void LoadToPriceEditTable() {
        try {
            RefreshTable();
            String DepartmentCode[] = cmbDepartment.getSelectedItem().toString().split("--");
            int rowCount = 0;
            ResultSet RSETPriceEditItems;
            java.sql.Statement stmtPriceEditItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String StockEditItemsQuery = "SELECT [ItemCode]\n"
                    + "      ,[ItemName]\n"
                    + "      ,[PrintName]\n"
                    + "      ,[MainCategoryCode]\n"
                    + "      ,[SubCategoryCode]\n"
                    + "      ,[Type]\n"
                    + "      ,[PurchasePrice]\n"
                    + "      ,[SellPrice]\n"
                    + "      ,[Quantity]\n"
                    + "      ,[UnitPurchase]\n"
                    + "      ,[UnitSell]\n"
                    + "      ,[ReorderQty]\n"
                    + "      ,[MinimumQty]\n"
                    + "      ,[MaximumQty]\n"
                    + "      ,[DepartmentCode]\n"
                    + "      ,[MinusSell]\n"
                    + "      ,[Currency]\n"
                    + "      ,[Visibility]\n"
                    + "      ,[SupplierCode]\n"
                    + "      ,[PresentageShowSellPrice]\n"
                    + "      ,[PresentageBillSellPrice]\n"
                    + "  FROM [Items] WHERE Visibility = 'Yes' AND DepartmentCode='" + DepartmentCode[1] + "' AND Type != 'Asset' ORDER BY ItemName";
            RSETPriceEditItems = stmtPriceEditItems.executeQuery(StockEditItemsQuery);
            while (RSETPriceEditItems.next()) {
                model_PurSellPriceEdit.addRow(new Object[model_PurSellPriceEdit.getColumnCount()]);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("ItemCode"), rowCount, 0);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("ItemName"), rowCount, 1);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("UnitPurchase"), rowCount, 2);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("PurchasePrice"), rowCount, 3);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("PurchasePrice"), rowCount, 4);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("SellPrice"), rowCount, 5);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("SellPrice"), rowCount, 6);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("PresentageShowSellPrice"), rowCount, 7);
                TablePurSellPriceEdit.setValueAt(RSETPriceEditItems.getString("PresentageBillSellPrice"), rowCount, 8);
                rowCount++;
            }
            txtSearch.requestFocus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void ButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFilterActionPerformed
        btnUpdate.setEnabled(true);
        int PurSellPriceEditTableRowCount = TablePurSellPriceEdit.getRowCount();
        if (PurSellPriceEditTableRowCount > 0) {
            for (int i = 0; i < PurSellPriceEditTableRowCount; i++) {
                double PurchasePrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 3).toString());
                double NewPurchasePrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 4).toString());

                double SellingPrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 5).toString());
                double NewSellingPrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 6).toString());

                if (PurchasePrice == NewPurchasePrice && SellingPrice == NewSellingPrice) {
                    model_PurSellPriceEdit.removeRow(i);
                    i--;
                }
                btnUpdate.requestFocus();

            }
        }
    }//GEN-LAST:event_ButtonFilterActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int PurSellPriceEditTableRowCount = TablePurSellPriceEdit.getRowCount();
        if (PurSellPriceEditTableRowCount > 0) {
            UpdatePrices();
        } else if (PurSellPriceEditTableRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "No item has been change to save.", "No items", JOptionPane.OK_OPTION);
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void UpdatePrices() {
        int PurSellPriceEditTableRowCount = TablePurSellPriceEdit.getRowCount();
        try {
            for (int i = 0; i < PurSellPriceEditTableRowCount; i++) {
                String ItemCode = (TablePurSellPriceEdit.getValueAt(i, 0).toString());
                double NewPurchasePrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 4).toString());
                double NewSellingPrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 6).toString());
                double PresentageShowSellPrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 7).toString());
                double PresentageBillSellPrice = Double.parseDouble(TablePurSellPriceEdit.getValueAt(i, 8).toString());
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String UpdateQuery = "update Items set PurchasePrice = '" + NewPurchasePrice + "'"
                        + ", SellPrice = '" + NewSellingPrice + "', PresentageShowSellPrice = '" + PresentageShowSellPrice + "'"
                        + ", PresentageBillSellPrice = '" + PresentageBillSellPrice + "' where ItemCode = '" + ItemCode + "'";
                stmt.execute(UpdateQuery);
            }
            JOptionPane.showMessageDialog(this, "Item prices are updated.");
            RefreshAtUpdate();

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshAtUpdate() {
        txtSearch.selectAll();
        txtSearch.requestFocus();
        checkBoxSetBillPresentageToAllItems.setSelected(false);
//        btnUpdate.setEnabled(false);
    }

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Purchase/Selling Price Edit window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            cmbDepartment.setEnabled(true);
            ButtonView.setEnabled(true);
            txtSearch.setText("");
            cmbDepartment.setSelectedItem(select);

//            rBtnCode.setEnabled(false);
//            rBtnName.setEnabled(false);
//            txtSearch.setEnabled(false);
//            btnUpdate.setEnabled(false);

            FormattedTextNewPurchasePrice.setText("0.00");
            txtSellingPrice.setText("0.00");

            TextPresentageShowSellPrice.setText("0.00");
            TextPresentageBillSellPrice.setText("0.00");
            checkBoxSetBillPresentageToAllItems.setSelected(false);

            try {
                int rowi = model_PurSellPriceEdit.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_PurSellPriceEdit.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (PriceEdit != null) {
            PriceEdit = null;
        }
        this.dispose();
    }

    private void TablePurSellPriceEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePurSellPriceEditMouseClicked
        String NewPurchasePrice, NewSellingPrice, PresentageShowSellPrice, PresentageBillSellPrice;
        if (evt.getClickCount() == 1) {
            NewPurchasePrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 4).toString();
            NewSellingPrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 6).toString();
            PresentageShowSellPrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 7).toString();
            PresentageBillSellPrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 8).toString();

            FormattedTextNewPurchasePrice.setText(NewPurchasePrice);
            txtSellingPrice.setText(NewSellingPrice);
            TextPresentageShowSellPrice.setText(PresentageShowSellPrice);
            TextPresentageBillSellPrice.setText(PresentageBillSellPrice);
            ButtonAddToTable.setEnabled(false);

            if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
                FormattedTextNewPurchasePrice.requestFocus();
            } else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
                FormattedTextNewPurchasePrice.requestFocus();
            }

        }
    }//GEN-LAST:event_TablePurSellPriceEditMouseClicked

    private void cmbDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbDepartmentPopupMenuWillBecomeInvisible
        String text = cmbDepartment.getSelectedItem().toString();
        if (text.equals(select)) {
            RefreshTable();
            FormattedTextNewPurchasePrice.setText("0.00");
            txtSellingPrice.setText("0.00");
            txtSearch.setText("");
        }
    }//GEN-LAST:event_cmbDepartmentPopupMenuWillBecomeInvisible

    private void cmbDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = cmbDepartment.getSelectedItem().toString();
            if (text.equals(select)) {
                RefreshTable();
                FormattedTextNewPurchasePrice.setText("0.00");
                txtSellingPrice.setText("0.00");
                txtSearch.setText("");
            }
        }
    }//GEN-LAST:event_cmbDepartmentKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (!cmbDepartment.getSelectedItem().equals(select)) {
            if (rBtnCode.isSelected()) {
                SearchItemByCode(txtSearch.getText());
            } else if (rBtnName.isSelected()) {
                SearchItemByName(txtSearch.getText());
            }
        } else if (cmbDepartment.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Department is not selected.", "No department", JOptionPane.OK_OPTION);
            txtSearch.setText("");
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void RefreshTable() {
        try {
            int row = model_PurSellPriceEdit.getRowCount();
            for (int j = 0; j < row; j++) {
                model_PurSellPriceEdit.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByCode(String ItemCode) {
        try {
            String DepartmentCode[] = cmbDepartment.getSelectedItem().toString().split("--");
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemCode.equals("")) {
                query = "SELECT * FROM Items WHERE ItemCode LIKE '" + ItemCode + "%' AND  Visibility = 'Yes' AND DepartmentCode='" + DepartmentCode[1] + "' AND Type != 'Asset'";
            } else {
                query = "SELECT * FROM Items  WHERE ItemCode LIKE '" + ItemCode + "%'AND  Visibility = 'Yes' AND DepartmentCode='" + DepartmentCode[1] + "' AND Type != 'Asset'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_PurSellPriceEdit.addRow(new Object[model_PurSellPriceEdit.getColumnCount()]);
                TablePurSellPriceEdit.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TablePurSellPriceEdit.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TablePurSellPriceEdit.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 4);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("SellPrice"), rowCount, 5);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("SellPrice"), rowCount, 6);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PresentageShowSellPrice"), rowCount, 7);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PresentageBillSellPrice"), rowCount, 8);

                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByName(String ItemName) {
        try {
            String DepartmentCode[] = cmbDepartment.getSelectedItem().toString().split("--");
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemName.equals("")) {
                query = "SELECT * FROM Items WHERE ItemName LIKE '%" + ItemName + "%' AND  Visibility = 'Yes' AND DepartmentCode='" + DepartmentCode[1] + "' AND Type != 'Asset'";
            } else {
                query = "SELECT * FROM Items  WHERE ItemName LIKE '%" + ItemName + "%'AND  Visibility = 'Yes' AND DepartmentCode='" + DepartmentCode[1] + "' AND Type != 'Asset'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_PurSellPriceEdit.addRow(new Object[model_PurSellPriceEdit.getColumnCount()]);
                TablePurSellPriceEdit.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TablePurSellPriceEdit.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TablePurSellPriceEdit.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 4);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("SellPrice"), rowCount, 5);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("SellPrice"), rowCount, 6);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PresentageShowSellPrice"), rowCount, 7);
                TablePurSellPriceEdit.setValueAt(reset.getFloat("PresentageBillSellPrice"), rowCount, 8);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnUpdate.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void ButtonAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddToTableActionPerformed
        AddToTable();
    }//GEN-LAST:event_ButtonAddToTableActionPerformed

    private void AddToTable() {
        String PresentageBillSellPrice;
        int SelectedRow = TablePurSellPriceEdit.getSelectedRow();
        int SelectedRowCount = TablePurSellPriceEdit.getSelectedRowCount();
        int rowCount = TablePurSellPriceEdit.getRowCount();
        
        if (!FormattedTextNewPurchasePrice.getText().equals("") && !txtSellingPrice.getText().equals("") && !TextPresentageShowSellPrice.getText().equals("") && !TextPresentageBillSellPrice.getText().equals("")) {
            PresentageBillSellPrice = TextPresentageBillSellPrice.getText();
            if(checkBoxSetBillPresentageToAllItems.isSelected()){
                    for (int i = 0; i < rowCount; i++) {
                        TablePurSellPriceEdit.setValueAt(PresentageBillSellPrice, i, 8);
                    }
                }
        }

        if (SelectedRowCount == 1) {
            if (!FormattedTextNewPurchasePrice.getText().equals("") && !txtSellingPrice.getText().equals("") && !TextPresentageShowSellPrice.getText().equals("") && !TextPresentageBillSellPrice.getText().equals("")) {
                String NewPurchasePrice = FormattedTextNewPurchasePrice.getText();
                String NewSellingPrice = txtSellingPrice.getText();
                String PresentageShowSellPrice = TextPresentageShowSellPrice.getText();
                PresentageBillSellPrice = TextPresentageBillSellPrice.getText();

                TablePurSellPriceEdit.setValueAt(NewPurchasePrice, SelectedRow, 4);
                TablePurSellPriceEdit.setValueAt(NewSellingPrice, SelectedRow, 6);
                TablePurSellPriceEdit.setValueAt(PresentageShowSellPrice, SelectedRow, 7);
                TablePurSellPriceEdit.setValueAt(PresentageBillSellPrice, SelectedRow, 8);
                
                

                if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
                    TextPresentageShowSellPrice.requestFocus();
                    TextPresentageShowSellPrice.selectAll();
                } else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
//                    FormattedTextNewPurchasePrice.requestFocus();
//                    FormattedTextNewPurchasePrice.selectAll();
//                    txtSearch.selectAll();
//                    txtSearch.requestFocus();
                    ButtonFilter.requestFocus();

                }

            } else if (FormattedTextNewPurchasePrice.getText().equals("") || txtSellingPrice.getText().equals("") || TextPresentageShowSellPrice.getText().equals("") || TextPresentageBillSellPrice.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Purchase or selling price or presentage fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Not selected", JOptionPane.OK_OPTION);
        }
    }

    private void FormattedTextNewPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FormattedTextNewPurchasePriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!FormattedTextNewPurchasePrice.getText().isEmpty()) {
                if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
                    TextPresentageShowSellPrice.requestFocus();
                } else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
                    txtSellingPrice.requestFocus();
                }
                
            }
        }
    }//GEN-LAST:event_FormattedTextNewPurchasePriceKeyPressed

    private void FormattedTextNewPurchasePriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FormattedTextNewPurchasePriceFocusGained
        FormattedTextNewPurchasePrice.selectAll();
    }//GEN-LAST:event_FormattedTextNewPurchasePriceFocusGained

    private void txtSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txtSellingPrice.getText().isEmpty()) {

                if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
                    ButtonCalculate.requestFocus();
                } else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
                    AddToTable();
                }
            }
        }
    }//GEN-LAST:event_txtSellingPriceKeyPressed

    private void txtSellingPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSellingPriceFocusGained
        txtSellingPrice.selectAll();
    }//GEN-LAST:event_txtSellingPriceFocusGained

    private void TextPresentageShowSellPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPresentageShowSellPriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!FormattedTextNewPurchasePrice.getText().equals("") && !txtSellingPrice.getText().equals("") && !TextPresentageShowSellPrice.getText().equals("") && !TextPresentageBillSellPrice.getText().equals("")) {
//                CalculateSellPrice();
                TextPresentageBillSellPrice.requestFocus();
            }
        }
    }//GEN-LAST:event_TextPresentageShowSellPriceKeyPressed

    private void CalculateSellPrice() {
        double PresentageShowSellPrice, PurchasePrice, AddedValueForCalSellPrice, SellPrice;
        PresentageShowSellPrice = Double.parseDouble(TextPresentageShowSellPrice.getText());
        PurchasePrice = Double.parseDouble(FormattedTextNewPurchasePrice.getText());

        if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
            AddedValueForCalSellPrice = ((PresentageShowSellPrice / 100) * PurchasePrice);
            SellPrice = AddedValueForCalSellPrice + PurchasePrice;
            txtSellingPrice.setText(String.valueOf(SellPrice));
            TextPresentageBillSellPrice.requestFocus();
        }

//        else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
//            TextPresentageShowSellPrice.setEnabled(false);
//            TextPresentageBillSellPrice.setEnabled(false);
//            TextPresentageShowSellPrice.setText("0.00");
//            TextPresentageBillSellPrice.setText("0.00");
//            FormattedTextNewPurchasePrice.setEnabled(true);
//            txtSellingPrice.setEnabled(true);
//        }        
    }

    private void TextPresentageShowSellPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextPresentageShowSellPriceFocusGained
        TextPresentageShowSellPrice.selectAll();
    }//GEN-LAST:event_TextPresentageShowSellPriceFocusGained

    private void TextPresentageBillSellPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextPresentageBillSellPriceFocusGained
        TextPresentageBillSellPrice.selectAll();
    }//GEN-LAST:event_TextPresentageBillSellPriceFocusGained

    private void TextPresentageBillSellPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPresentageBillSellPriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ButtonCalculate.requestFocus();
        }
    }//GEN-LAST:event_TextPresentageBillSellPriceKeyPressed

    private void ButtonCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCalculateActionPerformed
        if (!FormattedTextNewPurchasePrice.getText().equals("") && !txtSellingPrice.getText().equals("") && !TextPresentageShowSellPrice.getText().equals("") && !TextPresentageBillSellPrice.getText().equals("")) {
//            CalculateSellPrice();
            ButtonAddToTable.setEnabled(true);
            ButtonAddToTable.requestFocus();
        }
    }//GEN-LAST:event_ButtonCalculateActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        PriceEdit.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            TablePurSellPriceEdit.requestFocus();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void TablePurSellPriceEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePurSellPriceEditKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int Selectedrowcount = TablePurSellPriceEdit.getSelectedRowCount();
            if (Selectedrowcount == 1) {
                String NewPurchasePrice, NewSellingPrice, PresentageShowSellPrice, PresentageBillSellPrice;

                NewPurchasePrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 4).toString();
                NewSellingPrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 6).toString();
                PresentageShowSellPrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 7).toString();
                PresentageBillSellPrice = TablePurSellPriceEdit.getValueAt(TablePurSellPriceEdit.getSelectedRow(), 8).toString();

                FormattedTextNewPurchasePrice.setText(NewPurchasePrice);
                txtSellingPrice.setText(NewSellingPrice);
                TextPresentageShowSellPrice.setText(PresentageShowSellPrice);
                TextPresentageBillSellPrice.setText(PresentageBillSellPrice);
                ButtonAddToTable.setEnabled(false);

                if (ReadConfig.EnableSellPricePresentage.equals("Yes")) {
                    FormattedTextNewPurchasePrice.requestFocus();
                } else if (ReadConfig.EnableSellPricePresentage.equals("No")) {
                    FormattedTextNewPurchasePrice.requestFocus();
                }

            } else if (Selectedrowcount != 1) {
                JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Not selected", JOptionPane.OK_OPTION);
            }

        }

    }//GEN-LAST:event_TablePurSellPriceEditKeyPressed

    private void checkBoxSetBillPresentageToAllItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkBoxSetBillPresentageToAllItemsKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            ButtonCalculate.requestFocus();
        }
    }//GEN-LAST:event_checkBoxSetBillPresentageToAllItemsKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddToTable;
    private javax.swing.JButton ButtonCalculate;
    private javax.swing.JButton ButtonFilter;
    private javax.swing.JButton ButtonView;
    private javax.swing.JFormattedTextField FormattedTextNewPurchasePrice;
    private javax.swing.JTable TablePurSellPriceEdit;
    private javax.swing.JFormattedTextField TextPresentageBillSellPrice;
    private javax.swing.JFormattedTextField TextPresentageShowSellPrice;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxSetBillPresentageToAllItems;
    private javax.swing.JComboBox cmbDepartment;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JLabel lbl_subAccount3;
    private javax.swing.JLabel lbl_subAccount5;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JFormattedTextField txtSellingPrice;
    // End of variables declaration//GEN-END:variables
}
