/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFiles;

import static MainFiles.IndexPage.cus;
import db.ConnectSql;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class Customer extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    /**
     * This will be used to split Code from Description.
     *
     * Represent the Value "--Select--"
     */
    private final String spliter = "--";
    private final DefaultTableModel model_CustomerTable;
    private final String projectPath = System.getProperty("user.dir");

    public Customer() {
        initComponents();
        model_CustomerTable = (DefaultTableModel) TableCustomer.getModel();
        LoadCustomers();
        rBtnCode.setSelected(true);
        
//        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/DataFiles/Customer.png");
//        labelIcon.setIcon(DefaultBackGround);
        
//        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
//        backgroundLabel.setIcon(internalBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_category = new javax.swing.JLabel();
        txtCustomerCode = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        lbl_accountType = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableCustomer = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        txtAddressline1 = new javax.swing.JTextField();
        txtAddressline2 = new javax.swing.JTextField();
        lbl_accountType2 = new javax.swing.JLabel();
        lbl_accountType3 = new javax.swing.JLabel();
        lbl_accountType4 = new javax.swing.JLabel();
        lbl_accountType5 = new javax.swing.JLabel();
        txtTele1 = new javax.swing.JTextField();
        txtTele2 = new javax.swing.JTextField();
        txtMobile1 = new javax.swing.JTextField();
        txtMobile2 = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lbl_accountType6 = new javax.swing.JLabel();
        txtFax = new javax.swing.JTextField();
        Fax = new javax.swing.JLabel();
        txtContactperson = new javax.swing.JTextField();
        lbl_description1 = new javax.swing.JLabel();
        txtCreditLimit = new javax.swing.JFormattedTextField();

        setIconifiable(true);
        setTitle("Customer");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_category.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category.setText("Customer code");
        panel1.add(lbl_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 90, 20));

        txtCustomerCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerCodeFocusGained(evt);
            }
        });
        txtCustomerCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomerCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerCodeKeyReleased(evt);
            }
        });
        panel1.add(txtCustomerCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, 250, 20));

        txtCustomerName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCustomerNameFocusGained(evt);
            }
        });
        txtCustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyReleased(evt);
            }
        });
        panel1.add(txtCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, 350, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveKeyPressed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 490, 80, -1));

        btnDelete.setMnemonic('d');
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        btnDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDeleteKeyPressed(evt);
            }
        });
        panel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 490, 80, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Credit limit (Rs)");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 140, 90, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search Customer by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 490, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 60, -1));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("Contact person");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 420, 90, 20));

        TableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Code", "Customer Name", "Mobile num."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableCustomer.getTableHeader().setReorderingAllowed(false);
        TableCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableCustomer);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 450));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 170, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 468, 440, -1));
        panel1.add(txtAddressline1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 180, 350, -1));
        panel1.add(txtAddressline2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 220, 350, -1));

        lbl_accountType2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType2.setText("Address line 1");
        panel1.add(lbl_accountType2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 180, 90, 20));

        lbl_accountType3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType3.setText("Address line 2");
        panel1.add(lbl_accountType3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 90, 20));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("Telephone");
        panel1.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 260, 90, 20));

        lbl_accountType5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType5.setText("Mobile num.");
        panel1.add(lbl_accountType5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 300, 90, 20));
        panel1.add(txtTele1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 260, 160, -1));
        panel1.add(txtTele2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 260, 170, -1));
        panel1.add(txtMobile1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 160, -1));
        panel1.add(txtMobile2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 300, 170, -1));
        panel1.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, 350, -1));

        lbl_accountType6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType6.setText("E-mail  @");
        panel1.add(lbl_accountType6, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 340, 80, 20));
        panel1.add(txtFax, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, 160, -1));

        Fax.setForeground(new java.awt.Color(102, 102, 102));
        Fax.setText("Fax");
        panel1.add(Fax, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 380, 50, 20));
        panel1.add(txtContactperson, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 420, 350, -1));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("Customer name");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 90, 20));

        txtCreditLimit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtCreditLimit.setText("0.00");
        panel1.add(txtCreditLimit, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, 160, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCustomerCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerCodeFocusGained
        txtCustomerCode.selectAll();
    }//GEN-LAST:event_txtCustomerCodeFocusGained

    private void txtCustomerCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = txtCustomerCode.getText();
            if (!text.isEmpty()) {
                txtCustomerName.requestFocus();
                //                LoadAtCodes();
            }
        }
    }//GEN-LAST:event_txtCustomerCodeKeyPressed

    private void txtCustomerCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerCodeKeyReleased
        ValidateFields.CheckForCodes(txtCustomerCode);
    }//GEN-LAST:event_txtCustomerCodeKeyReleased

    private void txtCustomerNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerNameFocusGained
        txtCustomerName.selectAll();
    }//GEN-LAST:event_txtCustomerNameFocusGained

    private void txtCustomerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = txtCustomerName.getText();
            if (!text.isEmpty()) {
                txtAddressline1.requestFocus();
            }
        }
    }//GEN-LAST:event_txtCustomerNameKeyPressed

    private void txtCustomerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNameKeyReleased
        ValidateFields.CheckForOtherFields(txtCustomerName);
    }//GEN-LAST:event_txtCustomerNameKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckBeforeSave();
        }
    }//GEN-LAST:event_btnSaveKeyPressed

    private void CheckBeforeSave() {
        String Code, Name, CreditLimit, Address1, Address2, Telephone1,
                Telephone2, Mobile1, Mobile2, Email, FaxNum, ContactPerson;

        Code = txtCustomerCode.getText();
        Name = txtCustomerName.getText();
        CreditLimit = txtCreditLimit.getText();
        Address1 = txtAddressline1.getText();
        Address2 = txtAddressline2.getText();
        Telephone1 = txtTele1.getText();
        Telephone2 = txtTele2.getText();
        Mobile1 = txtMobile1.getText();
        Mobile2 = txtMobile2.getText();
        Email = txtEmail.getText();
        FaxNum = txtFax.getText();
        ContactPerson = txtContactperson.getText();
        if (!Code.isEmpty() && !Name.isEmpty() && !CreditLimit.isEmpty()) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select CustomerCode From Customers where CustomerCode = '" + Code + "'";
                ResultSet rset = stmt.executeQuery(query);

                if (rset.next()) {
                    int x = JOptionPane.showConfirmDialog(this, "Are you sure to change the '" + Name + "' customer details?", "Update customer?", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        String UpdateQuery = "UPDATE [Customers]\n"
                                + "   SET \n"
                                + "      [CustomerName] = '" + Name + "'\n"
                                + "      ,[CreditLimit] = '" + CreditLimit + "'\n"
                                + "      ,[Address1] = '" + Address1 + "'\n"
                                + "      ,[Address2] = '" + Address2 + "'\n"
                                + "      ,[Telephone1] = '" + Telephone1 + "'\n"
                                + "      ,[Telephone2] = '" + Telephone2 + "'\n"
                                + "      ,[Mobile1] = '" + Mobile1 + "'\n"
                                + "      ,[Mobile2] = '" + Mobile2 + "'\n"
                                + "      ,[Email] = '" + Email + "'\n"
                                + "      ,[Fax] = '" + FaxNum + "'\n"
                                + "      ,[ContactPerson] = '" + ContactPerson + "'\n"
                                + " WHERE [CustomerCode] = '" + Code + "'";
                        stmt.execute(UpdateQuery);
                        JOptionPane.showMessageDialog(this, "Customer details are updated.");
                        Refresh();
                    } else if (x == JOptionPane.NO_OPTION) {
                        txtCustomerCode.requestFocus();
                    }

                } else if (!rset.next()) {
                    String UpdateQuery = "INSERT INTO [Customers]\n"
                            + "           ([CustomerCode]\n"
                            + "           ,[CustomerName]\n"
                            + "           ,[CreditLimit]\n"
                            + "           ,[Address1]\n"
                            + "           ,[Address2]\n"
                            + "           ,[Telephone1]\n"
                            + "           ,[Telephone2]\n"
                            + "           ,[Mobile1]\n"
                            + "           ,[Mobile2]\n"
                            + "           ,[Email]\n"
                            + "           ,[Fax]\n"
                            + "           ,[ContactPerson])\n"
                            + "     VALUES\n"
                            + "           ('" + Code + "'\n"
                            + "           ,'" + Name + "'\n"
                            + "           ,'" + CreditLimit + "'\n"
                            + "           ,'" + Address1 + "'\n"
                            + "           ,'" + Address2 + "'\n"
                            + "           ,'" + Telephone1 + "'\n"
                            + "           ,'" + Telephone2 + "'\n"
                            + "           ,'" + Mobile1 + "'\n"
                            + "           ,'" + Mobile2 + "'\n"
                            + "           ,'" + Email + "'\n"
                            + "           ,'" + FaxNum + "'\n"
                            + "           ,'" + ContactPerson + "') ";
                    stmt.execute(UpdateQuery);
                    JOptionPane.showMessageDialog(this, "New customer is saved.");
                    Refresh();
                }
                rset.close();
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Code.isEmpty() || Name.isEmpty() || CreditLimit.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields before save.", "Empty fields", JOptionPane.OK_OPTION);
            txtCustomerCode.requestFocus();
        }
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        CheckBeforeDelete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDeleteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckBeforeDelete();
        }
    }//GEN-LAST:event_btnDeleteKeyPressed

    private void CheckBeforeDelete() {
        String Code = txtCustomerCode.getText();
        if (!Code.isEmpty()) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select CustomerCode From Customers where CustomerCode = '" + Code + "'";
                ResultSet rset = stmt.executeQuery(query);

                if (rset.next()) {
                    Delete();
                } else if (!rset.next()) {
                    JOptionPane.showMessageDialog(this, "Invalid customer code. Please insert a valid customer code.", "Invalid customer code", JOptionPane.OK_OPTION);
                    txtCustomerCode.requestFocus();
                }

            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Code.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert a valid customer code before delete.", "Empty customer code", JOptionPane.OK_OPTION);
            txtCustomerCode.requestFocus();
        }
    }

    private void Delete() {
        String Code = txtCustomerCode.getText();
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To delete this?", "Delete customer?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "delete From Customers where CustomerCode = '" + Code + "'";
                stmt.execute(query);
                JOptionPane.showMessageDialog(this, "Customer is deleted.");
                Refresh();
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

        } else if (x == JOptionPane.NO_OPTION) {
            txtCustomerCode.requestFocus();
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (cus != null) {
            cus = null;
        }
        this.dispose();
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void TableCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableCustomerMouseClicked
        String Code, Name, Creditlimit = "", Address1 = "", Address2 = "", Telephone1 = "",
                Telephone2 = "", Mobile1 = "", Mobile2 = "", Email = "", FaxNum = "", ContactPerson = "";

        Code = TableCustomer.getValueAt(TableCustomer.getSelectedRow(), 0).toString();
        Name = TableCustomer.getValueAt(TableCustomer.getSelectedRow(), 1).toString();
        Mobile1 = TableCustomer.getValueAt(TableCustomer.getSelectedRow(), 2).toString();

        try {
            ResultSet reset;
            Statement stmt;
            String query;
            query = "SELECT CustomerCode, CustomerName, CreditLimit, Address1, Address2, Telephone1, Telephone2, Mobile1, Mobile2, Email, Fax, ContactPerson\n"
                    + "FROM Customers where CustomerCode = '" + Code + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {
                Creditlimit = reset.getString("CreditLimit");
                Address1 = reset.getString("Address1");
                Address2 = reset.getString("Address2");
                Telephone1 = reset.getString("Telephone1");
                Telephone2 = reset.getString("Telephone2");
//                Mobile1 = reset.getString("Mobile1");
                Mobile2 = reset.getString("Mobile2");
                Email = reset.getString("Email");
                FaxNum = reset.getString("Fax");
                ContactPerson = reset.getString("ContactPerson");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

        txtCustomerCode.setText(Code);
        txtCustomerName.setText(Name);
        txtCreditLimit.setText(Creditlimit);
        txtAddressline1.setText(Address1);
        txtAddressline2.setText(Address2);
        txtTele1.setText(Telephone1);
        txtTele2.setText(Telephone2);
        txtMobile1.setText(Mobile1);
        txtMobile2.setText(Mobile2);
        txtEmail.setText(Email);
        txtFax.setText(FaxNum);
        txtContactperson.setText(ContactPerson);
    }//GEN-LAST:event_TableCustomerMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchCustomerByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchCustomerByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchCustomerByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!CategoryCode.equals("")) {
                query = "SELECT * FROM Customers WHERE CustomerCode LIKE '" + CategoryCode + "%'";
            } else {
                query = "SELECT * FROM Customers  WHERE CustomerCode LIKE '" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_CustomerTable.addRow(new Object[model_CustomerTable.getColumnCount()]);
                TableCustomer.setValueAt(reset.getString("CustomerCode"), rowCount, 0);
                TableCustomer.setValueAt(reset.getString("CustomerName"), rowCount, 1);
                TableCustomer.setValueAt(reset.getString("Mobile1"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchCustomerByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!CategoryName.equals("")) {
                query = "SELECT * FROM Customers WHERE CustomerName LIKE '" + CategoryName + "%'";
            } else {
                query = "SELECT * FROM Customers  WHERE CustomerName LIKE '" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_CustomerTable.addRow(new Object[model_CustomerTable.getColumnCount()]);
                TableCustomer.setValueAt(reset.getString("CustomerCode"), rowCount, 0);
                TableCustomer.setValueAt(reset.getString("CustomerName"), rowCount, 1);
                TableCustomer.setValueAt(reset.getString("Mobile1"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshTable() {
        try {
            int row = model_CustomerTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_CustomerTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Refresh() {
        RefreshTableAndLoadAgain();
        txtCustomerCode.setText("");
        txtCustomerName.setText("");
        txtCreditLimit.setText("0.00");
        txtAddressline1.setText("");
        txtAddressline2.setText("");
        txtTele1.setText("");
        txtTele2.setText("");
        txtMobile1.setText("");
        txtMobile2.setText("");
        txtEmail.setText("");
        txtFax.setText("");
        txtContactperson.setText("");

        txtSearch.setText("");
    }

    private void RefreshTableAndLoadAgain() {
        try {
            int row = model_CustomerTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_CustomerTable.removeRow(0);
            }
            LoadCustomers();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadCustomers() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT * FROM Customers ORDER BY CustomerName";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_CustomerTable.addRow(new Object[model_CustomerTable.getColumnCount()]);
                TableCustomer.setValueAt(reset.getString("CustomerCode"), rowCount, 0);
                TableCustomer.setValueAt(reset.getString("CustomerName"), rowCount, 1);
                TableCustomer.setValueAt(reset.getString("Mobile1"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
       cus.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fax;
    private javax.swing.JTable TableCustomer;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_accountType2;
    private javax.swing.JLabel lbl_accountType3;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_accountType5;
    private javax.swing.JLabel lbl_accountType6;
    private javax.swing.JLabel lbl_category;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTextField txtAddressline1;
    private javax.swing.JTextField txtAddressline2;
    private javax.swing.JTextField txtContactperson;
    private javax.swing.JFormattedTextField txtCreditLimit;
    private javax.swing.JTextField txtCustomerCode;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFax;
    private javax.swing.JTextField txtMobile1;
    private javax.swing.JTextField txtMobile2;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTele1;
    private javax.swing.JTextField txtTele2;
    // End of variables declaration//GEN-END:variables
}
