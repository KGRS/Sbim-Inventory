/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFiles;

import static MainFiles.IndexPage.item;
import db.ConnectSql;
import functions.AddPicture;
import functions.BarcodeExist;
import functions.BarcodeGenerate;
import functions.EnhanceBarCode;
import functions.ReadConfig;
import functions.ValidateFields;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.output.OutputException;


public class Item extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_ItemTable;
    private final String spliter = "--";
    private final String projectPath = System.getProperty("user.dir");
    String PathToImage = "";

    /**
     * Creates new form Item
     */
    public Item() {
//        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, ex.getMessage());
//        }
        initComponents();
        rBtnCode.setSelected(true);
        model_ItemTable = (DefaultTableModel) TableItem.getModel();
        loadCategoriesToCombo();
        LoadItems();
        loadPurUnitsToCombo();
        loadSellUnitsToCombo();
        loadSuppliersToCombo();
        loadDepartmentsToCombo();
        panel1.setToolTipText("Press right mouse click to refresh.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_accountType = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        cmbMainCategory = new javax.swing.JComboBox();
        cmbSubCategory = new javax.swing.JComboBox();
        buttonSave = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        pnl_AccountCode = new javax.swing.JPanel();
        btn_Delete = new javax.swing.JButton();
        txtItemCode = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableItem = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtReorderQuantity = new javax.swing.JFormattedTextField();
        cmbPurchaseUnit = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        txtPurchaseCost = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        cmbSellingUnit = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        txtAvailableQuantity = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        txtMinimumQuantity = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        txtMaximumQuantity = new javax.swing.JFormattedTextField();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        cmbVisibility = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        txtType = new javax.swing.JTextField();
        ButtonCreateBarCode = new javax.swing.JButton();
        ButtonPreviewBarCode = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lbl_subAccount3 = new javax.swing.JLabel();
        lbl_subAccount4 = new javax.swing.JLabel();
        TextPresentageShowSellPrice = new javax.swing.JFormattedTextField();
        TextPresentageBillSellPrice = new javax.swing.JFormattedTextField();
        ButtonGoToLocation = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        ComboDepartment = new javax.swing.JComboBox();
        RadioButtonFullA4 = new javax.swing.JRadioButton();
        RadioButtonHalfA4 = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        ButtonExport = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        ButtonPicture = new javax.swing.JButton();
        ButtonPreviewImage = new javax.swing.JButton();
        ButtonGoToimageLocation = new javax.swing.JButton();
        RadioButtonOneRow = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        TextBaseCategory = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        textNumberOfSystemItems = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtPrintName = new javax.swing.JTextField();

        setIconifiable(true);
        setResizable(true);
        setTitle("Item");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText(" Search item by");
        panel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Print Name");
        panel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 100, 90, 20));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("Item Type");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 220, 80, 20));

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Base Category ");
        panel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 220, 90, 20));

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Maximum Quantity");
        panel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 340, 110, 20));

        txtItemName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtItemNameFocusGained(evt);
            }
        });
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNameKeyReleased(evt);
            }
        });
        panel1.add(txtItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 60, 330, -1));

        cmbMainCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbMainCategory.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbMainCategoryPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbMainCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbMainCategoryKeyPressed(evt);
            }
        });
        panel1.add(cmbMainCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 140, 330, -1));

        cmbSubCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSubCategory.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbSubCategoryPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbSubCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSubCategoryKeyPressed(evt);
            }
        });
        panel1.add(cmbSubCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 180, 330, -1));

        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 570, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 570, 80, -1));

        pnl_AccountCode.setOpaque(false);
        pnl_AccountCode.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        panel1.add(pnl_AccountCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 8, 241, -1));

        btn_Delete.setMnemonic('d');
        btn_Delete.setText("Delete");
        btn_Delete.setPreferredSize(new java.awt.Dimension(93, 23));
        btn_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteActionPerformed(evt);
            }
        });
        panel1.add(btn_Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 570, 80, -1));

        txtItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCodeActionPerformed(evt);
            }
        });
        txtItemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemCodeKeyReleased(evt);
            }
        });
        panel1.add(txtItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 20, 220, 20));

        TableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableItem.setName(""); // NOI18N
        TableItem.getTableHeader().setReorderingAllowed(false);
        TableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableItem);
        if (TableItem.getColumnModel().getColumnCount() > 0) {
            TableItem.getColumnModel().getColumn(0).setPreferredWidth(160);
            TableItem.getColumnModel().getColumn(1).setPreferredWidth(300);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 560, 360));

        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Sub Category");
        panel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 180, 100, 20));

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Item Code");
        panel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, 80, 20));

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Purchase Price");
        panel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 260, 90, 20));

        txtReorderQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        txtReorderQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtReorderQuantity.setText("0.000");
        txtReorderQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtReorderQuantityFocusGained(evt);
            }
        });
        txtReorderQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtReorderQuantityKeyPressed(evt);
            }
        });
        panel1.add(txtReorderQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 380, 90, -1));

        cmbPurchaseUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbPurchaseUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbPurchaseUnitKeyPressed(evt);
            }
        });
        panel1.add(cmbPurchaseUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 260, 140, -1));

        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Selling Unit");
        panel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 300, 90, 20));

        txtPurchaseCost.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtPurchaseCost.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPurchaseCost.setText("0.00");
        txtPurchaseCost.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPurchaseCost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPurchaseCostFocusGained(evt);
            }
        });
        txtPurchaseCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPurchaseCostKeyPressed(evt);
            }
        });
        panel1.add(txtPurchaseCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 260, 70, -1));

        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Purchase Unit");
        panel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 260, 90, 20));

        cmbSellingUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSellingUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSellingUnitKeyPressed(evt);
            }
        });
        panel1.add(cmbSellingUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 300, 140, -1));

        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Sell Price");
        panel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 300, 100, 20));

        txtSellingPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtSellingPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSellingPrice.setText("0.00");
        txtSellingPrice.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtSellingPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSellingPriceFocusGained(evt);
            }
        });
        txtSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSellingPriceKeyPressed(evt);
            }
        });
        panel1.add(txtSellingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 300, 70, -1));

        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("Reorder Quantity");
        panel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 380, 110, 20));

        txtAvailableQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        txtAvailableQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAvailableQuantity.setText("0.000");
        txtAvailableQuantity.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAvailableQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAvailableQuantityFocusGained(evt);
            }
        });
        txtAvailableQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAvailableQuantityKeyPressed(evt);
            }
        });
        panel1.add(txtAvailableQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 380, 70, -1));

        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Minimum Quantity");
        panel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 340, 100, 20));

        txtMinimumQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        txtMinimumQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMinimumQuantity.setText("0.000");
        txtMinimumQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMinimumQuantityFocusGained(evt);
            }
        });
        txtMinimumQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMinimumQuantityKeyPressed(evt);
            }
        });
        panel1.add(txtMinimumQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 340, 70, -1));

        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Department");
        panel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 500, 100, 20));

        txtMaximumQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        txtMaximumQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMaximumQuantity.setText("0.000");
        txtMaximumQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMaximumQuantityFocusGained(evt);
            }
        });
        txtMaximumQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMaximumQuantityKeyPressed(evt);
            }
        });
        panel1.add(txtMaximumQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 340, 90, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 60, 20));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 60, 20));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 200, -1));

        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Available Quantity");
        panel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 380, 100, 20));

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSupplier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSupplierKeyPressed(evt);
            }
        });
        panel1.add(cmbSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 420, 330, -1));

        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Supplier");
        panel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 420, 80, 20));

        cmbVisibility.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        cmbVisibility.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbVisibilityKeyPressed(evt);
            }
        });
        panel1.add(cmbVisibility, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 460, 220, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 550, 430, 10));

        txtType.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtType.setEnabled(false);
        panel1.add(txtType, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 220, 70, -1));

        ButtonCreateBarCode.setText("Create barcode");
        ButtonCreateBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateBarCodeActionPerformed(evt);
            }
        });
        panel1.add(ButtonCreateBarCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 130, -1));

        ButtonPreviewBarCode.setText("Preview barcode");
        ButtonPreviewBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewBarCodeActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreviewBarCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 130, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_subAccount3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount3.setText("% for showroom sell price");
        jPanel1.add(lbl_subAccount3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 150, 20));

        lbl_subAccount4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount4.setText("% for billing sell price");
        jPanel1.add(lbl_subAccount4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 150, 20));

        TextPresentageShowSellPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPresentageShowSellPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPresentageShowSellPrice.setText("0.00");
        TextPresentageShowSellPrice.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextPresentageShowSellPrice.setEnabled(false);
        jPanel1.add(TextPresentageShowSellPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 110, -1));

        TextPresentageBillSellPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPresentageBillSellPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPresentageBillSellPrice.setText("0.00");
        TextPresentageBillSellPrice.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextPresentageBillSellPrice.setEnabled(false);
        jPanel1.add(TextPresentageBillSellPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 110, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 440, 280, 80));

        ButtonGoToLocation.setText("Go to location");
        ButtonGoToLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGoToLocationActionPerformed(evt);
            }
        });
        panel1.add(ButtonGoToLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 130, -1));

        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("Item Visibility");
        panel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 460, 100, 20));

        ComboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        ComboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                ComboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        ComboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(ComboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 500, 220, -1));

        RadioButtonFullA4.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(RadioButtonFullA4);
        RadioButtonFullA4.setText("Full A4");
        panel1.add(RadioButtonFullA4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 450, 100, -1));

        RadioButtonHalfA4.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(RadioButtonHalfA4);
        RadioButtonHalfA4.setText("Half A4 (A5 size)");
        panel1.add(RadioButtonHalfA4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 480, 130, -1));

        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Item count");
        panel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 60, 20));

        ButtonExport.setText("Export");
        ButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExportActionPerformed(evt);
            }
        });
        panel1.add(ButtonExport, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, 130, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ButtonPicture.setText("Choose image");
        ButtonPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPictureActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 132, 60));

        ButtonPreviewImage.setText("Preview image");
        ButtonPreviewImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewImageActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonPreviewImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 110, -1));

        ButtonGoToimageLocation.setText("Go to location");
        ButtonGoToimageLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGoToimageLocationActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonGoToimageLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 110, -1));

        panel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 530, 280, 80));

        RadioButtonOneRow.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(RadioButtonOneRow);
        RadioButtonOneRow.setText("One row");
        panel1.add(RadioButtonOneRow, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 510, -1, -1));

        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("Main Category ");
        panel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 140, 100, 20));

        TextBaseCategory.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextBaseCategory.setEnabled(false);
        panel1.add(TextBaseCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 220, 140, -1));

        jLabel19.setText(" Export barcode image to");
        panel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 140, 20));

        textNumberOfSystemItems.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumberOfSystemItems.setEnabled(false);
        panel1.add(textNumberOfSystemItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 70, -1));

        jLabel20.setForeground(new java.awt.Color(102, 102, 102));
        jLabel20.setText("Item Name");
        panel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 90, 20));

        txtPrintName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrintNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrintNameKeyReleased(evt);
            }
        });
        panel1.add(txtPrintName, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 100, 330, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1063, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadCategoriesToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From MainCategory order by MainCategoryName";
            ResultSet rset = stmt.executeQuery(query);

            cmbMainCategory.removeAllItems();
            cmbMainCategory.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbMainCategory.insertItemAt(rset.getString("MainCategoryName") + "--" + rset.getString("MainCategoryCode"), position); // 
                    position++;
                } while (rset.next());

            }
            cmbMainCategory.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
        loadSubCategoriesToCombo();
    }

    private void loadSubCategoriesToCombo() {
        try {
            String MainCategory[] = cmbMainCategory.getSelectedItem().toString().split("--");
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From SubCategory where MainCategoryCode = '" + MainCategory[1] + "'order by SubCategoryName";
            ResultSet rset = stmt.executeQuery(query);

            cmbSubCategory.removeAllItems();
            cmbSubCategory.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSubCategory.insertItemAt(rset.getString("SubCategoryName") + "--" + rset.getString("SubCategoryCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbSubCategory.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void loadPurUnitsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From SIUnits order by UnitName";
            ResultSet rset = stmt.executeQuery(query);

            cmbPurchaseUnit.removeAllItems();
            cmbPurchaseUnit.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbPurchaseUnit.insertItemAt(rset.getString("UnitName") + "--" + rset.getString("UnitCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbPurchaseUnit.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void loadSellUnitsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From SIUnits order by UnitName";
            ResultSet rset = stmt.executeQuery(query);

            cmbSellingUnit.removeAllItems();
            cmbSellingUnit.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSellingUnit.insertItemAt(rset.getString("UnitName") + "--" + rset.getString("UnitCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbSellingUnit.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadSuppliersToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Suppliers order by SupplierName";
            ResultSet rset = stmt.executeQuery(query);

            cmbSupplier.removeAllItems();
            cmbSupplier.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSupplier.insertItemAt(rset.getString("SupplierName") + "--" + rset.getString("SupplierCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbSupplier.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadDepartmentsToCombo() {
//        String Type = "Stock";
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments order by DepartmentName"; // where Type = '" + Type + "'
            ResultSet rset = stmt.executeQuery(query);

            ComboDepartment.removeAllItems();
            ComboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    ComboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            ComboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        exit();
    }//GEN-LAST:event_btnExitMouseClicked

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void txtItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCodeActionPerformed

        String text = txtItemCode.getText();
        if (!text.isEmpty()) {
//            String ModifiedItemCode = text.replace("\\", "-");
//            txtItemCode.setText(ModifiedItemCode);
            txtItemName.requestFocus();
        }


    }//GEN-LAST:event_txtItemCodeActionPerformed

    private void cmbMainCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbMainCategoryKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = cmbMainCategory.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubCategoriesToCombo();
                cmbSubCategory.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbMainCategoryKeyPressed

    private void cmbSubCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSubCategoryKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = cmbSubCategory.getSelectedItem().toString();
            if (!text.equals(select)) {
                SetType();
                txtPurchaseCost.requestFocus();
            }
        }

    }//GEN-LAST:event_cmbSubCategoryKeyPressed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        String ItemCode = txtItemCode.getText();
        String ItemName = txtItemName.getText();
        String PrintName = txtPrintName.getText();
        String MainCategory[] = cmbMainCategory.getSelectedItem().toString().split("--");
        String SubCategory[] = cmbSubCategory.getSelectedItem().toString().split("--");
        String Type = txtType.getText();
        String PurchasePrice = txtPurchaseCost.getText();
        String PurchaseUnit[] = cmbPurchaseUnit.getSelectedItem().toString().split("--");
        String SellingPrice = txtSellingPrice.getText();
        String SellingUnit[] = cmbSellingUnit.getSelectedItem().toString().split("--");
        String MinimumQuantity = txtMinimumQuantity.getText();
        String MaximumQuantity = txtMaximumQuantity.getText();
        String AvailableQuantity = txtAvailableQuantity.getText();
        String ReorderQuantity = txtReorderQuantity.getText();
        String Supplier[] = cmbSupplier.getSelectedItem().toString().split("--");
        String ItemVisibility = cmbVisibility.getSelectedItem().toString();

        String DepartmentCode[] = ComboDepartment.getSelectedItem().toString().split("--");
        String Currency = "Rupee";
        String MinusSell = "No";

        String CheckPurchaseUnit = cmbPurchaseUnit.getSelectedItem().toString();
        String CheckSellUnit = cmbSellingUnit.getSelectedItem().toString();
        String CheckSupplier = cmbSupplier.getSelectedItem().toString();
        String CheckSubCategory = cmbSubCategory.getSelectedItem().toString();
        String CheckDepartment = ComboDepartment.getSelectedItem().toString();
        String BaseCategoryCode = TextBaseCategory.getText();

        if (!ItemCode.isEmpty()
                && !ItemName.isEmpty()
                && !Type.isEmpty() && !PurchasePrice.isEmpty()
                && !CheckPurchaseUnit.equals(select)
                && !SellingPrice.isEmpty()
                && !CheckSellUnit.equals(select)
                && !MinimumQuantity.isEmpty()
                && !MaximumQuantity.isEmpty() && !AvailableQuantity.isEmpty()
                && !ReorderQuantity.isEmpty() && !ItemVisibility.equals(select)
                && !CheckSupplier.equals(select) && !CheckSubCategory.equals(select)
                && !CheckDepartment.equals(select)) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select ItemCode From Items where ItemCode = '" + ItemCode + "'";
                ResultSet rset = stmt.executeQuery(query);

                if (rset.next()) {
                    int x = JOptionPane.showConfirmDialog(this, "Are you sure to change the '" + ItemName + "' item details?", "Update item?", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        String UpdateQuery = "update Items set ItemName = '" + ItemName + "',PrintName = '" + PrintName + "',"
                                + " MainCategoryCode = '" + MainCategory[1] + "', SubCategoryCode = '" + SubCategory[1] + "',"
                                + " Type = '" + Type + "', PurchasePrice = '" + PurchasePrice + "', SellPrice = '" + SellingPrice + "',"
                                + " Quantity = '" + AvailableQuantity + "', UnitPurchase = '" + PurchaseUnit[1] + "',"
                                + " UnitSell = '" + SellingUnit[1] + "', ReorderQty = '" + ReorderQuantity + "',"
                                + " MinimumQty = '" + MinimumQuantity + "', MaximumQty = '" + MaximumQuantity + "', DepartmentCode = '" + DepartmentCode[1] + "',"
                                + " Visibility = '" + ItemVisibility + "', SupplierCode = '" + Supplier[1] + "',"
                                + " PathToImage = '" + PathToImage + "', BaseCategoryCode = '" + BaseCategoryCode + "' where ItemCode = '" + ItemCode + "'";
                        stmt.execute(UpdateQuery);
                        JOptionPane.showMessageDialog(this, "Item details are updated.");
                        Refresh();
                    } else if (x == JOptionPane.NO_OPTION) {
                        txtItemCode.requestFocus();
                    }

                } else if (!rset.next()) {
                    String InsertQuery = "INSERT INTO [Items]\n"
                            + "           ([ItemCode]\n"
                            + "           ,[ItemName]\n"
                            + "           ,[PrintName]\n"
                            + "           ,[MainCategoryCode]\n"
                            + "           ,[SubCategoryCode]\n"
                            + "           ,[Type]\n"
                            + "           ,[PurchasePrice]\n"
                            + "           ,[SellPrice]\n"
                            + "           ,[Quantity]\n"
                            + "           ,[UnitPurchase]\n"
                            + "           ,[UnitSell]\n"
                            + "           ,[ReorderQty]\n"
                            + "           ,[MinimumQty]\n"
                            + "           ,[MaximumQty]\n"
                            + "           ,[DepartmentCode]\n"
                            + "           ,[MinusSell]\n"
                            + "           ,[Currency]\n"
                            + "           ,[Visibility]\n"
                            + "           ,[SupplierCode]\n"
                            + "           ,[PathToImage]\n"
                            + "           ,[BaseCategoryCode])\n"
                            + "     VALUES\n"
                            + "           ('" + ItemCode + "'\n"
                            + "           ,'" + ItemName + "'\n"
                            + "           ,'" + PrintName + "'\n"
                            + "           ,'" + MainCategory[1] + "'\n"
                            + "           ,'" + SubCategory[1] + "'\n"
                            + "           ,'" + Type + "'\n"
                            + "           ,'" + PurchasePrice + "'\n"
                            + "           ,'" + SellingPrice + "'\n"
                            + "           ,'" + AvailableQuantity + "'\n"
                            + "           ,'" + PurchaseUnit[1] + "'\n"
                            + "           ,'" + SellingUnit[1] + "'\n"
                            + "           ,'" + ReorderQuantity + "'\n"
                            + "           ,'" + MinimumQuantity + "'\n"
                            + "           ,'" + MaximumQuantity + "'\n"
                            + "           ,'" + DepartmentCode[1] + "'\n"
                            + "           ,'" + MinusSell + "'\n"
                            + "           ,'" + Currency + "'\n"
                            + "           ,'" + ItemVisibility + "'\n"
                            + "           ,'" + Supplier[1] + "'\n"
                            + "           ,'" + PathToImage + "'\n"
                            + "           ,'" + BaseCategoryCode + "') ";
                    stmt.execute(InsertQuery);
                    JOptionPane.showMessageDialog(this, "New item is saved.");
                    Refresh();
                }
                rset.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill all fields before save.", "Empty fields", JOptionPane.OK_OPTION);
            txtItemCode.requestFocus();
        }
    }

    private void btn_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteActionPerformed
        CheckBeforeDelete();
    }//GEN-LAST:event_btn_DeleteActionPerformed

    private void CheckBeforeDelete() {
        String ItemCode = txtItemCode.getText();
        if (!ItemCode.isEmpty()) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select ItemCode From Items where ItemCode = '" + ItemCode + "'";
                ResultSet rset = stmt.executeQuery(query);

                java.sql.Statement stmt1 = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query1 = "select ItemCode From GRNReturnItems where ItemCode = '" + ItemCode + "'";
                ResultSet rset1 = stmt1.executeQuery(query1);

                java.sql.Statement stmt2 = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query2 = "select ItemCode From PurchaseOrderItems where ItemCode = '" + ItemCode + "'";
                ResultSet rset2 = stmt2.executeQuery(query2);

                java.sql.Statement stmt3 = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query3 = "select ItemCode From BinCard where ItemCode = '" + ItemCode + "'";
                ResultSet rset3 = stmt3.executeQuery(query3);

                if (rset1.next() || rset2.next() || rset3.next()) {
                    JOptionPane.showMessageDialog(this, "This item is already used. Can't delete.", "Can't delete", JOptionPane.ERROR_MESSAGE);
                } else if (!rset1.next() && !rset2.next() && !rset3.next()) {
                    if (rset.next()) {
                        DeleteCategory();
                    } else if (!rset.next()) {
                        JOptionPane.showMessageDialog(this, "The item code you have entered is not valid.", "Can't delete", JOptionPane.ERROR_MESSAGE);
                    }
                }

                stmt.close();
                stmt1.close();
                stmt2.close();
                stmt3.close();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (ItemCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert a valid item code before delete.", "Empty item code", JOptionPane.OK_OPTION);
            txtItemCode.requestFocus();
        }
    }

    private void DeleteCategory() {
        String Code = txtItemCode.getText();
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To delete this?", "Delete item?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement Checkstmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                String Checkquery = "select ItemCode From Items where ItemCode = '" + Code + "'";
                ResultSet Checkrset = Checkstmt.executeQuery(Checkquery);

                if (Checkrset.next()) {
                    String query = "delete From Items where ItemCode = '" + Code + "'";
                    stmt.execute(query);
                    JOptionPane.showMessageDialog(this, "Item is deleted.");
                    Refresh();
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid item code. Please insert a valid item code.", "Invalid item code", JOptionPane.OK_OPTION);
                    txtItemCode.requestFocus();
                }
                stmt.close();
                Checkstmt.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

        } else if (x == JOptionPane.NO_OPTION) {
            txtItemCode.requestFocus();
        }
    }

    private void txtItemNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txtItemName.getText().isEmpty()) {
                String itemName = txtItemName.getText();
                txtPrintName.setText(itemName);
                txtPrintName.requestFocus();
            }
        }
    }//GEN-LAST:event_txtItemNameKeyPressed

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void cmbMainCategoryPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbMainCategoryPopupMenuWillBecomeInvisible
        String text = cmbMainCategory.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubCategoriesToCombo();
            cmbSubCategory.requestFocus();
        }
    }//GEN-LAST:event_cmbMainCategoryPopupMenuWillBecomeInvisible

    private void cmbSubCategoryPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbSubCategoryPopupMenuWillBecomeInvisible
        SetType();
    }//GEN-LAST:event_cmbSubCategoryPopupMenuWillBecomeInvisible

    private void TableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableItemMouseClicked
        LoadItemFromTable();
    }//GEN-LAST:event_TableItemMouseClicked

    private void LoadItemFromTable() {
        loadSubCategoriesToCombo();
        String ItemCode, ItemName, ItemPrintName, PurchaseUnitCode, MainCode, MainName, SubCode, SubName;
        String AvailableQuantity, PurchasePrice;

        String Type;
        String SellingPrice;
        String SellingUnitCode;
        String MinimumQuantity;
        String MaximumQuantity;
        String ReorderQuantity;
        String SupplierCode, SupplierName;
        String ItemVisibility;
        String PurchaseUnitName;
        String SellUnitName;
        String DepartmentCode, DepartmentName;

        String PresentageShowSellPrice;
        String PresentageBillSellPrice;
        String BaseCategoryCode;

        PathToImage = "";
        ButtonPicture.setIcon(null);

        ItemCode = TableItem.getValueAt(TableItem.getSelectedRow(), 0).toString();
        ItemName = TableItem.getValueAt(TableItem.getSelectedRow(), 1).toString();
        PurchaseUnitCode = TableItem.getValueAt(TableItem.getSelectedRow(), 2).toString();
        PurchasePrice = TableItem.getValueAt(TableItem.getSelectedRow(), 3).toString();
        AvailableQuantity = TableItem.getValueAt(TableItem.getSelectedRow(), 4).toString();

        try {
            ResultSet reset;
            Statement stmt;
            String query;
            query = "SELECT\n"
                    + "     Items.\"ItemCode\" AS Items_ItemCode,\n"
                    + "     Items.\"ItemName\" AS Items_ItemName,\n"
                    + "     Items.\"PrintName\" AS Items_PrintName,\n"
                    + "     Items.\"MainCategoryCode\" AS Items_MainCategoryCode,\n"
                    + "     Items.\"SubCategoryCode\" AS Items_SubCategoryCode,\n"
                    + "     Items.\"Type\" AS Items_Type,\n"
                    + "     Items.\"PurchasePrice\" AS Items_PurchasePrice,\n"
                    + "     Items.\"SellPrice\" AS Items_SellPrice,\n"
                    + "     Items.\"Quantity\" AS Items_Quantity,\n"
                    + "     Items.\"UnitPurchase\" AS Items_UnitPurchase,\n"
                    + "     Items.\"UnitSell\" AS Items_UnitSell,\n"
                    + "     Items.\"ReorderQty\" AS Items_ReorderQty,\n"
                    + "     Items.\"MinimumQty\" AS Items_MinimumQty,\n"
                    + "     Items.\"MaximumQty\" AS Items_MaximumQty,\n"
                    + "     Items.\"DepartmentCode\" AS Items_DepartmentCode,\n"
                    + "     Items.\"MinusSell\" AS Items_MinusSell,\n"
                    + "     Items.\"Currency\" AS Items_Currency,\n"
                    + "     Items.\"Visibility\" AS Items_Visibility,\n"
                    + "     Items.\"SupplierCode\" AS Items_SupplierCode,\n"
                    + "     Items.\"PresentageShowSellPrice\" AS Items_PresentageShowSellPrice,\n"
                    + "     Items.\"PresentageBillSellPrice\" AS Items_PresentageBillSellPrice,\n"
                    + "     Items.\"BaseCategoryCode\" AS Items_BaseCategoryCode,\n"
                    + "     Items.\"PathToImage\" AS Items_PathToImage,\n"
                    + "     SIUnits.\"UnitCode\" AS SIUnits_UnitCode,\n"
                    + "     SIUnits.\"UnitName\" AS SIUnits_UnitName,\n"
                    + "     Suppliers.\"SupplierCode\" AS Suppliers_SupplierCode,\n"
                    + "     Suppliers.\"SupplierName\" AS Suppliers_SupplierName,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName,\n"
                    + "     SubCategory.\"SubCategoryName\" AS SubCategory_SubCategoryName,\n"
                    + "     SubCategory.\"SubCategoryCode\" AS SubCategory_SubCategoryCode,\n"
                    + "     MainCategory.\"MainCategoryName\" AS MainCategory_MainCategoryName,\n"
                    + "     MainCategory.\"MainCategoryCode\" AS MainCategory_MainCategoryCode\n"
                    + "FROM\n"
                    + "     \"dbo\".\"Items\" Items INNER JOIN \"dbo\".\"Suppliers\" Suppliers ON Items.\"SupplierCode\" = Suppliers.\"SupplierCode\"\n"
                    + "     INNER JOIN \"dbo\".\"SIUnits\" SIUnits ON Items.\"UnitPurchase\" = SIUnits.\"UnitCode\"\n"
                    + "     INNER JOIN \"dbo\".\"SubCategory\" SubCategory ON Items.\"SubCategoryCode\" = SubCategory.\"SubCategoryCode\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON Items.\"DepartmentCode\" = Departments.\"DepartmentCode\"\n"
                    + "     INNER JOIN \"dbo\".\"MainCategory\" MainCategory ON Items.\"MainCategoryCode\" = MainCategory.\"MainCategoryCode\"\n"
                    + "where Items.\"ItemCode\" = '" + ItemCode + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {
                ItemPrintName = reset.getString("Items_PrintName");
                MainCode = reset.getString("Items_MainCategoryCode");
                MainName = reset.getString("MainCategory_MainCategoryName");
                SubCode = reset.getString("Items_SubCategoryCode");
                SubName = reset.getString("SubCategory_SubCategoryName");
                Type = reset.getString("Items_Type");
                PurchaseUnitName = reset.getString("SIUnits_UnitName");
                SellingPrice = reset.getString("Items_SellPrice");
                SellingUnitCode = reset.getString("Items_UnitSell");
                SellUnitName = reset.getString("SIUnits_UnitName");
                MinimumQuantity = reset.getString("Items_MinimumQty");
                MaximumQuantity = reset.getString("Items_MaximumQty");
                ReorderQuantity = reset.getString("Items_ReorderQty");
                SupplierCode = reset.getString("Suppliers_SupplierCode");
                SupplierName = reset.getString("Suppliers_SupplierName");
                ItemVisibility = reset.getString("Items_Visibility");
                PresentageShowSellPrice = reset.getString("Items_PresentageShowSellPrice");
                PresentageBillSellPrice = reset.getString("Items_PresentageBillSellPrice");
                DepartmentCode = reset.getString("Items_DepartmentCode");
                DepartmentName = reset.getString("Departments_DepartmentName");
                PathToImage = reset.getString("Items_PathToImage");
                BaseCategoryCode = reset.getString("Items_BaseCategoryCode");

                txtItemCode.setText(ItemCode);
                txtPrintName.setText(ItemPrintName);
                txtItemName.setText(ItemName);
                cmbMainCategory.setSelectedItem(MainName + "--" + MainCode);
                cmbSubCategory.setSelectedItem(SubName + "--" + SubCode);
                txtType.setText(Type);
                txtPurchaseCost.setText(String.format("%.2f", Double.parseDouble(PurchasePrice)));
                cmbPurchaseUnit.setSelectedItem(PurchaseUnitName + "--" + PurchaseUnitCode);
                txtSellingPrice.setText(String.format("%.2f", Double.parseDouble(SellingPrice)));
                cmbSellingUnit.setSelectedItem(SellUnitName + "--" + SellingUnitCode);
                txtMinimumQuantity.setText(MinimumQuantity);
                txtMaximumQuantity.setText(MaximumQuantity);
                txtAvailableQuantity.setText(AvailableQuantity);
                txtReorderQuantity.setText(ReorderQuantity);
                cmbSupplier.setSelectedItem(SupplierName + "--" + SupplierCode);
                cmbVisibility.setSelectedItem(ItemVisibility);
                txtAvailableQuantity.setEnabled(false);
                txtSellingPrice.setEnabled(false);
                txtPurchaseCost.setEnabled(false);

                TextPresentageShowSellPrice.setText(PresentageShowSellPrice);
                TextPresentageBillSellPrice.setText(PresentageBillSellPrice);
                ComboDepartment.setSelectedItem(DepartmentName + "--" + DepartmentCode);
                TextBaseCategory.setText(BaseCategoryCode);

                if (PathToImage == null || PathToImage.equals("")) {

                } else if (PathToImage != null || !PathToImage.equals("")) {
                    Image img = Toolkit.getDefaultToolkit().getImage(PathToImage);
                    ButtonPicture.setIcon(new ImageIcon(img.getScaledInstance(ButtonPicture.getWidth(), ButtonPicture.getHeight(), Image.SCALE_SMOOTH)));
                }
//                ImageIcon imgThisImg = new ImageIcon(projectPath + "/barcode/" + ItemCode + ".tif");
//                LabelBarCode.setIcon(imgThisImg);
            } else if (!reset.next()) {
                txtItemName.requestFocus();
                txtAvailableQuantity.setEnabled(true);
                txtSellingPrice.setEnabled(true);
                txtPurchaseCost.setEnabled(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void txtItemCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            LoadItemFromCodeField();
        }
    }//GEN-LAST:event_txtItemCodeKeyPressed

    private void ButtonCreateBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateBarCodeActionPerformed
        if (txtItemCode.getText().isEmpty() || txtItemName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select an item");
        } else {
            try {
                String Itemcode = txtItemCode.getText();
                String CompanyTag = "", Sellprice;

                String BarCodeLocation = projectPath + "/barcode/" + Itemcode + ".png";
                File f = new File(BarCodeLocation);
                boolean exists = f.exists();

                if (exists) {
                    int x = JOptionPane.showConfirmDialog(this, "Barcode is already exists. Do you want to replace it?", "Replace barcode?", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        f.delete();

                        BarcodeGenerate barcg = new BarcodeGenerate();
                        barcg.outputtingBarcodeAsPNG(Itemcode);

                        String location = barcg.getBarcodeLocation();
                        EnhanceBarCode enhance = new EnhanceBarCode();
                        enhance.setFinalImageLocation(location);

                        try {
                            Statement stmt, stmtSellPrice;
                            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            ResultSet rset = stmt.executeQuery("SELECT BarCodeTag FROM ClientCompany");
                            if (rset.next()) {
                                CompanyTag = rset.getString("BarCodeTag");
                            }
                            rset.close();

                            stmtSellPrice = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            ResultSet rsetSellPrice = stmtSellPrice.executeQuery("SELECT SellPrice FROM Items where ItemCode = '" + Itemcode + "'");
                            if (rsetSellPrice.next()) {
                                Sellprice = rsetSellPrice.getString("SellPrice");
                                txtSellingPrice.setText(String.format("%.2f", Double.parseDouble(Sellprice)));
                            }
                            rsetSellPrice.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            JOptionPane.showMessageDialog(this, "Please contact for support.");
                        }

                        try {
                            // Cretion of the new barcode
                            enhance.enhanceBarcode("Rs. " + txtSellingPrice.getText() + "       " + CompanyTag, location);
                        } catch (IOException ex) {
                            Logger.getLogger(Item.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Barcode is replaced successfully.");

                    }

                } else if (!exists) {

                    BarcodeGenerate barcg = new BarcodeGenerate();
                    barcg.outputtingBarcodeAsPNG(Itemcode);

                    String location = barcg.getBarcodeLocation();
                    EnhanceBarCode enhance = new EnhanceBarCode();
                    enhance.setFinalImageLocation(location);

                    try {
                        Statement stmt, stmtSellPrice;
                        stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        ResultSet rset = stmt.executeQuery("SELECT BarCodeTag FROM ClientCompany");
                        if (rset.next()) {
                            CompanyTag = rset.getString("BarCodeTag");
                        }
                        rset.close();

                        stmtSellPrice = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        ResultSet rsetSellPrice = stmtSellPrice.executeQuery("SELECT SellPrice FROM Items where ItemCode = '" + Itemcode + "'");
                        if (rsetSellPrice.next()) {
                            Sellprice = rsetSellPrice.getString("SellPrice");
                            txtSellingPrice.setText(String.format("%.2f", Double.parseDouble(Sellprice)));
                        }
                        rsetSellPrice.close();

                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }

                    try {
                        // Cretion of the new barcode
                        enhance.enhanceBarcode("Rs. " + txtSellingPrice.getText() + "       " + CompanyTag, location);
                    } catch (IOException ex) {
                        Logger.getLogger(Item.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Barcode is created successfully.");

                }

            } catch (BarcodeException ex) {
                Logger.getLogger(Item.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (BarcodeExist ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Already exsits", JOptionPane.OK_OPTION);
            } catch (OutputException ex) {
                Logger.getLogger(Item.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }//GEN-LAST:event_ButtonCreateBarCodeActionPerformed

    @SuppressWarnings("null")
    private void ButtonPreviewBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewBarCodeActionPerformed
        String Itemcode = txtItemCode.getText();
        if (!Itemcode.equals("")) {
            if (ReadConfig.BarCodeImageType.equals("tif")) {
                try {
                    File foler = new File(projectPath + "/barcode/" + Itemcode + ".tif"); // path to the directory to be opened
                    Desktop desktop = null;
                    if (Desktop.isDesktopSupported()) {
                        desktop = Desktop.getDesktop();
                    }
                    if (foler.exists()) {
                        desktop.open(foler);
                    } else if (!foler.exists()) {
                        JOptionPane.showMessageDialog(this, "Barcode image is not exists to preview.", "Not exists", JOptionPane.OK_OPTION);
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (ReadConfig.BarCodeImageType.equals("png")) {
                try {
                    File foler = new File(projectPath + "/barcode/" + Itemcode + ".png"); // path to the directory to be opened
                    Desktop desktop = null;
                    if (Desktop.isDesktopSupported()) {
                        desktop = Desktop.getDesktop();
                    }
                    if (foler.exists()) {
                        desktop.open(foler);
                    } else if (!foler.exists()) {
                        JOptionPane.showMessageDialog(this, "Barcode image is not exists to preview.", "Not exists", JOptionPane.OK_OPTION);
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            }
        } else if (Itemcode.equals("")) {
            JOptionPane.showMessageDialog(this, "Item code field is empty.", "Empty fields", JOptionPane.OK_OPTION);
            txtItemCode.requestFocus();
        }
    }//GEN-LAST:event_ButtonPreviewBarCodeActionPerformed

    @SuppressWarnings("null")
    private void ButtonGoToLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGoToLocationActionPerformed
        try {
            File foler = new File(projectPath + "/barcode/"); // path to the directory to be opened
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            if (foler.exists()) {
                desktop.open(foler);
            } else if (!foler.exists()) {
                JOptionPane.showMessageDialog(this, "Folder is not exists to open.", "Not exists", JOptionPane.OK_OPTION);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }//GEN-LAST:event_ButtonGoToLocationActionPerformed

    private void txtItemCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemCodeKeyReleased
        ValidateFields.CheckForItemCodes(txtItemCode);
    }//GEN-LAST:event_txtItemCodeKeyReleased

    private void txtItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyReleased
        ValidateFields.CheckForOtherFields(txtItemName);
    }//GEN-LAST:event_txtItemNameKeyReleased

    private void txtPurchaseCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPurchaseCostKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbPurchaseUnit.requestFocus();
        }
    }//GEN-LAST:event_txtPurchaseCostKeyPressed

    private void cmbPurchaseUnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbPurchaseUnitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtSellingPrice.requestFocus();
        }
    }//GEN-LAST:event_cmbPurchaseUnitKeyPressed

    private void txtSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbSellingUnit.requestFocus();
        }
    }//GEN-LAST:event_txtSellingPriceKeyPressed

    private void cmbSellingUnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSellingUnitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtMinimumQuantity.requestFocus();
        }
    }//GEN-LAST:event_cmbSellingUnitKeyPressed

    private void txtMinimumQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinimumQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtMaximumQuantity.requestFocus();
        }
    }//GEN-LAST:event_txtMinimumQuantityKeyPressed

    private void txtMaximumQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaximumQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtAvailableQuantity.requestFocus();
        }
    }//GEN-LAST:event_txtMaximumQuantityKeyPressed

    private void txtAvailableQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAvailableQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtReorderQuantity.requestFocus();
        }
    }//GEN-LAST:event_txtAvailableQuantityKeyPressed

    private void txtReorderQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReorderQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbSupplier.requestFocus();
        }
    }//GEN-LAST:event_txtReorderQuantityKeyPressed

    private void cmbSupplierKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSupplierKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbVisibility.requestFocus();
        }
    }//GEN-LAST:event_cmbSupplierKeyPressed

    private void cmbVisibilityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbVisibilityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ComboDepartment.requestFocus();
        }
    }//GEN-LAST:event_cmbVisibilityKeyPressed

    private void txtItemNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemNameFocusGained
        txtItemName.selectAll();
    }//GEN-LAST:event_txtItemNameFocusGained

    private void txtPurchaseCostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPurchaseCostFocusGained
        txtPurchaseCost.selectAll();
    }//GEN-LAST:event_txtPurchaseCostFocusGained

    private void txtSellingPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSellingPriceFocusGained
        txtSellingPrice.selectAll();
    }//GEN-LAST:event_txtSellingPriceFocusGained

    private void txtMinimumQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMinimumQuantityFocusGained
        txtMinimumQuantity.selectAll();
    }//GEN-LAST:event_txtMinimumQuantityFocusGained

    private void txtMaximumQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaximumQuantityFocusGained
        txtMaximumQuantity.selectAll();
    }//GEN-LAST:event_txtMaximumQuantityFocusGained

    private void txtAvailableQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAvailableQuantityFocusGained
        txtAvailableQuantity.selectAll();
    }//GEN-LAST:event_txtAvailableQuantityFocusGained

    private void txtReorderQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReorderQuantityFocusGained
        txtReorderQuantity.selectAll();
    }//GEN-LAST:event_txtReorderQuantityFocusGained

    private void ComboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ComboDepartmentPopupMenuWillBecomeInvisible
        if (!ComboDepartment.getSelectedItem().equals(select)) {
            cmbSupplier.requestFocus();
        }
    }//GEN-LAST:event_ComboDepartmentPopupMenuWillBecomeInvisible

    private void ComboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!ComboDepartment.getSelectedItem().equals(select)) {
                buttonSave.requestFocus();
            }
        }
    }//GEN-LAST:event_ComboDepartmentKeyPressed

    @SuppressWarnings("null")
    private void ButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExportActionPerformed
        String Itemcode = txtItemCode.getText();
        String ItemName = txtItemName.getText();
        if (!Itemcode.isEmpty() && !ItemName.isEmpty()) {

            try {
                File foler = null;
                if (ReadConfig.BarCodeImageType.equals("png")) {
                    foler = new File(projectPath + "/barcode/" + Itemcode + ".png"); // path to the directory to be opened
                } else if (ReadConfig.BarCodeImageType.equals("tif")) {
                    foler = new File(projectPath + "/barcode/" + Itemcode + ".tif"); // path to the directory to be opened
                }

                if (foler.exists()) {
                    if (RadioButtonFullA4.isSelected()) {
                        PreviewFullA4();
                    } else if (RadioButtonHalfA4.isSelected()) {
                        PreviewHalfA4();
                    } else if (RadioButtonOneRow.isSelected()) {
                        PreviewOneRow();
                    }
                } else if (!foler.exists()) {
                    JOptionPane.showMessageDialog(this, "Barcode image is not exists to export. You have to create it first.", "Not exists", JOptionPane.OK_OPTION);
                    ButtonCreateBarCode.requestFocus();
                }

            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_ButtonExportActionPerformed

    private void ButtonPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPictureActionPerformed
        PathToImage = "";
        String Itemcode = txtItemCode.getText();
        AddPicture apt = new AddPicture();
        PathToImage = apt.AddPictures("Items", ButtonPicture, Itemcode);
    }//GEN-LAST:event_ButtonPictureActionPerformed

    @SuppressWarnings("null")
    private void ButtonPreviewImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewImageActionPerformed
        String Itemcode = txtItemCode.getText();
        if (!Itemcode.equals("")) {
            try {
                File foler = new File(projectPath + "\\pictures\\" + "\\Items\\" + Itemcode + ".jpg"); // path to the directory to be opened
                Desktop desktop = null;
                if (Desktop.isDesktopSupported()) {
                    desktop = Desktop.getDesktop();
                }

                if (foler.exists()) {
                    desktop.open(foler);
                } else if (!foler.exists()) {
                    JOptionPane.showMessageDialog(this, "Image is not exists to preview.", "Not exists", JOptionPane.OK_OPTION);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }//GEN-LAST:event_ButtonPreviewImageActionPerformed

    @SuppressWarnings("null")
    private void ButtonGoToimageLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGoToimageLocationActionPerformed
        try {
            File foler = new File(projectPath + "\\pictures\\" + "\\Items\\"); // path to the directory to be opened
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }

            if (foler.exists()) {
                desktop.open(foler);
            } else if (!foler.exists()) {
                JOptionPane.showMessageDialog(this, "Folder is not exists to open.", "Not exists", JOptionPane.OK_OPTION);
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }//GEN-LAST:event_ButtonGoToimageLocationActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        item.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtPrintNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrintNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txtPrintName.getText().isEmpty()) {
                cmbMainCategory.requestFocus();
            }
        }
    }//GEN-LAST:event_txtPrintNameKeyPressed

    private void txtPrintNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrintNameKeyReleased
        ValidateFields.CheckForOtherFields(txtPrintName);
    }//GEN-LAST:event_txtPrintNameKeyReleased

    private void PreviewFullA4() {
        String Itemcode = txtItemCode.getText();
        String ItemName = txtItemName.getText();
        String PathToLogo = projectPath + "\\barcode\\" + Itemcode + ".png";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("BarCodeImage", PathToLogo);
            map.put("ItemCode", Itemcode);
            map.put("ItemName", ItemName);

            String Report = "BarCode Full A4.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "\\Reports\\Data Reports\\" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void PreviewHalfA4() {
        String Itemcode = txtItemCode.getText();
        String ItemName = txtItemName.getText();
        String PathToLogo = projectPath + "\\barcode\\" + Itemcode + ".png";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("BarCodeImage", PathToLogo);
            map.put("ItemCode", Itemcode);
            map.put("ItemName", ItemName);

            String Report = "BarCode Half A4.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "\\Reports\\Data Reports\\" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void PreviewOneRow() {
        String Itemcode = txtItemCode.getText();
        String ItemName = txtItemName.getText();
        String PathToLogo = projectPath + "\\barcode\\" + Itemcode + ".png";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("BarCodeImage", PathToLogo);
            map.put("ItemCode", Itemcode);
            map.put("ItemName", ItemName);

            String Report = "BarCode OneRow A4.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "\\Reports\\Data Reports\\" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

//    private void LoadBarCodeImageAtCreation() {
//        String Itemcode = txtItemCode.getText().toString();
//        ImageIcon imgThisImg = new ImageIcon(projectPath + "/barcode/" + Itemcode + ".png");
//        LabelBarCode.setIcon(imgThisImg);
//
//    }
    private void LoadItemFromCodeField() {
        loadSubCategoriesToCombo();
        String ItemCode, ItemName, ItemPrintName, PurchaseUnitCode, MainCode, MainName, SubCode, SubName;
        String AvailableQuantity, PurchasePrice;

        String Type;
        String SellingPrice;
        String SellingUnitCode;
        String MinimumQuantity;
        String MaximumQuantity;
        String ReorderQuantity;
        String SupplierCode, SupplierName;
        String ItemVisibility;
        String PurchaseUnitName;
        String SellUnitName;

        String PresentageShowSellPrice;
        String PresentageBillSellPrice;
        String DepartmentCode, DepartmentName;
        String BaseCategoryCode;

        PathToImage = "";
        ButtonPicture.setIcon(null);

        try {
            ItemCode = txtItemCode.getText();
            ResultSet reset;
            Statement stmt;
            String query;
            query = "SELECT\n"
                    + "     Items.\"ItemCode\" AS Items_ItemCode,\n"
                    + "     Items.\"ItemName\" AS Items_ItemName,\n"
                    + "     Items.\"PrintName\" AS Items_PrintName,\n"
                    + "     Items.\"MainCategoryCode\" AS Items_MainCategoryCode,\n"
                    + "     Items.\"SubCategoryCode\" AS Items_SubCategoryCode,\n"
                    + "     Items.\"Type\" AS Items_Type,\n"
                    + "     Items.\"PurchasePrice\" AS Items_PurchasePrice,\n"
                    + "     Items.\"SellPrice\" AS Items_SellPrice,\n"
                    + "     Items.\"Quantity\" AS Items_Quantity,\n"
                    + "     Items.\"UnitPurchase\" AS Items_UnitPurchase,\n"
                    + "     Items.\"UnitSell\" AS Items_UnitSell,\n"
                    + "     Items.\"ReorderQty\" AS Items_ReorderQty,\n"
                    + "     Items.\"MinimumQty\" AS Items_MinimumQty,\n"
                    + "     Items.\"MaximumQty\" AS Items_MaximumQty,\n"
                    + "     Items.\"DepartmentCode\" AS Items_DepartmentCode,\n"
                    + "     Items.\"PathToImage\" AS Items_PathToImage,\n"
                    + "     Items.\"MinusSell\" AS Items_MinusSell,\n"
                    + "     Items.\"Currency\" AS Items_Currency,\n"
                    + "     Items.\"Visibility\" AS Items_Visibility,\n"
                    + "     Items.\"SupplierCode\" AS Items_SupplierCode,\n"
                    + "     Items.\"PresentageShowSellPrice\" AS Items_PresentageShowSellPrice,\n"
                    + "     Items.\"PresentageBillSellPrice\" AS Items_PresentageBillSellPrice,\n"
                    + "     Items.\"BaseCategoryCode\" AS Items_BaseCategoryCode,\n"
                    + "     SIUnits.\"UnitCode\" AS SIUnits_UnitCode,\n"
                    + "     SIUnits.\"UnitName\" AS SIUnits_UnitName,\n"
                    + "     Suppliers.\"SupplierCode\" AS Suppliers_SupplierCode,\n"
                    + "     Suppliers.\"SupplierName\" AS Suppliers_SupplierName,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName,\n"
                    + "     SubCategory.\"SubCategoryName\" AS SubCategory_SubCategoryName,\n"
                    + "     SubCategory.\"SubCategoryCode\" AS SubCategory_SubCategoryCode,\n"
                    + "     MainCategory.\"MainCategoryName\" AS MainCategory_MainCategoryName,\n"
                    + "     MainCategory.\"MainCategoryCode\" AS MainCategory_MainCategoryCode\n"
                    + "FROM\n"
                    + "     \"dbo\".\"Items\" Items INNER JOIN \"dbo\".\"Suppliers\" Suppliers ON Items.\"SupplierCode\" = Suppliers.\"SupplierCode\"\n"
                    + "     INNER JOIN \"dbo\".\"SIUnits\" SIUnits ON Items.\"UnitPurchase\" = SIUnits.\"UnitCode\"\n"
                    + "     INNER JOIN \"dbo\".\"SubCategory\" SubCategory ON Items.\"SubCategoryCode\" = SubCategory.\"SubCategoryCode\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON Items.\"DepartmentCode\" = Departments.\"DepartmentCode\"\n"
                    + "     INNER JOIN \"dbo\".\"MainCategory\" MainCategory ON Items.\"MainCategoryCode\" = MainCategory.\"MainCategoryCode\"\n"
                    + "where Items.\"ItemCode\" = '" + ItemCode + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {

//                ItemCode = reset.getString("Items_MainCategoryCode");
                ItemName = reset.getString("Items_ItemName");
                ItemPrintName = reset.getString("Items_PrintName");
                PurchaseUnitCode = reset.getString("Items_UnitPurchase");
                PurchasePrice = reset.getString("Items_PurchasePrice");
                AvailableQuantity = reset.getString("Items_Quantity");

                MainCode = reset.getString("Items_MainCategoryCode");
                MainName = reset.getString("MainCategory_MainCategoryName");
                SubCode = reset.getString("Items_SubCategoryCode");
                SubName = reset.getString("SubCategory_SubCategoryName");
                Type = reset.getString("Items_Type");
                PurchaseUnitName = reset.getString("SIUnits_UnitName");
                SellingPrice = reset.getString("Items_SellPrice");
                SellingUnitCode = reset.getString("Items_UnitSell");
                SellUnitName = reset.getString("SIUnits_UnitName");
                MinimumQuantity = reset.getString("Items_MinimumQty");
                MaximumQuantity = reset.getString("Items_MaximumQty");
                ReorderQuantity = reset.getString("Items_ReorderQty");
                SupplierCode = reset.getString("Suppliers_SupplierCode");
                SupplierName = reset.getString("Suppliers_SupplierName");
                ItemVisibility = reset.getString("Items_Visibility");
                PresentageShowSellPrice = reset.getString("Items_PresentageShowSellPrice");
                PresentageBillSellPrice = reset.getString("Items_PresentageBillSellPrice");
                DepartmentCode = reset.getString("Items_DepartmentCode");
                DepartmentName = reset.getString("Departments_DepartmentName");
                PathToImage = reset.getString("Items_PathToImage");
                BaseCategoryCode = reset.getString("Items_BaseCategoryCode");

                txtItemName.setText(ItemName);
                txtPrintName.setText(ItemPrintName);
                cmbMainCategory.setSelectedItem(MainName + "--" + MainCode);
                cmbSubCategory.setSelectedItem(SubName + "--" + SubCode);
                txtType.setText(Type);
                txtPurchaseCost.setText(String.format("%.2f", Double.parseDouble(PurchasePrice)));
                cmbPurchaseUnit.setSelectedItem(PurchaseUnitName + "--" + PurchaseUnitCode);
                txtSellingPrice.setText(String.format("%.2f", Double.parseDouble(SellingPrice)));
                cmbSellingUnit.setSelectedItem(SellUnitName + "--" + SellingUnitCode);
                txtMinimumQuantity.setText(MinimumQuantity);
                txtMaximumQuantity.setText(MaximumQuantity);
                txtAvailableQuantity.setText(AvailableQuantity);
                txtReorderQuantity.setText(ReorderQuantity);
                cmbSupplier.setSelectedItem(SupplierName + "--" + SupplierCode);
                cmbVisibility.setSelectedItem(ItemVisibility);
                txtAvailableQuantity.setEnabled(false);
                txtSellingPrice.setEnabled(false);
                txtPurchaseCost.setEnabled(false);

                TextPresentageShowSellPrice.setText(PresentageShowSellPrice);
                TextPresentageBillSellPrice.setText(PresentageBillSellPrice);
                ComboDepartment.setSelectedItem(DepartmentName + "--" + DepartmentCode);
                TextBaseCategory.setText(BaseCategoryCode);

                if (PathToImage == null || PathToImage.equals("")) {

                } else if (PathToImage != null || !PathToImage.equals("")) {
                    Image img = Toolkit.getDefaultToolkit().getImage(PathToImage);
                    ButtonPicture.setIcon(new ImageIcon(img));
                }
//                ImageIcon imgThisImg = new ImageIcon(projectPath + "/barcode/" + ItemCode + ".png");
//                LabelBarCode.setIcon(imgThisImg);
            } else if (!reset.next()) {
                txtItemName.requestFocus();
                txtAvailableQuantity.setEnabled(true);
                txtSellingPrice.setEnabled(true);
                txtPurchaseCost.setEnabled(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SetType() {
        String SubCategoryCode[] = cmbSubCategory.getSelectedItem().toString().split("--");
        if (cmbSubCategory.getSelectedItem().equals(select)) {
            txtType.setText("");
        } else {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select Type, BaseCategoryCode From SubCategory where SubCategoryCode = '" + SubCategoryCode[1] + "'";
                ResultSet rset = stmt.executeQuery(query);
                if (rset.next()) {
                    String Type = rset.getString("Type");
                    String BaseCategoryCode = rset.getString("BaseCategoryCode");
                    txtType.setText(String.valueOf(Type));
                    TextBaseCategory.setText(String.valueOf(BaseCategoryCode));
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void SearchItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemCode.equals("")) {
                query = "SELECT * FROM Items WHERE ItemCode LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT * FROM Items  WHERE ItemCode LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                rowCount++;
            }
            textNumberOfSystemItems.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemName.equals("")) {
                query = "SELECT * FROM Items WHERE ItemName LIKE '%" + ItemName + "%'";
            } else {
                query = "SELECT * FROM Items  WHERE ItemName LIKE '%" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                rowCount++;
            }
            textNumberOfSystemItems.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshTable() {
        try {
            int row = model_ItemTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ItemTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Item window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            RefreshTableAndLoadAgain();
            txtItemCode.setText("");
            txtItemName.setText("");
            txtPrintName.setText("");
            cmbMainCategory.setSelectedItem(select);
            cmbSubCategory.setSelectedItem(select);
            txtType.setText("");
            txtPurchaseCost.setText("0.00");
            cmbPurchaseUnit.setSelectedItem(select);
            txtSellingPrice.setText("0.00");
            cmbSellingUnit.setSelectedItem(select);
            txtMinimumQuantity.setText("0.000");
            txtMaximumQuantity.setText("0.000");
            txtAvailableQuantity.setText("0.000");
            txtReorderQuantity.setText("0.000");
            cmbSupplier.setSelectedItem(select);
            cmbVisibility.setSelectedIndex(0);
            txtItemCode.requestFocus();
            txtAvailableQuantity.setEnabled(true);

            TextPresentageShowSellPrice.setText("0.00");
            TextPresentageBillSellPrice.setText("0.00");
            ComboDepartment.setSelectedItem(select);

            PathToImage = "";
            ButtonPicture.setIcon(null);
            TextBaseCategory.setText("");

            loadCategoriesToCombo();
            loadSubCategoriesToCombo();
        }
    }

    private void RefreshTableAndLoadAgain() {
        try {
            int row = model_ItemTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ItemTable.removeRow(0);
            }
            LoadItems();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadItems() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT * FROM Items ORDER BY ItemCode";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                rowCount++;
            }
            textNumberOfSystemItems.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCreateBarCode;
    private javax.swing.JButton ButtonExport;
    private javax.swing.JButton ButtonGoToLocation;
    private javax.swing.JButton ButtonGoToimageLocation;
    public static javax.swing.JButton ButtonPicture;
    private javax.swing.JButton ButtonPreviewBarCode;
    private javax.swing.JButton ButtonPreviewImage;
    private javax.swing.JComboBox ComboDepartment;
    private javax.swing.JRadioButton RadioButtonFullA4;
    private javax.swing.JRadioButton RadioButtonHalfA4;
    private javax.swing.JRadioButton RadioButtonOneRow;
    private javax.swing.JTable TableItem;
    private javax.swing.JTextField TextBaseCategory;
    private javax.swing.JFormattedTextField TextPresentageBillSellPrice;
    private javax.swing.JFormattedTextField TextPresentageShowSellPrice;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btn_Delete;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton buttonSave;
    private javax.swing.JComboBox cmbMainCategory;
    private javax.swing.JComboBox cmbPurchaseUnit;
    private javax.swing.JComboBox cmbSellingUnit;
    private javax.swing.JComboBox cmbSubCategory;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JComboBox cmbVisibility;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_subAccount3;
    private javax.swing.JLabel lbl_subAccount4;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel pnl_AccountCode;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTextField textNumberOfSystemItems;
    private javax.swing.JFormattedTextField txtAvailableQuantity;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JFormattedTextField txtMaximumQuantity;
    private javax.swing.JFormattedTextField txtMinimumQuantity;
    private javax.swing.JTextField txtPrintName;
    private javax.swing.JFormattedTextField txtPurchaseCost;
    private javax.swing.JFormattedTextField txtReorderQuantity;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JFormattedTextField txtSellingPrice;
    private javax.swing.JTextField txtType;
    // End of variables declaration//GEN-END:variables

    private void exit() {
        this.dispose();
        if (item != null) {
            item = null;
        }
    }
}
