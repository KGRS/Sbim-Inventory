/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reports;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.TraReIssue;
import db.ConnectSql;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;


public class TransactionReportsIssue extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form TransactionReports
     */
    public TransactionReportsIssue() {
        initComponents();
        loadBranchesToCombo();
        loadItems();

        cmbAutoID.setEnabled(false);
        cmbItem.setEnabled(false);
        cmbBranch.setEnabled(false);
        ReportTickDisable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        ButtonPreview = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        cmbBranch = new javax.swing.JComboBox();
        cmbAutoID = new javax.swing.JComboBox();
        rBtnBranch = new javax.swing.JRadioButton();
        rBtnItem = new javax.swing.JRadioButton();
        cmbItem = new javax.swing.JComboBox();
        rBtnAutoID = new javax.swing.JRadioButton();
        PanelReports = new javax.swing.JPanel();
        rBtnMainCategoryWiseDateRangeDetailReportBranch = new javax.swing.JRadioButton();
        rBtnDateRangeSummeryReportAll = new javax.swing.JRadioButton();
        rBtnIDWiseSingleReport = new javax.swing.JRadioButton();
        rBtnDateRangeSummeryReportBranch = new javax.swing.JRadioButton();
        rBtnDateRangeDetailReportAll = new javax.swing.JRadioButton();
        rBtnItemsMovementReportAll = new javax.swing.JRadioButton();
        rBtnItemMovementReportSingle = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        CalendarButtonStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        CalendarButtonEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        lbl_description1 = new javax.swing.JLabel();
        lbl_description2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        rBtnDisposal = new javax.swing.JRadioButton();
        rBtnTransfer = new javax.swing.JRadioButton();

        setIconifiable(true);
        setTitle("Transaction Reports (Issue)");
        setPreferredSize(new java.awt.Dimension(1055, 467));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 390, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 390, 80, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 390, 80, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 370, 260, 20));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbBranch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        jPanel1.add(cmbBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 280, 20));

        cmbAutoID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        jPanel1.add(cmbAutoID, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 280, 20));

        rBtnBranch.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnBranch);
        rBtnBranch.setForeground(new java.awt.Color(102, 102, 102));
        rBtnBranch.setText("Branch");
        rBtnBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnBranchActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 120, -1));

        rBtnItem.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnItem);
        rBtnItem.setForeground(new java.awt.Color(102, 102, 102));
        rBtnItem.setText("Item");
        rBtnItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnItemActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 120, -1));

        cmbItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        jPanel1.add(cmbItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 280, 20));

        rBtnAutoID.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnAutoID);
        rBtnAutoID.setForeground(new java.awt.Color(102, 102, 102));
        rBtnAutoID.setText("Auto ID");
        rBtnAutoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnAutoIDActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnAutoID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 120, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 500, 180));

        PanelReports.setBackground(new java.awt.Color(255, 255, 255));
        PanelReports.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        PanelReports.setPreferredSize(new java.awt.Dimension(480, 380));
        PanelReports.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rBtnMainCategoryWiseDateRangeDetailReportBranch.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnMainCategoryWiseDateRangeDetailReportBranch);
        rBtnMainCategoryWiseDateRangeDetailReportBranch.setForeground(new java.awt.Color(102, 102, 102));
        rBtnMainCategoryWiseDateRangeDetailReportBranch.setText("Main category wise date range quantity summery report (Branch)");
        rBtnMainCategoryWiseDateRangeDetailReportBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnMainCategoryWiseDateRangeDetailReportBranchActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnMainCategoryWiseDateRangeDetailReportBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 340, -1));

        rBtnDateRangeSummeryReportAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnDateRangeSummeryReportAll);
        rBtnDateRangeSummeryReportAll.setForeground(new java.awt.Color(102, 102, 102));
        rBtnDateRangeSummeryReportAll.setText("Date range summery report (All)");
        rBtnDateRangeSummeryReportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnDateRangeSummeryReportAllActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnDateRangeSummeryReportAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 190, -1));

        rBtnIDWiseSingleReport.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnIDWiseSingleReport);
        rBtnIDWiseSingleReport.setForeground(new java.awt.Color(102, 102, 102));
        rBtnIDWiseSingleReport.setText("ID wise single report");
        rBtnIDWiseSingleReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnIDWiseSingleReportActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnIDWiseSingleReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 190, -1));

        rBtnDateRangeSummeryReportBranch.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnDateRangeSummeryReportBranch);
        rBtnDateRangeSummeryReportBranch.setForeground(new java.awt.Color(102, 102, 102));
        rBtnDateRangeSummeryReportBranch.setText("Date range summery report (Branch)");
        rBtnDateRangeSummeryReportBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnDateRangeSummeryReportBranchActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnDateRangeSummeryReportBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 220, -1));

        rBtnDateRangeDetailReportAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnDateRangeDetailReportAll);
        rBtnDateRangeDetailReportAll.setForeground(new java.awt.Color(102, 102, 102));
        rBtnDateRangeDetailReportAll.setText("Date range detail report (All)");
        rBtnDateRangeDetailReportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnDateRangeDetailReportAllActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnDateRangeDetailReportAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 300, -1));

        rBtnItemsMovementReportAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnItemsMovementReportAll);
        rBtnItemsMovementReportAll.setForeground(new java.awt.Color(102, 102, 102));
        rBtnItemsMovementReportAll.setText("Items movement report (All)");
        rBtnItemsMovementReportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnItemsMovementReportAllActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnItemsMovementReportAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 180, -1));

        rBtnItemMovementReportSingle.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(rBtnItemMovementReportSingle);
        rBtnItemMovementReportSingle.setForeground(new java.awt.Color(102, 102, 102));
        rBtnItemMovementReportSingle.setText("Item movement report (Single)");
        rBtnItemMovementReportSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnItemMovementReportSingleActionPerformed(evt);
            }
        });
        PanelReports.add(rBtnItemMovementReportSingle, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 190, -1));
        PanelReports.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 182, 480, -1));

        panel1.add(PanelReports, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 480, 320));

        CalendarButtonStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 120, 20));

        CalendarButtonEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 120, 20));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("End date");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 70, 20));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Start date");
        panel1.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 70, 20));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rBtnDisposal.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnDisposal);
        rBtnDisposal.setForeground(new java.awt.Color(102, 102, 102));
        rBtnDisposal.setText("Item Disposal");
        rBtnDisposal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnDisposalActionPerformed(evt);
            }
        });
        jPanel3.add(rBtnDisposal, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 100, -1));

        rBtnTransfer.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnTransfer);
        rBtnTransfer.setForeground(new java.awt.Color(102, 102, 102));
        rBtnTransfer.setText("Item Transfer");
        rBtnTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnTransferActionPerformed(evt);
            }
        });
        jPanel3.add(rBtnTransfer, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 120, -1));

        panel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 500, 70));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ReportTickDisable() {
        rBtnIDWiseSingleReport.setEnabled(false);
//        rBtnSupplierWiseSingleReport.setEnabled(false);
        rBtnDateRangeSummeryReportAll.setEnabled(false);
        rBtnDateRangeSummeryReportBranch.setEnabled(false);
        rBtnDateRangeDetailReportAll.setEnabled(false);
        rBtnMainCategoryWiseDateRangeDetailReportBranch.setEnabled(false);
        rBtnItemMovementReportSingle.setEnabled(false);
        rBtnItemsMovementReportAll.setEnabled(false);
    }

    private void ReportTickEnable() {
        rBtnIDWiseSingleReport.setEnabled(true);
//        rBtnSupplierWiseSingleReport.setEnabled(true);
        rBtnDateRangeSummeryReportAll.setEnabled(true);
        rBtnDateRangeSummeryReportBranch.setEnabled(true);
        rBtnDateRangeDetailReportAll.setEnabled(true);
        rBtnMainCategoryWiseDateRangeDetailReportBranch.setEnabled(true);
        rBtnItemMovementReportSingle.setEnabled(true);
        rBtnItemsMovementReportAll.setEnabled(true);
    }

    private void loadBranchesToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Branches order by BranchName";
            ResultSet rset = stmt.executeQuery(query);

            cmbBranch.removeAllItems();
            cmbBranch.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbBranch.insertItemAt(rset.getString("BranchName") + "--" + rset.getString("BranchCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbBranch.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadItems() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select ItemCode, ItemName From Items order by ItemName";
            ResultSet rset = stmt.executeQuery(query);

            cmbItem.removeAllItems();
            cmbItem.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbItem.insertItemAt(rset.getString("ItemName") + "--" + rset.getString("ItemCode"), position);
                    position++;
                } while (rset.next());
            }
            cmbItem.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void Refresh() {
        cmbAutoID.setSelectedItem(select);
        cmbItem.setSelectedItem(select);
        cmbBranch.setSelectedItem(select);

//        rBtnAutoID.setEnabled(false);
//        rBtnSubCategory.setEnabled(false);
//        rBtnSupplier.setEnabled(false);
//
        cmbAutoID.setEnabled(false);
        cmbItem.setEnabled(false);
        cmbBranch.setEnabled(false);
        CalendarButtonStartDate.setText("");
        CalendarButtonEndDate.setText("");

        buttonGroup1.clearSelection();
        buttonGroup2.clearSelection();
        buttonGroup3.clearSelection();

        ReportTickDisable();
    }

    private void exit() {
        if (TraReIssue != null) {
            TraReIssue = null;
        }
        this.dispose();
    }

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();

        if (StartDate.isEmpty() || EndDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Start date or end date is not selected.", "Not seleted", JOptionPane.OK_OPTION);
        } else if (!rBtnIDWiseSingleReport.isSelected() //&& !rBtnSupplierWiseSingleReport.isSelected() 
                && !rBtnDateRangeSummeryReportAll.isSelected() && !rBtnDateRangeSummeryReportBranch.isSelected()
                && !rBtnDateRangeDetailReportAll.isSelected() && !rBtnMainCategoryWiseDateRangeDetailReportBranch.isSelected()
                && !rBtnItemMovementReportSingle.isSelected() && !rBtnItemsMovementReportAll.isSelected()) {
            JOptionPane.showMessageDialog(this, "please select a report.", "Not seleted", JOptionPane.OK_OPTION);
        } else if ((!StartDate.isEmpty() && !EndDate.isEmpty()) && rBtnIDWiseSingleReport.isSelected()
                || rBtnDateRangeSummeryReportAll.isSelected() //|| rBtnSupplierWiseSingleReport.isSelected() 
                || rBtnDateRangeSummeryReportBranch.isSelected() || rBtnDateRangeDetailReportAll.isSelected()
                || rBtnMainCategoryWiseDateRangeDetailReportBranch.isSelected() || rBtnItemMovementReportSingle.isSelected()
                || rBtnItemsMovementReportAll.isSelected()) {
            PrintTransactionReport();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void PrintTransactionReport() {
        Connection sqlcon = ConnectSql.conn;
        Map map = new HashMap();
//        String Date = IndexPage.LabelDate.getText().toString();
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();

        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        String AutoID[] = cmbAutoID.getSelectedItem().toString().split("--");
        String BranchCode[] = cmbBranch.getSelectedItem().toString().split("--");

        if (rBtnDisposal.isSelected()) {
            if (rBtnAutoID.isSelected() && !cmbAutoID.getSelectedItem().equals(select) && rBtnIDWiseSingleReport.isSelected()) {
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("DisposalID", AutoID[0]);
                    map.put("Logo", PathToLogo);

                    String Report = "Disposal ID wise single report.jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Disposal/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (rBtnDateRangeSummeryReportAll.isSelected()) {
//                try {
//                    Map map = new HashMap();
//                    map.put("User", IndexPage.user.trim());
//                    map.put("Logo", PathToLogo);
//                    map.put("Start_Date", StartDate);
//                    map.put("End_Date", EndDate);
//
//                    String Report = "GRN Date range summery report (All).jrxml";
//                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/GRN/" + Report);
//                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
//                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
//                    JasperViewer.viewReport(jasperprint, false);
//                } catch (JRException ex) {
//                    JOptionPane.showMessageDialog(this, ex.getMessage());
//                }
            } else if (rBtnDateRangeSummeryReportBranch.isSelected() && rBtnBranch.isSelected() && !cmbBranch.getSelectedItem().equals(select)) {
//                try {
//                    Map map = new HashMap();
//                    map.put("User", IndexPage.user.trim());
//                    map.put("Logo", PathToLogo);
//                    map.put("Start_Date", StartDate);
//                    map.put("End_Date", EndDate);
//                    map.put("SupplierCode", SupplierCode[1]);
//
//                    String Report = "GRN Date range summery report (Supplier).jrxml";
//                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/GRN/" + Report);
//                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
//                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
//                    JasperViewer.viewReport(jasperprint, false);
//                } catch (JRException ex) {
//                    JOptionPane.showMessageDialog(this, ex.getMessage());
//                }
            }

///////////////////////////////////////////////////////////////////////////////            
        } else if (rBtnTransfer.isSelected()) {
            if (rBtnAutoID.isSelected() && !cmbAutoID.getSelectedItem().equals(select) && rBtnIDWiseSingleReport.isSelected()) {
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("TransferID", AutoID[0]);
                    map.put("Logo", PathToLogo);

                    String Report = "Transfer ID wise single report.jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Transfer/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (rBtnMainCategoryWiseDateRangeDetailReportBranch.isSelected() && rBtnBranch.isSelected() && !cmbBranch.getSelectedItem().equals(select)) {
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("Logo", PathToLogo);
                    map.put("Start_Date", StartDate);
                    map.put("End_Date", EndDate);
                    map.put("BranchCode", BranchCode[1]);

                    String Report = "TransferItemQtyGroupByCategory(Branch).jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Transfer/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            }
        }
    }

    private void rBtnBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnBranchActionPerformed
        RefreshCombo();
        cmbAutoID.setEnabled(false);
        cmbItem.setEnabled(false);
        cmbBranch.setEnabled(true);
    }//GEN-LAST:event_rBtnBranchActionPerformed

    private void rBtnItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnItemActionPerformed
        RefreshCombo();
        cmbAutoID.setEnabled(false);
        cmbItem.setEnabled(true);
        cmbBranch.setEnabled(false);
    }//GEN-LAST:event_rBtnItemActionPerformed

    private void rBtnAutoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnAutoIDActionPerformed
        RefreshCombo();
        cmbAutoID.setEnabled(true);
        cmbItem.setEnabled(false);
        cmbBranch.setEnabled(false);
    }//GEN-LAST:event_rBtnAutoIDActionPerformed

    private void RefreshCombo() {
        cmbAutoID.setSelectedItem(select);
        cmbItem.setSelectedItem(select);
        cmbBranch.setSelectedItem(select);
    }

    private void rBtnMainCategoryWiseDateRangeDetailReportBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnMainCategoryWiseDateRangeDetailReportBranchActionPerformed
        if (rBtnMainCategoryWiseDateRangeDetailReportBranch.isSelected()) {
        }
    }//GEN-LAST:event_rBtnMainCategoryWiseDateRangeDetailReportBranchActionPerformed

    private void rBtnDateRangeSummeryReportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnDateRangeSummeryReportAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnDateRangeSummeryReportAllActionPerformed

    private void rBtnIDWiseSingleReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnIDWiseSingleReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnIDWiseSingleReportActionPerformed

    private void rBtnDateRangeSummeryReportBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnDateRangeSummeryReportBranchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnDateRangeSummeryReportBranchActionPerformed

    private void rBtnDateRangeDetailReportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnDateRangeDetailReportAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnDateRangeDetailReportAllActionPerformed

    private void CalendarButtonStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonStartDate.setText(format.format(RecievedDate));
            CalendarButtonEndDate.requestFocus();

            ResetCombo();
            buttonGroup1.clearSelection();
        }
    }//GEN-LAST:event_CalendarButtonStartDatePropertyChange

    private void CalendarButtonEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonEndDate.setText(format.format(RecievedDate));

            ResetCombo();
            buttonGroup1.clearSelection();
        }
    }//GEN-LAST:event_CalendarButtonEndDatePropertyChange

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void ResetCombo() {
        cmbAutoID.removeAllItems();
        cmbAutoID.insertItemAt("--Select--", 0);
        cmbAutoID.setSelectedIndex(0);

        cmbItem.removeAllItems();
        cmbItem.insertItemAt("--Select--", 0);
        cmbItem.setSelectedIndex(0);

        cmbBranch.removeAllItems();
        cmbBranch.insertItemAt("--Select--", 0);
        cmbBranch.setSelectedIndex(0);

//        cmbAutoID.setSelectedItem(select);
//        cmbItem.setSelectedItem(select);
//        cmbSupplier.setSelectedItem(select);
    }
///////////////////////////////////////////////////////////////////////////////////////

    private void AutoIdDisposal() {
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DisposalID From ItemDisposalMain where DisposalDate >= '" + StartDate + "' AND DisposalDate <= '" + EndDate + "'order by DisposalID";
            ResultSet rset = stmt.executeQuery(query);

            cmbAutoID.removeAllItems();
            cmbAutoID.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbAutoID.insertItemAt(rset.getString("DisposalID"), position);
                    position++;
                } while (rset.next());
            }
            cmbAutoID.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.OK_OPTION);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void ItemGRN() {
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select distinct ItemCode, ItemName From GRNItems where (GRNDate >= '" + StartDate + "' AND GRNDate <= '" + EndDate + "') order by ItemName";
            ResultSet rset = stmt.executeQuery(query);

            cmbItem.removeAllItems();
            cmbItem.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbItem.insertItemAt(rset.getString("ItemName") + "--" + rset.getString("ItemCode"), position);
                    position++;
                } while (rset.next());
            }
            cmbItem.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.OK_OPTION);
        }
    }

    private void SupplierGRN() {
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT distinct\n"
                    + "     GRNMain.\"SupplierCode\" AS GRNMain_SupplierCode,\n"
                    + "     GRNMain.\"GRNDate\" AS GRNMain_GRNDate,\n"
                    + "     Suppliers.\"SupplierName\" AS Suppliers_SupplierName,\n"
                    + "     Suppliers.\"SupplierCode\" AS Suppliers_SupplierCode\n"
                    + "FROM\n"
                    + "     \"dbo\".\"Suppliers\" Suppliers INNER JOIN \"dbo\".\"GRNMain\" GRNMain ON Suppliers.\"SupplierCode\" = GRNMain.\"SupplierCode\" where GRNMain.\"GRNDate\" >= '" + StartDate + "' AND GRNMain.\"GRNDate\" <= '" + EndDate + "'order by Suppliers.\"SupplierName\"";
            ResultSet rset = stmt.executeQuery(query);

            cmbBranch.removeAllItems();
            cmbBranch.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbBranch.insertItemAt(rset.getString("Suppliers_SupplierName") + "--" + rset.getString("GRNMain_SupplierCode"), position);
                    position++;
                } while (rset.next());
            }
            cmbBranch.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.OK_OPTION);
        }
    }

////////////////////////////////////////////////////////////////////////////
    private void AutoIDTransfer() {
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select TransferID, TransferTo From ItemTransferMain where TransferDate >= '" + StartDate + "' AND TransferDate <= '" + EndDate + "'order by TransferID";
            ResultSet rset = stmt.executeQuery(query);

            cmbAutoID.removeAllItems();
            cmbAutoID.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbAutoID.insertItemAt(rset.getString("TransferID") + "--" + rset.getString("TransferTo"), position);
                    position++;
                } while (rset.next());
            }
            cmbAutoID.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.OK_OPTION);
        }
    }

    private void rBtnDisposalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnDisposalActionPerformed
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();

        if (StartDate.isEmpty() || EndDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Start date or end date is not selected.", "Not seleted", JOptionPane.OK_OPTION);
            buttonGroup1.clearSelection();
        } else if ((!StartDate.isEmpty() && !EndDate.isEmpty()) && rBtnDisposal.isSelected()) {
            ResetCombo();
            AutoIdDisposal();
            ItemGRN();
            SupplierGRN();
            ReportTickEnable();
        }
    }//GEN-LAST:event_rBtnDisposalActionPerformed

    private void rBtnTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnTransferActionPerformed
        String StartDate = CalendarButtonStartDate.getText().toString();
        String EndDate = CalendarButtonEndDate.getText().toString();

        if (StartDate.isEmpty() || EndDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Start date or end date is not selected.", "Not seleted", JOptionPane.OK_OPTION);
            buttonGroup1.clearSelection();
        } else if ((!StartDate.isEmpty() && !EndDate.isEmpty()) && rBtnTransfer.isSelected()) {
            ResetCombo();
            AutoIDTransfer();
            ReportTickEnable();
            loadBranchesToCombo();
            loadItems();
        }
    }//GEN-LAST:event_rBtnTransferActionPerformed

    private void rBtnItemsMovementReportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnItemsMovementReportAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnItemsMovementReportAllActionPerformed

    private void rBtnItemMovementReportSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnItemMovementReportSingleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnItemMovementReportSingleActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        TraReIssue.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonPreview;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonStartDate;
    private javax.swing.JPanel PanelReports;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cmbAutoID;
    private javax.swing.JComboBox cmbBranch;
    private javax.swing.JComboBox cmbItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnAutoID;
    private javax.swing.JRadioButton rBtnBranch;
    private javax.swing.JRadioButton rBtnDateRangeDetailReportAll;
    private javax.swing.JRadioButton rBtnDateRangeSummeryReportAll;
    private javax.swing.JRadioButton rBtnDateRangeSummeryReportBranch;
    private javax.swing.JRadioButton rBtnDisposal;
    private javax.swing.JRadioButton rBtnIDWiseSingleReport;
    private javax.swing.JRadioButton rBtnItem;
    private javax.swing.JRadioButton rBtnItemMovementReportSingle;
    private javax.swing.JRadioButton rBtnItemsMovementReportAll;
    private javax.swing.JRadioButton rBtnMainCategoryWiseDateRangeDetailReportBranch;
    private javax.swing.JRadioButton rBtnTransfer;
    // End of variables declaration//GEN-END:variables
}
