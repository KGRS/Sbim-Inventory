/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainCategory.java
 *
 * Created on Apr 5, 2013, 2:45:44 PM
 */
package reports;

import static MainFiles.IndexPage.transactionsComparison;
import db.ConnectSql;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class TransactionsComparison extends javax.swing.JInternalFrame {

    /**
     * First value of the any Combo Box. Represent the Value "--Select--"
     */
    private final String select = "--Select--";
    private final DefaultTableModel model_ItemSearchTable;
    private final String spliter = "--";
    private final DefaultTableModel model_TableBinTable;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form MainCategory
     */
    public TransactionsComparison() {
        initComponents();

        radioButtonItemCode.setSelected(true);
        model_ItemSearchTable = (DefaultTableModel) TableItemSearch.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        model_TableBinTable = (DefaultTableModel) tableTransactionComparision.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrup_yesNo = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        pnl_Base = new javax.swing.JPanel();
        panel1 = new javax.swing.JPanel();
        lbl_category = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        txtCategoryName = new javax.swing.JTextField();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        lbl_accountType = new javax.swing.JLabel();
        ButtonRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableItemSearch = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        CalendarStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        CalendarEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTransactionComparision = new javax.swing.JTable();
        ButtonView = new javax.swing.JButton();
        radioButtonItemCode = new javax.swing.JRadioButton();
        ButtonPreview = new javax.swing.JButton();
        radioButtonItemName = new javax.swing.JRadioButton();
        lbl_category1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        textNumberTransactions = new javax.swing.JTextField();
        comboBoxFilter = new javax.swing.JComboBox();
        lbl_subAccount3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setIconifiable(true);
        setTitle("Transactions Comparison");
        setPreferredSize(new java.awt.Dimension(1097, 623));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setMinimumSize(new java.awt.Dimension(1070, 563));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_category.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category.setText("Order all transactions by");
        panel1.add(lbl_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 60, 150, 20));

        txtCode.setText("All");
        panel1.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 20, 150, 20));

        txtCategoryName.setText("All");
        panel1.add(txtCategoryName, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, 180, 20));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Start date");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 140, 70, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Filter transaction by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 540, 80, -1));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("End date");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 170, 60, 20));

        ButtonRefresh.setText("Refresh");
        ButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRefreshActionPerformed(evt);
            }
        });
        panel1.add(ButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 540, 80, -1));

        TableItemSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableItemSearch.getTableHeader().setReorderingAllowed(false);
        TableItemSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableItemSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableItemSearch);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 580, 130));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 250, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 212, 1040, 10));

        CalendarStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarStartDateActionPerformed(evt);
            }
        });
        CalendarStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 140, 150, -1));

        CalendarEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarEndDateActionPerformed(evt);
            }
        });
        CalendarEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 170, 150, -1));

        tableTransactionComparision.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item code", "Item name", "Pur. unit", "Recived qty (+)", "Issued qty (-)", "Edit qty (+ or -)", "Balance qty", "Variance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTransactionComparision.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableTransactionComparision);
        if (tableTransactionComparision.getColumnModel().getColumnCount() > 0) {
            tableTransactionComparision.getColumnModel().getColumn(0).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(0).setPreferredWidth(110);
            tableTransactionComparision.getColumnModel().getColumn(1).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(1).setPreferredWidth(230);
            tableTransactionComparision.getColumnModel().getColumn(2).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(2).setPreferredWidth(30);
            tableTransactionComparision.getColumnModel().getColumn(3).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(4).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(5).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(6).setResizable(false);
            tableTransactionComparision.getColumnModel().getColumn(7).setResizable(false);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 1040, 280));

        ButtonView.setText("View");
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });
        panel1.add(ButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 170, 90, -1));

        radioButtonItemCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radioButtonItemCode);
        radioButtonItemCode.setForeground(new java.awt.Color(102, 102, 102));
        radioButtonItemCode.setText("Item code");
        radioButtonItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonItemCodeActionPerformed(evt);
            }
        });
        panel1.add(radioButtonItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 60, 100, -1));

        ButtonPreview.setText("Preview");
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 540, 80, -1));

        radioButtonItemName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radioButtonItemName);
        radioButtonItemName.setForeground(new java.awt.Color(102, 102, 102));
        radioButtonItemName.setText("Item name");
        radioButtonItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonItemNameActionPerformed(evt);
            }
        });
        panel1.add(radioButtonItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 90, 100, -1));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("Item");
        panel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, 60, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_subAccount2.setText("Balance qty - ((Recived qty + Edit qty) - Issued qty) = Variance");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 540, 330, 20));

        textNumberTransactions.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textNumberTransactions.setEnabled(false);
        panel1.add(textNumberTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 540, 70, -1));

        comboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Main category code", "Main category name", "Sub category code", "Sub category name" }));
        comboBoxFilter.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxFilterPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboBoxFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 210, -1));

        lbl_subAccount3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount3.setText("Number of transactions");
        panel1.add(lbl_subAccount3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 130, 20));

        javax.swing.GroupLayout pnl_BaseLayout = new javax.swing.GroupLayout(pnl_Base);
        pnl_Base.setLayout(pnl_BaseLayout);
        pnl_BaseLayout.setHorizontalGroup(
            pnl_BaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_BaseLayout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnl_BaseLayout.setVerticalGroup(
            pnl_BaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1097, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnl_Base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnl_Base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Refresh() {
        RefreshSearchTable();
        RefreshBinCardTable();
        txtSearch.setText("");
        txtCode.setText("All");
        txtCategoryName.setText("All");
        CalendarStartDate.setText("");
        CalendarEndDate.setText("");
        txtSearch.requestFocus();
        textNumberTransactions.setText("");
        radioButtonItemCode.setSelected(true);
        comboBoxFilter.setSelectedIndex(0);
    }

    private void RefreshSearchTable() {
        try {
            int row = model_ItemSearchTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ItemSearchTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshBinCardTable() {
        try {
            int row = model_TableBinTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableBinTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        exit();
    }
}//GEN-LAST:event_btnExitKeyPressed

private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    exit();
}//GEN-LAST:event_btnExitActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void TableItemSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableItemSearchMouseClicked
        String Code, Name;

        Code = TableItemSearch.getValueAt(TableItemSearch.getSelectedRow(), 0).toString();
        Name = TableItemSearch.getValueAt(TableItemSearch.getSelectedRow(), 1).toString();

        txtCode.setText(Code);
        txtCategoryName.setText(Name);

    }//GEN-LAST:event_TableItemSearchMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        if (comboSelected.equals("Main category code")) {
            SearchMainCategoryByCode(txtSearch.getText());
        } else if (comboSelected.equals("Main category name")) {
            SearchMainCategoryByName(txtSearch.getText());
        } else if (comboSelected.equals("Sub category code")) {
            SearchSubCategoryByCode(txtSearch.getText());
        } else if (comboSelected.equals("Sub category name")) {
            SearchSubCategoryByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchMainCategoryByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!CategoryCode.equals("")) {
                query = "SELECT * FROM MainCategory WHERE MainCategoryCode LIKE '%" + CategoryCode + "%'";
            } else {
                query = "SELECT * FROM MainCategory  WHERE MainCategoryCode LIKE '%" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemSearchTable.addRow(new Object[model_ItemSearchTable.getColumnCount()]);
                TableItemSearch.setValueAt(reset.getString("MainCategoryCode"), rowCount, 0);
                TableItemSearch.setValueAt(reset.getString("MainCategoryName"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchMainCategoryByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!CategoryName.equals("")) {
                query = "SELECT * FROM MainCategory WHERE MainCategoryName LIKE '%" + CategoryName + "%'";
            } else {
                query = "SELECT * FROM MainCategory  WHERE MainCategoryName LIKE '%" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemSearchTable.addRow(new Object[model_ItemSearchTable.getColumnCount()]);
                TableItemSearch.setValueAt(reset.getString("MainCategoryCode"), rowCount, 0);
                TableItemSearch.setValueAt(reset.getString("MainCategoryName"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchSubCategoryByCode(String subCategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!subCategoryCode.equals("")) {
                query = "SELECT * FROM SubCategory WHERE SubCategoryCode LIKE '%" + subCategoryCode + "%'";
            } else {
                query = "SELECT * FROM SubCategory  WHERE SubCategoryCode LIKE '%" + subCategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_ItemSearchTable.addRow(new Object[model_ItemSearchTable.getColumnCount()]);
                TableItemSearch.setValueAt(reset.getString("SubCategoryCode"), rowCount, 0);
                TableItemSearch.setValueAt(reset.getString("SubCategoryName"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchSubCategoryByName(String subCategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!subCategoryName.equals("")) {
                query = "SELECT * FROM SubCategory WHERE SubCategoryName LIKE '%" + subCategoryName + "%'";
            } else {
                query = "SELECT * FROM SubCategory  WHERE SubCategoryName LIKE '%" + subCategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_ItemSearchTable.addRow(new Object[model_ItemSearchTable.getColumnCount()]);
                TableItemSearch.setValueAt(reset.getString("SubCategoryCode"), rowCount, 0);
                TableItemSearch.setValueAt(reset.getString("SubCategoryName"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void CalendarStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarStartDateActionPerformed
        if (!CalendarStartDate.getText().isEmpty()) {
            CalendarEndDate.requestFocus();
        }
    }//GEN-LAST:event_CalendarStartDateActionPerformed

    private void CalendarEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarEndDateActionPerformed
        if (!CalendarEndDate.getText().isEmpty()) {
            ButtonView.requestFocus();
        }
    }//GEN-LAST:event_CalendarEndDateActionPerformed

    private void CalendarStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date StartDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarStartDate.setText(format.format(StartDate));
        }
    }//GEN-LAST:event_CalendarStartDatePropertyChange

    private void CalendarEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date EndDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarEndDate.setText(format.format(EndDate));
        }
    }//GEN-LAST:event_CalendarEndDatePropertyChange

    private void radioButtonItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonItemCodeActionPerformed
        RefreshBinCardTable();
    }//GEN-LAST:event_radioButtonItemCodeActionPerformed

    private void radioButtonItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonItemNameActionPerformed
        RefreshBinCardTable();
    }//GEN-LAST:event_radioButtonItemNameActionPerformed

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        String selectedCode = txtCode.getText();
        if (selectedCode.equals("")) {
            JOptionPane.showMessageDialog(this, "Please select All at the filter drop down menu or select a code at the table.", "Not selected", JOptionPane.OK_OPTION);
        } else if (!selectedCode.equals("")) {
            if (comboSelected.equals("All")) {
                if (radioButtonItemCode.isSelected()) {
                    listOrderByItemCodeForAll();
                } else if (radioButtonItemName.isSelected()) {
                    listOrderByItemNameForAll();
                }
            } else if (comboSelected.equals("Main category code") || comboSelected.equals("Main category name")) {
                if (radioButtonItemCode.isSelected()) {
                    listOrderByItemCodeForMainCategoryCode();
                } else if (radioButtonItemName.isSelected()) {
                    listOrderByItemCodeForMainCategoryName();
                }
            } else if (comboSelected.equals("Sub category code") || comboSelected.equals("Sub category name")) {
                if (radioButtonItemCode.isSelected()) {
                    listOrderByItemCodeForSubCategory();
                } else if (radioButtonItemName.isSelected()) {
                    listOrderByItemNameForSubCategory();
                }
            }
        }
    }//GEN-LAST:event_ButtonViewActionPerformed

    private void listOrderByItemCodeForAll() {
        RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        int rowCount = 0;
        float variance, totalRecivedQuantity, totalIssuedQuantity, totalEditQuantity, balanceQty;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT \"BinCard\".\"ItemCode\",\n"
                    + "	\"Items\".\"ItemName\",\n"
                    + "	\"Items\".\"Quantity\",\n"
                    + "	\"Items\".\"UnitPurchase\",\n"
                    + "	SUM(\"BinCard\".\"EditQuantity\") AS TotalEditQuantity,\n"
                    + "	SUM(\"BinCard\".\"IssuedQuantity\") AS TotalIssuedQuantity,\n"
                    + "    SUM(\"BinCard\".\"RecivedQuantity\") AS TotalRecivedQuantity,\n"
                    + "	\"Items\".\"ItemCode\"\n"
                    + "FROM \"Items\"\n"
                    + "	INNER JOIN \"BinCard\" ON \n"
                    + "	 \"BinCard\".\"ItemCode\" = \"Items\".\"ItemCode\"\n"
                    + "WHERE (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "')\n"
                    + "GROUP by \"BinCard\".\"ItemCode\", \"Items\".\"ItemName\",\"Items\".\"UnitPurchase\",\"Items\".\"Quantity\",\"Items\".\"ItemCode\"\n"
                    + "ORDER BY \"BinCard\".\"ItemCode\"";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                tableTransactionComparision.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableTransactionComparision.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableTransactionComparision.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableTransactionComparision.setValueAt(reset.getFloat("TotalRecivedQuantity"), rowCount, 3);
                totalRecivedQuantity = reset.getFloat("TotalRecivedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalIssuedQuantity"), rowCount, 4);
                totalIssuedQuantity = reset.getFloat("TotalIssuedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalEditQuantity"), rowCount, 5);
                totalEditQuantity = reset.getFloat("TotalEditQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("Quantity"), rowCount, 6);
                balanceQty = reset.getFloat("Quantity");
                variance = balanceQty - ((totalRecivedQuantity + totalEditQuantity) - totalIssuedQuantity);
                tableTransactionComparision.setValueAt(variance, rowCount, 7);

                rowCount++;
            }
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByItemNameForAll() {
        RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        int rowCount = 0;
        float variance, totalRecivedQuantity, totalIssuedQuantity, totalEditQuantity, balanceQty;

        try {

            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT \"BinCard\".\"ItemCode\",\n"
                    + "	\"Items\".\"ItemName\",\n"
                    + "	\"Items\".\"Quantity\",\n"
                    + "	\"Items\".\"UnitPurchase\",\n"
                    + "	SUM(\"BinCard\".\"EditQuantity\") AS TotalEditQuantity,\n"
                    + "	SUM(\"BinCard\".\"IssuedQuantity\") AS TotalIssuedQuantity,\n"
                    + "    SUM(\"BinCard\".\"RecivedQuantity\") AS TotalRecivedQuantity,\n"
                    + "	\"Items\".\"ItemCode\"\n"
                    + "FROM \"Items\"\n"
                    + "	INNER JOIN \"BinCard\" ON \n"
                    + "	 \"BinCard\".\"ItemCode\" = \"Items\".\"ItemCode\"\n"
                    + "WHERE (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "')\n"
                    + "GROUP by \"BinCard\".\"ItemCode\", \"Items\".\"ItemName\",\"Items\".\"UnitPurchase\",\"Items\".\"Quantity\",\"Items\".\"ItemCode\"\n"
                    + "ORDER BY \"Items\".\"ItemName\"";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                tableTransactionComparision.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableTransactionComparision.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableTransactionComparision.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableTransactionComparision.setValueAt(reset.getFloat("TotalRecivedQuantity"), rowCount, 3);
                totalRecivedQuantity = reset.getFloat("TotalRecivedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalIssuedQuantity"), rowCount, 4);
                totalIssuedQuantity = reset.getFloat("TotalIssuedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalEditQuantity"), rowCount, 5);
                totalEditQuantity = reset.getFloat("TotalEditQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("Quantity"), rowCount, 6);
                balanceQty = reset.getFloat("Quantity");
                variance = balanceQty - ((totalRecivedQuantity + totalEditQuantity) - totalIssuedQuantity);
                tableTransactionComparision.setValueAt(variance, rowCount, 7);
                rowCount++;
            }
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByItemCodeForMainCategoryCode() {
        RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        String selectedCode = txtCode.getText();
        int rowCount = 0;
        float variance, totalRecivedQuantity, totalIssuedQuantity, totalEditQuantity, balanceQty;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT \"BinCard\".\"ItemCode\",\n"
                    + "	\"Items\".\"ItemName\",\n"
                    + "	\"Items\".\"Quantity\",\n"
                    + "	\"Items\".\"UnitPurchase\",\n"
                    + "	\"Items\".\"MainCategoryCode\",\n"
                    + "	SUM(\"BinCard\".\"EditQuantity\") AS TotalEditQuantity,\n"
                    + "	SUM(\"BinCard\".\"IssuedQuantity\") AS TotalIssuedQuantity,\n"
                    + "    SUM(\"BinCard\".\"RecivedQuantity\") AS TotalRecivedQuantity,\n"
                    + "	\"Items\".\"ItemCode\"\n"
                    + "FROM \"Items\"\n"
                    + "	INNER JOIN \"BinCard\" ON \n"
                    + "	 \"BinCard\".\"ItemCode\" = \"Items\".\"ItemCode\"\n"
                    + "WHERE (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "') AND \"Items\".\"MainCategoryCode\"= '" + selectedCode + "'\n"
                    + "GROUP by \"BinCard\".\"ItemCode\", \"Items\".\"ItemName\",\"Items\".\"UnitPurchase\",\"Items\".\"Quantity\",\"Items\".\"ItemCode\",\"Items\".\"MainCategoryCode\"\n"
                    + "ORDER BY \"BinCard\".\"ItemCode\"";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                tableTransactionComparision.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableTransactionComparision.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableTransactionComparision.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableTransactionComparision.setValueAt(reset.getFloat("TotalRecivedQuantity"), rowCount, 3);
                totalRecivedQuantity = reset.getFloat("TotalRecivedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalIssuedQuantity"), rowCount, 4);
                totalIssuedQuantity = reset.getFloat("TotalIssuedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalEditQuantity"), rowCount, 5);
                totalEditQuantity = reset.getFloat("TotalEditQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("Quantity"), rowCount, 6);
                balanceQty = reset.getFloat("Quantity");
                variance = balanceQty - ((totalRecivedQuantity + totalEditQuantity) - totalIssuedQuantity);
                tableTransactionComparision.setValueAt(variance, rowCount, 7);
                rowCount++;
            }
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByItemCodeForMainCategoryName() {
        RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        String selectedCode = txtCode.getText();
        int rowCount = 0;
        float variance, totalRecivedQuantity, totalIssuedQuantity, totalEditQuantity, balanceQty;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT \"BinCard\".\"ItemCode\",\n"
                    + "	\"Items\".\"ItemName\",\n"
                    + "	\"Items\".\"Quantity\",\n"
                    + "	\"Items\".\"UnitPurchase\",\n"
                    + "	\"Items\".\"MainCategoryCode\",\n"
                    + "	SUM(\"BinCard\".\"EditQuantity\") AS TotalEditQuantity,\n"
                    + "	SUM(\"BinCard\".\"IssuedQuantity\") AS TotalIssuedQuantity,\n"
                    + "    SUM(\"BinCard\".\"RecivedQuantity\") AS TotalRecivedQuantity,\n"
                    + "	\"Items\".\"ItemCode\"\n"
                    + "FROM \"Items\"\n"
                    + "	INNER JOIN \"BinCard\" ON \n"
                    + "	 \"BinCard\".\"ItemCode\" = \"Items\".\"ItemCode\"\n"
                    + "WHERE (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "') AND \"Items\".\"MainCategoryCode\"= '" + selectedCode + "'\n"
                    + "GROUP by \"BinCard\".\"ItemCode\", \"Items\".\"ItemName\",\"Items\".\"UnitPurchase\",\"Items\".\"Quantity\",\"Items\".\"ItemCode\",\"Items\".\"MainCategoryCode\"\n"
                    + "ORDER BY \"Items\".\"ItemName\"";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                tableTransactionComparision.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableTransactionComparision.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableTransactionComparision.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableTransactionComparision.setValueAt(reset.getFloat("TotalRecivedQuantity"), rowCount, 3);
                totalRecivedQuantity = reset.getFloat("TotalRecivedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalIssuedQuantity"), rowCount, 4);
                totalIssuedQuantity = reset.getFloat("TotalIssuedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalEditQuantity"), rowCount, 5);
                totalEditQuantity = reset.getFloat("TotalEditQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("Quantity"), rowCount, 6);
                balanceQty = reset.getFloat("Quantity");
                variance = balanceQty - ((totalRecivedQuantity + totalEditQuantity) - totalIssuedQuantity);
                tableTransactionComparision.setValueAt(variance, rowCount, 7);
                rowCount++;
            }
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByItemCodeForSubCategory() {
        RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        String selectedCode = txtCode.getText();
        int rowCount = 0;
        float variance, totalRecivedQuantity, totalIssuedQuantity, totalEditQuantity, balanceQty;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT \"BinCard\".\"ItemCode\",\n"
                    + "	\"Items\".\"ItemName\",\n"
                    + "	\"Items\".\"Quantity\",\n"
                    + "	\"Items\".\"UnitPurchase\",\n"
                    + "	\"Items\".\"SubCategoryCode\",\n"
                    + "	SUM(\"BinCard\".\"EditQuantity\") AS TotalEditQuantity,\n"
                    + "	SUM(\"BinCard\".\"IssuedQuantity\") AS TotalIssuedQuantity,\n"
                    + "    SUM(\"BinCard\".\"RecivedQuantity\") AS TotalRecivedQuantity,\n"
                    + "	\"Items\".\"ItemCode\"\n"
                    + "FROM \"Items\"\n"
                    + "	INNER JOIN \"BinCard\" ON \n"
                    + "	 \"BinCard\".\"ItemCode\" = \"Items\".\"ItemCode\"\n"
                    + "WHERE (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "') AND \"Items\".\"SubCategoryCode\"= '" + selectedCode + "'\n"
                    + "GROUP by \"BinCard\".\"ItemCode\", \"Items\".\"ItemName\",\"Items\".\"UnitPurchase\",\"Items\".\"Quantity\",\"Items\".\"ItemCode\",\"Items\".\"SubCategoryCode\"\n"
                    + "ORDER BY \"BinCard\".\"ItemCode\"";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                tableTransactionComparision.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableTransactionComparision.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableTransactionComparision.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableTransactionComparision.setValueAt(reset.getFloat("TotalRecivedQuantity"), rowCount, 3);
                totalRecivedQuantity = reset.getFloat("TotalRecivedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalIssuedQuantity"), rowCount, 4);
                totalIssuedQuantity = reset.getFloat("TotalIssuedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalEditQuantity"), rowCount, 5);
                totalEditQuantity = reset.getFloat("TotalEditQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("Quantity"), rowCount, 6);
                balanceQty = reset.getFloat("Quantity");
                variance = balanceQty - ((totalRecivedQuantity + totalEditQuantity) - totalIssuedQuantity);
                tableTransactionComparision.setValueAt(variance, rowCount, 7);
                rowCount++;
            }
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByItemNameForSubCategory() {
        RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        String selectedCode = txtCode.getText();
        int rowCount = 0;
        float variance, totalRecivedQuantity, totalIssuedQuantity, totalEditQuantity, balanceQty;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT \"BinCard\".\"ItemCode\",\n"
                    + "	\"Items\".\"ItemName\",\n"
                    + "	\"Items\".\"Quantity\",\n"
                    + "	\"Items\".\"UnitPurchase\",\n"
                    + "	\"Items\".\"SubCategoryCode\",\n"
                    + "	SUM(\"BinCard\".\"EditQuantity\") AS TotalEditQuantity,\n"
                    + "	SUM(\"BinCard\".\"IssuedQuantity\") AS TotalIssuedQuantity,\n"
                    + "    SUM(\"BinCard\".\"RecivedQuantity\") AS TotalRecivedQuantity,\n"
                    + "	\"Items\".\"ItemCode\"\n"
                    + "FROM \"Items\"\n"
                    + "	INNER JOIN \"BinCard\" ON \n"
                    + "	 \"BinCard\".\"ItemCode\" = \"Items\".\"ItemCode\"\n"
                    + "WHERE (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "') AND \"Items\".\"SubCategoryCode\"= '" + selectedCode + "'\n"
                    + "GROUP by \"BinCard\".\"ItemCode\", \"Items\".\"ItemName\",\"Items\".\"UnitPurchase\",\"Items\".\"Quantity\",\"Items\".\"ItemCode\",\"Items\".\"SubCategoryCode\"\n"
                    + "ORDER BY \"Items\".\"ItemName\"";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                tableTransactionComparision.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableTransactionComparision.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableTransactionComparision.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableTransactionComparision.setValueAt(reset.getFloat("TotalRecivedQuantity"), rowCount, 3);
                totalRecivedQuantity = reset.getFloat("TotalRecivedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalIssuedQuantity"), rowCount, 4);
                totalIssuedQuantity = reset.getFloat("TotalIssuedQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("TotalEditQuantity"), rowCount, 5);
                totalEditQuantity = reset.getFloat("TotalEditQuantity");
                tableTransactionComparision.setValueAt(reset.getFloat("Quantity"), rowCount, 6);
                balanceQty = reset.getFloat("Quantity");
                variance = balanceQty - ((totalRecivedQuantity + totalEditQuantity) - totalIssuedQuantity);
                tableTransactionComparision.setValueAt(variance, rowCount, 7);
                rowCount++;
            }
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void ButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_ButtonRefreshActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        transactionsComparison.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void comboBoxFilterPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxFilterPopupMenuWillBecomeInvisible
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        if (comboSelected.equals("All")) {
            RefreshForComboAtAll();
        } else if (comboSelected.equals("Main category code")) {
            RefreshForComboAtOthers();
        } else if (comboSelected.equals("Main category name")) {
            RefreshForComboAtOthers();
        } else if (comboSelected.equals("Sub category code")) {
            RefreshForComboAtOthers();
        } else if (comboSelected.equals("Sub category name")) {
            RefreshForComboAtOthers();
        }

    }//GEN-LAST:event_comboBoxFilterPopupMenuWillBecomeInvisible

    private void RefreshForComboAtAll() {
        RefreshSearchTable();
        RefreshBinCardTable();
        txtSearch.setText("");
        txtCode.setText("All");
        txtCategoryName.setText("All");
        txtSearch.requestFocus();
        textNumberTransactions.setText("");
    }

    private void RefreshForComboAtOthers() {
        RefreshSearchTable();
        RefreshBinCardTable();
        txtSearch.setText("");
        txtCode.setText("");
        txtCategoryName.setText("");
        txtSearch.requestFocus();
        textNumberTransactions.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JButton ButtonRefresh;
    private javax.swing.JButton ButtonView;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarStartDate;
    private javax.swing.JTable TableItemSearch;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrup_yesNo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboBoxFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_category;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JLabel lbl_subAccount3;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel pnl_Base;
    private javax.swing.JRadioButton radioButtonItemCode;
    private javax.swing.JRadioButton radioButtonItemName;
    private javax.swing.JTable tableTransactionComparision;
    private javax.swing.JTextField textNumberTransactions;
    private javax.swing.JTextField txtCategoryName;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void exit() {
        if (transactionsComparison != null) {
            transactionsComparison = null;
        }
        this.dispose();
    }
}
