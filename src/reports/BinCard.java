/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


package reports;

import MainFiles.*;
import static MainFiles.IndexPage.Bin;
import db.ConnectSql;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;


public class BinCard extends javax.swing.JInternalFrame {

    /**
     * First value of the any Combo Box. Represent the Value "--Select--"
     */
    private final String select = "--Select--";
    private final DefaultTableModel model_ItemSearchTable;
    private final String spliter = "--";
    private final DefaultTableModel model_TableBinTable;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form MainCategory
     */
    public BinCard() {
        initComponents();

        btnGrup_yesNo.add(rBtnCode);
        btnGrup_yesNo.add(rBtnName);
        rBtnCode.setSelected(true);
        
        RadioButtonInvoice.setVisible(false);
        RadioButtonTransfer.setVisible(false);
        RadioButtonDisposal.setVisible(false);
        RadioButtonRefund.setVisible(false);
        RadioButtonStockEdit.setVisible(false);
        model_ItemSearchTable = (DefaultTableModel) TableItemSearch.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        model_TableBinTable = (DefaultTableModel) TableBinCard.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrup_yesNo = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        pnl_Base = new javax.swing.JPanel();
        panel1 = new javax.swing.JPanel();
        lbl_category = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        txtCategoryName = new javax.swing.JTextField();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        lbl_accountType = new javax.swing.JLabel();
        ButtonRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableItemSearch = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        CalendarStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        CalendarEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableBinCard = new javax.swing.JTable();
        ButtonView = new javax.swing.JButton();
        RadioButtonStockEdit = new javax.swing.JRadioButton();
        ButtonPreview = new javax.swing.JButton();
        RadioButtonRefund = new javax.swing.JRadioButton();
        RadioButtonInvoice = new javax.swing.JRadioButton();
        ButtonPreviewSelected = new javax.swing.JButton();
        RadioButtonTransfer = new javax.swing.JRadioButton();
        RadioButtonDisposal = new javax.swing.JRadioButton();
        RadioButtonReturn = new javax.swing.JRadioButton();
        RadioButtonGRN = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setIconifiable(true);
        setTitle("BinCard (Item wise)");
        setPreferredSize(new java.awt.Dimension(1097, 623));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setMinimumSize(new java.awt.Dimension(1070, 563));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_category.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category.setText("Item");
        panel1.add(lbl_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 60, 20));
        panel1.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 60, 150, 20));
        panel1.add(txtCategoryName, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 60, 180, 20));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Start date");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 110, 70, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search item by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 540, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        btnGrup_yesNo.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        btnGrup_yesNo.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 60, -1));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("End date");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 140, 60, 20));

        ButtonRefresh.setText("Refresh");
        ButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRefreshActionPerformed(evt);
            }
        });
        panel1.add(ButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 540, 80, -1));

        TableItemSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableItemSearch.getTableHeader().setReorderingAllowed(false);
        TableItemSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableItemSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableItemSearch);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 580, 130));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 300, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 212, 1040, 10));

        CalendarStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarStartDateActionPerformed(evt);
            }
        });
        CalendarStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 110, 150, -1));

        CalendarEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarEndDateActionPerformed(evt);
            }
        });
        CalendarEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 140, 150, -1));

        TableBinCard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Other notes", "Recived ID", "Recived from", "Recived qty", "Issued ID", "Issued to", "Issued qty", "Stock Edit ID", "Edit qty", "Balance qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableBinCard.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TableBinCard);
        if (TableBinCard.getColumnModel().getColumnCount() > 0) {
            TableBinCard.getColumnModel().getColumn(0).setResizable(false);
            TableBinCard.getColumnModel().getColumn(1).setResizable(false);
            TableBinCard.getColumnModel().getColumn(2).setResizable(false);
            TableBinCard.getColumnModel().getColumn(3).setResizable(false);
            TableBinCard.getColumnModel().getColumn(4).setResizable(false);
            TableBinCard.getColumnModel().getColumn(5).setResizable(false);
            TableBinCard.getColumnModel().getColumn(6).setResizable(false);
            TableBinCard.getColumnModel().getColumn(7).setResizable(false);
            TableBinCard.getColumnModel().getColumn(8).setResizable(false);
            TableBinCard.getColumnModel().getColumn(9).setResizable(false);
            TableBinCard.getColumnModel().getColumn(10).setResizable(false);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 1040, 280));

        ButtonView.setText("View");
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });
        panel1.add(ButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 140, 90, -1));

        RadioButtonStockEdit.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonStockEdit);
        RadioButtonStockEdit.setText("Stock edit");
        RadioButtonStockEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonStockEditActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonStockEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 540, -1, -1));

        ButtonPreview.setText("Preview");
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 540, 80, -1));

        RadioButtonRefund.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonRefund);
        RadioButtonRefund.setText("Refund");
        RadioButtonRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonRefundActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonRefund, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 540, 90, -1));

        RadioButtonInvoice.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonInvoice);
        RadioButtonInvoice.setText("Invoice");
        RadioButtonInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonInvoiceActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonInvoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 540, -1, -1));

        ButtonPreviewSelected.setText("Preview selected");
        ButtonPreviewSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreviewSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 120, -1));

        RadioButtonTransfer.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonTransfer);
        RadioButtonTransfer.setText("Transfer");
        RadioButtonTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonTransferActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonTransfer, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 540, -1, -1));

        RadioButtonDisposal.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonDisposal);
        RadioButtonDisposal.setText("Disposal");
        RadioButtonDisposal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonDisposalActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonDisposal, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 540, -1, -1));

        RadioButtonReturn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonReturn);
        RadioButtonReturn.setText("Return");
        RadioButtonReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonReturnActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 540, -1, -1));

        RadioButtonGRN.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RadioButtonGRN);
        RadioButtonGRN.setText("GRN");
        RadioButtonGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonGRNActionPerformed(evt);
            }
        });
        panel1.add(RadioButtonGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 540, 60, -1));

        javax.swing.GroupLayout pnl_BaseLayout = new javax.swing.GroupLayout(pnl_Base);
        pnl_Base.setLayout(pnl_BaseLayout);
        pnl_BaseLayout.setHorizontalGroup(
            pnl_BaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_BaseLayout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnl_BaseLayout.setVerticalGroup(
            pnl_BaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1097, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnl_Base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnl_Base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Refresh() {
        RefreshItemTable();
        RefreshBinCardTable();
        txtSearch.setText("");
        txtCode.setText("");
        txtCategoryName.setText("");
        CalendarStartDate.setText("");
        CalendarEndDate.setText("");
        txtSearch.requestFocus();
    }

    private void RefreshItemTable() {
        try {
            int row = model_ItemSearchTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ItemSearchTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshBinCardTable() {
        try {
            int row = model_TableBinTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableBinTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        exit();
    }
}//GEN-LAST:event_btnExitKeyPressed

private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    exit();
}//GEN-LAST:event_btnExitActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed

    }//GEN-LAST:event_rBtnNameKeyPressed

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void TableItemSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableItemSearchMouseClicked
        String Code, Name;

        Code = TableItemSearch.getValueAt(TableItemSearch.getSelectedRow(), 0).toString();
        Name = TableItemSearch.getValueAt(TableItemSearch.getSelectedRow(), 1).toString();

        txtCode.setText(Code);
        txtCategoryName.setText(Name);

    }//GEN-LAST:event_TableItemSearchMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchCategoryByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchCategoryByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void CalendarStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarStartDateActionPerformed
        if (!CalendarStartDate.getText().isEmpty()) {
            CalendarEndDate.requestFocus();
        }
    }//GEN-LAST:event_CalendarStartDateActionPerformed

    private void CalendarEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarEndDateActionPerformed
        if (!CalendarEndDate.getText().isEmpty()) {
            ButtonView.requestFocus();
        }
    }//GEN-LAST:event_CalendarEndDateActionPerformed

    private void CalendarStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date StartDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarStartDate.setText(format.format(StartDate));
        }
    }//GEN-LAST:event_CalendarStartDatePropertyChange

    private void CalendarEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date EndDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarEndDate.setText(format.format(EndDate));
        }
    }//GEN-LAST:event_CalendarEndDatePropertyChange

    private void RadioButtonStockEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonStockEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonStockEditActionPerformed

    private void RadioButtonInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonInvoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonInvoiceActionPerformed

    private void RadioButtonRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonRefundActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonRefundActionPerformed

    private void RadioButtonTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonTransferActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonTransferActionPerformed

    private void RadioButtonDisposalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonDisposalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonDisposalActionPerformed

    private void RadioButtonReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonReturnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonReturnActionPerformed

    private void RadioButtonGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonGRNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonGRNActionPerformed

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
         RefreshBinCardTable();
        String StartDate = CalendarStartDate.getText();
        String EndDate = CalendarEndDate.getText();
        String ItemCode = txtCode.getText();
        int rowCount = 0;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT [ItemCode]\n"
                    + "      ,[Date]\n"
                    + "      ,[Time]\n"
                    + "      ,[OtherNotes]\n"
                    + "      ,[RecivedID]\n"
                    + "      ,[RecivedFrom]\n"
                    + "      ,[RecivedQuantity]\n"
                    + "      ,[IssuedID]\n"
                    + "      ,[IssuedTo]\n"
                    + "      ,[IssuedQuantity]\n"
                    + "      ,[StockEditID]\n"
                    + "      ,[EditQuantity]\n"
                    + "      ,[BalanceQty]\n"
                    + "  FROM [BinCard] where ItemCode = '" + ItemCode + "' AND (Date >= '" + StartDate + "' AND Date <= '" + EndDate + "') order by Date, Time";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableBinTable.addRow(new Object[model_TableBinTable.getColumnCount()]);
                TableBinCard.setValueAt(reset.getString("Date"), rowCount, 0);
                TableBinCard.setValueAt(reset.getString("OtherNotes"), rowCount, 1);
                TableBinCard.setValueAt(reset.getString("RecivedID"), rowCount, 2);
                TableBinCard.setValueAt(reset.getString("RecivedFrom"), rowCount, 3);
                TableBinCard.setValueAt(reset.getFloat("RecivedQuantity"), rowCount, 4);
                TableBinCard.setValueAt(reset.getString("IssuedID"), rowCount, 5);
                TableBinCard.setValueAt(reset.getString("IssuedTo"), rowCount, 6);
                TableBinCard.setValueAt(reset.getFloat("IssuedQuantity"), rowCount, 7);
                TableBinCard.setValueAt(reset.getString("StockEditID"), rowCount, 8);
                TableBinCard.setValueAt(reset.getFloat("EditQuantity"), rowCount, 9);
                TableBinCard.setValueAt(reset.getFloat("BalanceQty"), rowCount, 10);
                rowCount++;
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

    }//GEN-LAST:event_ButtonViewActionPerformed

    private void ButtonPreviewSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewSelectedActionPerformed
        int SelectedRowCount = TableBinCard.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            Map map = new HashMap();
            String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
            Connection sqlcon = ConnectSql.conn;
            if (RadioButtonGRN.isSelected()) {
                String GRNID = TableBinCard.getValueAt(TableBinCard.getSelectedRow(), 2).toString();
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("GRNID", GRNID);
                    map.put("Logo", PathToLogo);

                    String Report = "GRN ID wise single report.jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/GRN/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (RadioButtonRefund.isSelected()) {

            } else if (RadioButtonInvoice.isSelected()) {

            } else if (RadioButtonTransfer.isSelected()) {
                String ID = TableBinCard.getValueAt(TableBinCard.getSelectedRow(), 5).toString();
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("TransferID", ID);
                    map.put("Logo", PathToLogo);

                    String Report = "Transfer ID wise single report.jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Transfer/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (RadioButtonDisposal.isSelected()) {
                String ID = TableBinCard.getValueAt(TableBinCard.getSelectedRow(), 5).toString();
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("DisposalID", ID);
                    map.put("Logo", PathToLogo);

                    String Report = "Disposal ID wise single report.jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Disposal/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (RadioButtonReturn.isSelected()) {
                String ID = TableBinCard.getValueAt(TableBinCard.getSelectedRow(), 5).toString();
                try {
                    map.put("User", IndexPage.user.trim());
                    map.put("RETURNID", ID);
                    map.put("Logo", PathToLogo);

                    String Report = "Return ID wise single report.jrxml";
                    JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/Returns/" + Report);
                    JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                    JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                    JasperViewer.viewReport(jasperprint, false);
                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            }  else if (RadioButtonStockEdit.isSelected()) {
                String StockEditDate = TableBinCard.getValueAt(TableBinCard.getSelectedRow(), 0).toString();
                 try {
                        map.put("User", IndexPage.user.trim());
                        map.put("StockEditDate", StockEditDate);

                        String Report = "Item list stock edit.jrxml";
                        JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Stock Reports/All items/" + Report);
                        JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
                        JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
                        JasperViewer.viewReport(jasperprint, false);
                    } catch (JRException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
            }
        }
    }//GEN-LAST:event_ButtonPreviewSelectedActionPerformed

    private void ButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_ButtonRefreshActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        Bin.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void SearchCategoryByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshItemTable();

            if (!CategoryCode.equals("")) {
                query = "SELECT * FROM Items WHERE ItemCode LIKE '" + CategoryCode + "%'";
            } else {
                query = "SELECT * FROM Items  WHERE ItemCode LIKE '" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_ItemSearchTable.addRow(new Object[model_ItemSearchTable.getColumnCount()]);
                TableItemSearch.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItemSearch.setValueAt(reset.getString("ItemName"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchCategoryByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshItemTable();

            if (!CategoryName.equals("")) {
                query = "SELECT * FROM Items WHERE ItemName LIKE '%" + CategoryName + "%'";
            } else {
                query = "SELECT * FROM Items  WHERE ItemName LIKE '%" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_ItemSearchTable.addRow(new Object[model_ItemSearchTable.getColumnCount()]);
                TableItemSearch.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItemSearch.setValueAt(reset.getString("ItemName"), rowCount, 1);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JButton ButtonPreviewSelected;
    private javax.swing.JButton ButtonRefresh;
    private javax.swing.JButton ButtonView;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarStartDate;
    private javax.swing.JRadioButton RadioButtonDisposal;
    private javax.swing.JRadioButton RadioButtonGRN;
    private javax.swing.JRadioButton RadioButtonInvoice;
    private javax.swing.JRadioButton RadioButtonRefund;
    private javax.swing.JRadioButton RadioButtonReturn;
    private javax.swing.JRadioButton RadioButtonStockEdit;
    private javax.swing.JRadioButton RadioButtonTransfer;
    private javax.swing.JTable TableBinCard;
    private javax.swing.JTable TableItemSearch;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrup_yesNo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_category;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel pnl_Base;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTextField txtCategoryName;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void exit() {
        if (Bin != null) {
            Bin = null;
        }
        this.dispose();
    }
}
