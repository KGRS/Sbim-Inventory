/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GRNItemSearch.java
 *
 * Created on Mar 15, 2013, 8:07:57 AM
 */
package SearchDialogs;

import Transactions.GRN;
import db.ConnectSql;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class GRNItemSearch extends javax.swing.JDialog {

    private final GRN object_GRN;
    private final DefaultTableModel model_ItemTable;
    private final DefaultTableModel model_GRNTable;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form GRNItemSearch
     * @param parent
     * @param modal
     * @param obj
     */
    public GRNItemSearch(Transactions.GRN parent, boolean modal, Object obj) {
        super();
        this.object_GRN = parent;
        initComponents();
        model_ItemTable = (DefaultTableModel) TableItem.getModel();
        model_GRNTable = (DefaultTableModel) GRN.TableGRN.getModel();
        LoadItems();
        rBtnCode.setSelected(true);
        txtSearch.requestFocus();
        
        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/DialogForms/search.png");
        labelIcon.setIcon(DefaultBackGround);

//        this.setTitle("Item search for GRN");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnAddToGRN = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableItem = new javax.swing.JTable();
        TextQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        ButtonExit = new javax.swing.JButton();
        labelIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Item search for GRN");
        setAlwaysOnTop(true);
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAddToGRN.setMnemonic('s');
        btnAddToGRN.setText("Add to GRN");
        btnAddToGRN.setActionCommand("Delete");
        btnAddToGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToGRNActionPerformed(evt);
            }
        });
        panel1.add(btnAddToGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 20, 100, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search item by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 100, 20));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 60, -1));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 210, -1));

        TableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Current Qunatity", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableItem.getTableHeader().setReorderingAllowed(false);
        TableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableItemMouseClicked(evt);
            }
        });
        TableItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableItemKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(TableItem);
        if (TableItem.getColumnModel().getColumnCount() > 0) {
            TableItem.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 60, 1050, 260));

        TextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        TextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextQuantity.setText("0.000");
        TextQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextQuantityFocusGained(evt);
            }
        });
        TextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextQuantityKeyPressed(evt);
            }
        });
        panel1.add(TextQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 110, -1));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextAmountFocusGained(evt);
            }
        });
        TextAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAmountKeyPressed(evt);
            }
        });
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, 110, -1));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextPurchasePriceFocusGained(evt);
            }
        });
        TextPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPurchasePriceKeyPressed(evt);
            }
        });
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 110, -1));

        ButtonExit.setText("Exit");
        ButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitActionPerformed(evt);
            }
        });
        ButtonExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonExitKeyPressed(evt);
            }
        });
        panel1.add(ButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(963, 330, 100, -1));
        panel1.add(labelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 640, 110));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadItems() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND (Type = 'Stock' OR Type = 'Both') ORDER BY ItemCode";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableItem.setValueAt(reset.getString("SupplierCode"), rowCount, 5);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnAddToGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToGRNActionPerformed
        int SelectedRowCount = TableItem.getSelectedRowCount();
        if (SelectedRowCount == 1) {

            String AddToGRNItem = TableItem.getValueAt(TableItem.getSelectedRow(), 0).toString();
            Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(AddToGRNItem);
            if ((Boolean) CheckItemAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
            } else {
                AddToGRN();
            }
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnAddToGRNActionPerformed

    protected Object[] CheckItemAlreadyAdded(String ItemFromAddToGRN) {
        int rowCount = model_GRNTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String GRNTableItemCode = model_GRNTable.getValueAt(i, 0).toString();
            if (ItemFromAddToGRN.equals(GRNTableItemCode)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void AddToGRN() {

        String ItemCode, ItemName, PurchaseUnitCode;
        String PurchasePrice, Quantity, Amount, ExpireDate;

        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float CheckQuantity = Float.parseFloat(TextQuantity.getText());
            float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
            } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {

                ItemCode = TableItem.getValueAt(TableItem.getSelectedRow(), 0).toString();
                ItemName = TableItem.getValueAt(TableItem.getSelectedRow(), 1).toString();
                PurchaseUnitCode = TableItem.getValueAt(TableItem.getSelectedRow(), 2).toString();
                PurchasePrice = TextPurchasePrice.getText();
                Quantity = TextQuantity.getText();
                Amount = TextAmount.getText();
                ExpireDate = "Not define";

                model_GRNTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, Quantity, Amount, ExpireDate});
                object_GRN.countGrnItems();
                
                GRN.buttonSave.setEnabled(false);
                CalculateAmountWithOutTax();
            }

        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int GRNTableRowCount = GRN.TableGRN.getRowCount();
        for (int i = 0; i < GRNTableRowCount; i++) {
            ItemPriceAmount = Float.parseFloat(GRN.TableGRN.getValueAt(i, 5).toString());
            TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
        }
        GRN.txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
        Refresh();
        txtSearch.requestFocus();
        txtSearch.selectAll();
    }

    private void Refresh() {
        TextPurchasePrice.setText("0.00");
        TextQuantity.setText("0.000");
        TextAmount.setText("0.00");
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnAddToGRN.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemCode.equals("")) {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND (Type = 'Stock' OR Type = 'Both') AND ItemCode LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND (Type = 'Stock' OR Type = 'Both') AND ItemCode LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableItem.setValueAt(reset.getString("SupplierCode"), rowCount, 5);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemName.equals("")) {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND (Type = 'Stock' OR Type = 'Both') AND ItemName LIKE '%" + ItemName + "%'";
            } else {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND (Type = 'Stock' OR Type = 'Both') AND ItemName LIKE '%" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableItem.setValueAt(reset.getString("SupplierCode"), rowCount, 5);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshTable() {
        try {
            int row = model_ItemTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ItemTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void TableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableItemMouseClicked
        String ItemCode, ItemName, PurchaseUnitCode, MainCode = "", MainName = "", SubCode = "", SubName = "";
        String PurchasePrice;

        ItemCode = TableItem.getValueAt(TableItem.getSelectedRow(), 0).toString();
        ItemName = TableItem.getValueAt(TableItem.getSelectedRow(), 1).toString();
        PurchaseUnitCode = TableItem.getValueAt(TableItem.getSelectedRow(), 2).toString();
        PurchasePrice = TableItem.getValueAt(TableItem.getSelectedRow(), 3).toString();

        TextPurchasePrice.setText(PurchasePrice);
        TextPurchasePrice.requestFocus();
    }//GEN-LAST:event_TableItemMouseClicked

    private void TextPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPurchasePriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                TextQuantity.requestFocus();
                TextQuantity.selectAll();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_TextPurchasePriceKeyPressed

    private void TextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float Amount;
                float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                float Quantity = Float.parseFloat(TextQuantity.getText());

                if (Quantity > 0) {

                    Amount = PurchasePrice * Quantity;
                    TextAmount.setText("" + roundTwoDecimals(Amount));
                    TextAmount.requestFocus();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Wrong values", JOptionPane.OK_OPTION);
                }
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_TextQuantityKeyPressed

    private void TextPurchasePriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextPurchasePriceFocusGained
        TextPurchasePrice.selectAll();
    }//GEN-LAST:event_TextPurchasePriceFocusGained

    private void TextQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextQuantityFocusGained
        TextQuantity.selectAll();
    }//GEN-LAST:event_TextQuantityFocusGained

    private void TextAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextAmountFocusGained
        TextAmount.selectAll();
    }//GEN-LAST:event_TextAmountFocusGained

    private void TextAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAmountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextAmount.getText().equals("") && !TextQuantity.getText().equals("") && !TextPurchasePrice.getText().equals("")) {
                double Amount = Float.parseFloat(TextAmount.getText());
                double PurchasePrice;
                double Quantity = Float.parseFloat(TextQuantity.getText());
                if (Quantity > 0) {
                    PurchasePrice = Amount / Quantity;
                    TextPurchasePrice.setText("" + roundTwoDecimals(PurchasePrice));
                    btnAddToGRN.requestFocus();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Wrong values", JOptionPane.OK_OPTION);
                }
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_TextAmountKeyPressed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            TableItem.requestFocus();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void TableItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableItemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String PurchasePrice;
            PurchasePrice = TableItem.getValueAt(TableItem.getSelectedRow(), 3).toString();

            TextPurchasePrice.setText(PurchasePrice);
            TextPurchasePrice.requestFocus();
        }
    }//GEN-LAST:event_TableItemKeyPressed

    private void ButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_ButtonExitActionPerformed

    private void ButtonExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_ButtonExitKeyPressed

    public double roundTwoDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.##");
        return Double.valueOf(threeDForm.format(d));
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonExit;
    private javax.swing.JTable TableItem;
    private javax.swing.JFormattedTextField TextAmount;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JFormattedTextField TextQuantity;
    private javax.swing.JButton btnAddToGRN;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
