/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


package OtherDialogs;

import MainFiles.IndexPage;
import SearchDialogs.CommonItemSearch;
import Transactions.GRN;
import static Transactions.GRN.cmbSupplier;
import Transactions.PurchaseOrder;
import db.ConnectSql;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class AddFreeItems extends javax.swing.JDialog {

    private GRN object_GRN;
    private final DefaultTableModel model_ItemTable;
    private DefaultTableModel model_FreeItemsNew;

    private PurchaseOrder purchaseOrderObject = null;
    private GRN grnObject = null;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form GRNItemSearch
     *
     * @param objectAddFreeItems
     */
    public AddFreeItems(Object objectAddFreeItems) {
        super();
        initComponents();
        
        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/DialogForms/free1.jpg");
        labelIcon1.setIcon(DefaultBackGround);
        
        if (objectAddFreeItems instanceof PurchaseOrder) {
            this.purchaseOrderObject = (PurchaseOrder) objectAddFreeItems;
            String poId = PurchaseOrder.txtPOID.getText();
        } else if (objectAddFreeItems instanceof GRN) {
            this.grnObject = (GRN) objectAddFreeItems;
            String grnID = GRN.txtGRNID.getText();
            textTransactionID.setText(grnID);
        }

        model_ItemTable = (DefaultTableModel) tableExistingItems.getModel();

        LoadDetails();
        textQuantity.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnAddToTable = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableExistingItems = new javax.swing.JTable();
        ButtonExit = new javax.swing.JButton();
        textTransactionID = new javax.swing.JTextField();
        buttonSave = new javax.swing.JButton();
        lbl_subAccount1 = new javax.swing.JLabel();
        textQuantity = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableNewFreeItems = new javax.swing.JTable();
        ButtonSearchItems = new javax.swing.JButton();
        labelIcon1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Free Items");
        setAlwaysOnTop(true);
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAddToTable.setMnemonic('s');
        btnAddToTable.setText("Add");
        btnAddToTable.setActionCommand("Delete");
        btnAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToTableActionPerformed(evt);
            }
        });
        panel1.add(btnAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, 100, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Add free items to this GRN");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 160, 20));

        tableExistingItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Existing quantity", "Free quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableExistingItems.getTableHeader().setReorderingAllowed(false);
        tableExistingItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableExistingItemsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableExistingItems);
        if (tableExistingItems.getColumnModel().getColumnCount() > 0) {
            tableExistingItems.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 880, 200));

        ButtonExit.setText("Exit");
        ButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitActionPerformed(evt);
            }
        });
        ButtonExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonExitKeyPressed(evt);
            }
        });
        panel1.add(ButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 520, 100, -1));

        textTransactionID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textTransactionID.setEnabled(false);
        panel1.add(textTransactionID, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 520, 130, 20));

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 520, 110, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("  Add free quantity for existing items in GRN");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 220, 20));

        textQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        textQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textQuantity.setText("0.000");
        textQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textQuantityFocusGained(evt);
            }
        });
        textQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textQuantityKeyPressed(evt);
            }
        });
        panel1.add(textQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 20, 90, -1));

        tableNewFreeItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableNewFreeItems.getTableHeader().setReorderingAllowed(false);
        tableNewFreeItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNewFreeItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableNewFreeItems);
        if (tableNewFreeItems.getColumnModel().getColumnCount() > 0) {
            tableNewFreeItems.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 313, 880, 190));

        ButtonSearchItems.setText("Search items");
        ButtonSearchItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchItemsActionPerformed(evt);
            }
        });
        panel1.add(ButtonSearchItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 130, -1));
        panel1.add(labelIcon1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadDetails() {
        try {
            String transactionID = GRN.txtGRNID.getText();
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT ItemCode,ItemName,UnitPurchase,PurchasePrice,Quantity FROM GRNItems WHERE GRNID = '" + transactionID + "' ORDER BY ItemName";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                tableExistingItems.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableExistingItems.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableExistingItems.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                tableExistingItems.setValueAt(reset.getString("Quantity"), rowCount, 3);
                tableExistingItems.setValueAt(0, rowCount, 4);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToTableActionPerformed
        int SelectedRowCount = tableExistingItems.getSelectedRowCount();
        int SelectedRow = tableExistingItems.getSelectedRow();
        String freeQuantity = textQuantity.getText();

        if (SelectedRowCount == 1) {
            if (!textQuantity.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(textQuantity.getText());
                if (CheckQuantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Free quantity should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0) {
                    tableExistingItems.setValueAt(freeQuantity, SelectedRow, 4);
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnAddToTableActionPerformed

    private void tableExistingItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableExistingItemsMouseClicked
        String freeQuantity;
        freeQuantity = tableExistingItems.getValueAt(tableExistingItems.getSelectedRow(), 4).toString();

        textQuantity.setText(freeQuantity);
        textQuantity.selectAll();
        textQuantity.requestFocus();
    }//GEN-LAST:event_tableExistingItemsMouseClicked

    private void ButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_ButtonExitActionPerformed

    private void ButtonExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_ButtonExitKeyPressed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        int x = JOptionPane.showConfirmDialog(this, "Are you sure to add these free items?", "Add free items?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            LoadTime();
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String GRNTime, GRNDate;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);

            if (resultset.next()) {
                GRNDate = IndexPage.LabelDate.getText();
                GRNTime = resultset.getString("CurrentDateTime").split(" ")[1];
                GRNTime = GRNTime.split("\\.")[0];
                saveFreeItems(GRNTime, GRNDate);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void saveFreeItems(String GRNTime, String GRNDate) {
        String existingFreeItemCode, systemNoteForExisting, systemNoteForNew;
        String newFreeItemCode, newFreeItemName, newFreeItemPurchaseUnitCode, Notes = "-";
        double newFreeItemPurchasePrice, newFreeItemQuantity, Amount = 0, itemTax1 = 0, itemTax2 = 0, itemOtherChargers = 0, zeroQuantity = 0;
        double CurrentQuantity, NewQuantity, existingFreeItemQuantity;
        String ExpireDate = "Not define";
        String GRNID = textTransactionID.getText();
        systemNoteForExisting = "Free item updated";
        systemNoteForNew = "Free item added";
        String IsReturn = "No";
        String ForEmptyFields = "-";

        int rowCountExisitingItems = tableExistingItems.getRowCount();
        int rowCountNewItems = tableNewFreeItems.getRowCount();
        if (this.purchaseOrderObject instanceof PurchaseOrder) {

        } else if (this.grnObject instanceof GRN) {
            ResultSet RSETCurrentItemQuantity;
            String SupplierInvoice = "Free item";
            String SupplierCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            try {
                java.sql.Statement stmtNewFreeItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtExistingFreeItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtCurrentQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtStockUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtBinCardInsert = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                for (int i = 0; i < rowCountExisitingItems; i++) {
                    existingFreeItemCode = tableExistingItems.getValueAt(i, 0).toString();
                    existingFreeItemQuantity = roundTwoDecimals(Double.parseDouble(tableExistingItems.getValueAt(i, 4).toString()));

                    String existingFreeItemsQuery = "UPDATE GRNItems SET FreeQuantity = '" + existingFreeItemQuantity + "',SystemNotes  = '" + systemNoteForExisting + "' WHERE GRNID = '" + GRNID + "' AND ItemCode = '" + existingFreeItemCode + "'";
                    stmtExistingFreeItems.execute(existingFreeItemsQuery);

                    String CurrentQtyQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + existingFreeItemCode + "'";
                    RSETCurrentItemQuantity = stmtCurrentQty.executeQuery(CurrentQtyQuery);

                    if (RSETCurrentItemQuantity.next()) {
                        CurrentQuantity = RSETCurrentItemQuantity.getDouble("Quantity");
                        NewQuantity = roundThreeDecimals(existingFreeItemQuantity + CurrentQuantity);

                        String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "' where ItemCode='" + existingFreeItemCode + "'";
                        stmtStockUpdate.execute(StockUpdateQuery);

                        //////////////////////////////////////////////////////////////
                        String BinCardInsert = "INSERT INTO [BinCard]\n"
                                + "           ([ItemCode]\n"
                                + "           ,[Date]\n"
                                + "           ,[Time]\n"
                                + "           ,[OtherNotes]\n"
                                + "           ,[RecivedID]\n"
                                + "           ,[RecivedFrom]\n"
                                + "           ,[RecivedQuantity]\n"
                                + "           ,[IssuedID]\n"
                                + "           ,[IssuedTo]\n"
                                + "           ,[IssuedQuantity]\n"
                                + "           ,[BalanceQty])\n"
                                + "     VALUES\n"
                                + "           ('" + existingFreeItemCode + "'\n"
                                + "           ,'" + GRNDate + "'\n"
                                + "           ,'" + GRNTime + "'\n"
                                + "           ,'" + SupplierInvoice + "'\n"
                                + "           ,'" + GRNID + "'\n"
                                + "           ,'" + SupplierCode[1] + "'\n"
                                + "           ,'" + existingFreeItemQuantity + "'\n"
                                + "           ,'" + ForEmptyFields + "'\n"
                                + "           ,'" + ForEmptyFields + "'\n"
                                + "           ,'0'\n"
                                + "           ,'" + NewQuantity + "')";
                        stmtBinCardInsert.execute(BinCardInsert);
                    }
                }
                stmtExistingFreeItems.close();

                for (int j = 0; j < rowCountNewItems; j++) {
                    newFreeItemCode = tableNewFreeItems.getValueAt(j, 0).toString();
                    newFreeItemName = tableNewFreeItems.getValueAt(j, 1).toString();
                    newFreeItemPurchaseUnitCode = tableNewFreeItems.getValueAt(j, 2).toString();
                    newFreeItemPurchasePrice = roundTwoDecimals(Double.parseDouble(tableNewFreeItems.getValueAt(j, 3).toString()));
                    newFreeItemQuantity = roundThreeDecimals(Double.parseDouble(tableNewFreeItems.getValueAt(j, 4).toString()));

                    String newFreeItemsInsertQuery = "INSERT INTO [GRNItems]\n"
                            + "           ([GRNID]\n"
                            + "           ,[ItemCode]\n"
                            + "           ,[ItemName]\n"
                            + "           ,[UnitPurchase]\n"
                            + "           ,[Quantity]\n"
                            + "           ,[QuantityAfterReturn]\n"
                            + "           ,[PurchasePrice]\n"
                            + "           ,[Tax1]\n"
                            + "           ,[Tax2]\n"
                            + "           ,[OtherChargers]\n"
                            + "           ,[ItemPriceAmount]\n"
                            + "           ,[ItemPriceAmountAfterReturn]\n"
                            + "           ,[IsReturn]\n"
                            + "           ,[ExpireDate]\n"
                            + "           ,[GRNDate]\n"
                            + "           ,[ReduceQuantity]\n"
                            + "           ,[Notes]\n"
                            + "           ,[FreeQuantity]\n"
                            + "           ,[SystemNotes])\n"
                            + "     VALUES\n"
                            + "           ('" + GRNID + "'\n"
                            + "           ,'" + newFreeItemCode + "'\n"
                            + "           ,'" + newFreeItemName + "'\n"
                            + "           ,'" + newFreeItemPurchaseUnitCode + "'\n"
                            + "           ,'" + zeroQuantity + "'\n"
                            + "           ,'" + zeroQuantity + "'\n"
                            + "           ,'" + newFreeItemPurchasePrice + "'\n"
                            + "           ,'" + itemTax1 + "'\n"
                            + "           ,'" + itemTax2 + "'\n"
                            + "           ,'" + itemOtherChargers + "'\n"
                            + "           ,'" + Amount + "'\n"
                            + "           ,'" + Amount + "'\n"
                            + "           ,'" + IsReturn + "'\n"
                            + "           ,'" + ExpireDate + "'\n"
                            + "           ,'" + GRNDate + "'\n"
                            + "           ,'" + newFreeItemQuantity + "'\n"
                            + "           ,'" + Notes + "'\n"
                            + "           ,'" + newFreeItemQuantity + "'\n"
                            + "           ,'" + systemNoteForNew + "')";
                    stmtNewFreeItems.execute(newFreeItemsInsertQuery);

                    /////////////////////////////////////////////////////////////
                    String CurrentQtyQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + newFreeItemCode + "'";
                    RSETCurrentItemQuantity = stmtCurrentQty.executeQuery(CurrentQtyQuery);

                    if (RSETCurrentItemQuantity.next()) {
                        CurrentQuantity = RSETCurrentItemQuantity.getDouble("Quantity");
                        NewQuantity = roundThreeDecimals(newFreeItemQuantity + CurrentQuantity);

                        String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "' where ItemCode='" + newFreeItemCode + "'";
                        stmtStockUpdate.execute(StockUpdateQuery);

                        //////////////////////////////////////////////////////////////
                        String BinCardInsert = "INSERT INTO [BinCard]\n"
                                + "           ([ItemCode]\n"
                                + "           ,[Date]\n"
                                + "           ,[Time]\n"
                                + "           ,[OtherNotes]\n"
                                + "           ,[RecivedID]\n"
                                + "           ,[RecivedFrom]\n"
                                + "           ,[RecivedQuantity]\n"
                                + "           ,[IssuedID]\n"
                                + "           ,[IssuedTo]\n"
                                + "           ,[IssuedQuantity]\n"
                                + "           ,[BalanceQty])\n"
                                + "     VALUES\n"
                                + "           ('" + newFreeItemCode + "'\n"
                                + "           ,'" + GRNDate + "'\n"
                                + "           ,'" + GRNTime + "'\n"
                                + "           ,'" + SupplierInvoice + "'\n"
                                + "           ,'" + GRNID + "'\n"
                                + "           ,'" + SupplierCode[1] + "'\n"
                                + "           ,'" + newFreeItemQuantity + "'\n"
                                + "           ,'" + ForEmptyFields + "'\n"
                                + "           ,'" + ForEmptyFields + "'\n"
                                + "           ,'0'\n"
                                + "           ,'" + NewQuantity + "')";
                        stmtBinCardInsert.execute(BinCardInsert);
                    }
                }

                stmtNewFreeItems.close();
                stmtStockUpdate.close();
                stmtBinCardInsert.close();
                JOptionPane.showMessageDialog(this, "Free items are successfully saved.");
                this.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void ButtonSearchItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchItemsActionPerformed
        new CommonItemSearch(this).setVisible(true);
    }//GEN-LAST:event_ButtonSearchItemsActionPerformed

    private void textQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textQuantityFocusGained
        textQuantity.selectAll();
    }//GEN-LAST:event_textQuantityFocusGained

    private void tableNewFreeItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNewFreeItemsMouseClicked
        if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to remove this free item?", "Remove free item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                model_FreeItemsNew = (DefaultTableModel) tableNewFreeItems.getModel();
                int i = tableNewFreeItems.getSelectedRow();
                model_FreeItemsNew.removeRow(i);
            }
        }
    }//GEN-LAST:event_tableNewFreeItemsMouseClicked

    private void textQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!textQuantity.getText().equals("")) {
                btnAddToTable.requestFocus();
            } else if (textQuantity.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Free quantity field is empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_textQuantityKeyPressed

    public double roundTwoDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.##");
        return Double.valueOf(threeDForm.format(d));
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonExit;
    private javax.swing.JButton ButtonSearchItems;
    private javax.swing.JButton btnAddToTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelIcon1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JPanel panel1;
    public static javax.swing.JTable tableExistingItems;
    public static javax.swing.JTable tableNewFreeItems;
    private javax.swing.JFormattedTextField textQuantity;
    private javax.swing.JTextField textTransactionID;
    // End of variables declaration//GEN-END:variables
}
