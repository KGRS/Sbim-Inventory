/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.materialRequisitionNoteForProItems;
import OtherDialogs.WriteNotesCommon;
import db.ConnectSql;
import functions.DocNumGenerator;
import functions.ReadConfig;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ravindu
 */
public class MaterialRequisitionNoteForProItems extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_MRNItemTable, model_IngredientItemTable, model_productLevel1Items;
    private final String spliter = "--";
    private DocNumGenerator AutoID;
    private final String projectPath = System.getProperty("user.dir");
    private final String menuName = "Material Requisition Note for Production Items";
    private final String CheckAvailableQuantity = ReadConfig.checkAvailableQuantity;

    /**
     * Creates new form MaterialRequisitionNoteForProItems
     */
    public MaterialRequisitionNoteForProItems() {
        initComponents();

        this.setTitle(menuName);
        LoadSystemDate();
        LoadTaxesToLables();
        LoadRequestFromToCombo();
        LoadJobsToCombo();
        model_MRNItemTable = (DefaultTableModel) tableMRNItem.getModel();
        model_IngredientItemTable = (DefaultTableModel) tableIngredientRawItems.getModel();
        model_productLevel1Items = (DefaultTableModel) tableProductLevel1.getModel();
        rBtnCode.setSelected(true);
        buttonSave.setEnabled(false);
        cmbTakeFromDepartment.requestFocus();

        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/Transaction/MRN.png");
        labelIcon.setIcon(DefaultBackGround);

        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround); //cornerBackground

        ImageIcon cornerBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/cornerBackground.jpg");
        backgroundCornerLabel.setIcon(cornerBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        ButtonPreview = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        textDate = new javax.swing.JTextField();
        panelAvailableItems = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableIngredientRawItems = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductLevel1 = new javax.swing.JTable();
        PanelGRN = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableMRNItem = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lableOtherCharges = new javax.swing.JLabel();
        lbl_category2 = new javax.swing.JLabel();
        txtOtherChargers = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtTotalWithTax = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        lbl_category6 = new javax.swing.JLabel();
        txtTotalNoTax = new javax.swing.JFormattedTextField();
        lbl_category1 = new javax.swing.JLabel();
        textRequestedBy = new javax.swing.JTextField();
        txtMRNID = new javax.swing.JTextField();
        lbl_category8 = new javax.swing.JLabel();
        ButtonAddSelected = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        TextQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        textNumbersInTransaction = new javax.swing.JTextField();
        buttonWriteNotes = new javax.swing.JButton();
        textNumbersInAvailable = new javax.swing.JTextField();
        cmbTakeFromDepartment = new javax.swing.JComboBox();
        backgroundCornerLabel = new javax.swing.JLabel();
        lbl_subAccount1 = new javax.swing.JLabel();
        comboBoxJobsToRequest = new javax.swing.JComboBox();
        backgroundLabel = new javax.swing.JLabel();
        labelIcon = new javax.swing.JLabel();
        buttonView = new javax.swing.JButton();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1097, 674));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSave.setMnemonic('s');
        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, 80, -1));

        buttonRefresh.setMnemonic('d');
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        panel1.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 80, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Requested Date");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 100, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText(" Search jobs to request");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 170, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 610, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 60, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 610, 80, -1));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, 150, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 600, 350, -1));

        textDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textDate.setEnabled(false);
        panel1.add(textDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 120, -1));

        panelAvailableItems.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Available items"));

        tableIngredientRawItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Available Quantity", "Quantity", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableIngredientRawItems.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableIngredientRawItems);
        if (tableIngredientRawItems.getColumnModel().getColumnCount() > 0) {
            tableIngredientRawItems.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        tableProductLevel1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product level 1 code", "Product level 1 name", "Manufacture unit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductLevel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductLevel1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProductLevel1);

        javax.swing.GroupLayout panelAvailableItemsLayout = new javax.swing.GroupLayout(panelAvailableItems);
        panelAvailableItems.setLayout(panelAvailableItemsLayout);
        panelAvailableItemsLayout.setHorizontalGroup(
            panelAvailableItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAvailableItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelAvailableItemsLayout.setVerticalGroup(
            panelAvailableItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAvailableItemsLayout.createSequentialGroup()
                .addGroup(panelAvailableItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(panelAvailableItemsLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panel1.add(panelAvailableItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 1050, 160));

        PanelGRN.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Material requisition note items"));

        tableMRNItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "MRN Qunatity", "Amount", "Product level 1 code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMRNItem.getTableHeader().setReorderingAllowed(false);
        tableMRNItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMRNItemMouseClicked(evt);
            }
        });
        tableMRNItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMRNItemKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tableMRNItem);
        if (tableMRNItem.getColumnModel().getColumnCount() > 0) {
            tableMRNItem.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelGRNLayout = new javax.swing.GroupLayout(PanelGRN);
        PanelGRN.setLayout(PanelGRNLayout);
        PanelGRNLayout.setHorizontalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGRNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelGRNLayout.setVerticalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGRNLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel1.add(PanelGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 1050, 190));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lableOtherCharges.setForeground(new java.awt.Color(102, 102, 102));
        lableOtherCharges.setText("Other chargers (Rs)");
        jPanel1.add(lableOtherCharges, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 20));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Total (with other chargers) =");
        jPanel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, 20));

        txtOtherChargers.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtOtherChargers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOtherChargers.setText("0.00");
        txtOtherChargers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOtherChargersFocusGained(evt);
            }
        });
        txtOtherChargers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOtherChargersMouseClicked(evt);
            }
        });
        txtOtherChargers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOtherChargersKeyPressed(evt);
            }
        });
        jPanel1.add(txtOtherChargers, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 160, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 160, -1));

        txtTotalWithTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalWithTax.setText("0.00");
        txtTotalWithTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWithTax.setEnabled(false);
        jPanel1.add(txtTotalWithTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 160, -1));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 100, 20));

        lbl_category6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category6.setText("Total (without other chargers)");
        jPanel1.add(lbl_category6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 160, 20));

        txtTotalNoTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTotalNoTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalNoTax.setText("0.00");
        txtTotalNoTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalNoTax.setEnabled(false);
        jPanel1.add(txtTotalNoTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 10, 160, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 560, 110));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("Requested by");
        panel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 30, 80, 20));

        textRequestedBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textRequestedByKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textRequestedByKeyReleased(evt);
            }
        });
        panel1.add(textRequestedBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 30, 160, -1));

        txtMRNID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMRNID.setEnabled(false);
        panel1.add(txtMRNID, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 610, 110, -1));

        lbl_category8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category8.setText(" Requset from (Department)");
        panel1.add(lbl_category8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 170, 20));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 360, 120, -1));

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });
        panel1.add(buttonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 110, -1));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextPurchasePrice.setEnabled(false);
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 360, 110, 20));

        TextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        TextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextQuantity.setText("0.000");
        TextQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextQuantityFocusGained(evt);
            }
        });
        TextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextQuantityKeyPressed(evt);
            }
        });
        panel1.add(TextQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 360, 110, 20));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextAmount.setEnabled(false);
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 360, 110, 20));

        textNumbersInTransaction.setEditable(false);
        textNumbersInTransaction.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInTransaction.setText("0");
        textNumbersInTransaction.setEnabled(false);
        panel1.add(textNumbersInTransaction, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 70, -1));

        buttonWriteNotes.setText("Write any notes?");
        buttonWriteNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWriteNotesActionPerformed(evt);
            }
        });
        panel1.add(buttonWriteNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 610, 120, -1));

        textNumbersInAvailable.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInAvailable.setText("0");
        textNumbersInAvailable.setEnabled(false);
        panel1.add(textNumbersInAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 70, -1));

        cmbTakeFromDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbTakeFromDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbTakeFromDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbTakeFromDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbTakeFromDepartmentKeyPressed(evt);
            }
        });
        panel1.add(cmbTakeFromDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 280, -1));

        backgroundCornerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(backgroundCornerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 460, 170));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText(" Search items to request");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 170, 20));

        comboBoxJobsToRequest.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboBoxJobsToRequest.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxJobsToRequestPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboBoxJobsToRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 280, -1));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 184, 1080, 460));

        labelIcon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(labelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 240, 130));

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });
        panel1.add(buttonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, 100, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadJobsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select JOB_ID, JOB_ALLOCATED_DATE, PRODUCT_LEVEL_ITEM_CODE, JOB_ALLOCATED_TIME From JobRunning where (MRNID = 'No' AND PRODUCT_LEVEL = '1') order by JOB_ID DESC";
            ResultSet rset = stmt.executeQuery(query);

            comboBoxJobsToRequest.removeAllItems();
            comboBoxJobsToRequest.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboBoxJobsToRequest.insertItemAt(rset.getString("JOB_ID") + "--" + rset.getString("JOB_ALLOCATED_DATE")  + "--" + rset.getString("JOB_ALLOCATED_TIME") + "--" + rset.getString("PRODUCT_LEVEL_ITEM_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboBoxJobsToRequest.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }
    
    private void LoadRequestFromToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments where Type != 'Stock' order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            cmbTakeFromDepartment.removeAllItems();
            cmbTakeFromDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbTakeFromDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbTakeFromDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadSystemDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Statement stmt;
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rset = stmt.executeQuery("SELECT sysDate FROM SystemDate");
            if (rset.next()) {
                textDate.setText(sdf.format(rset.getDate("sysDate")));
            }
            rset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void LoadTaxesToLables() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select Other From Taxes";
            ResultSet rset = stmt.executeQuery(query);

            if (rset.next()) {
                lableOtherCharges.setText(rset.getString("Other"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        int TransferRowCount = tableMRNItem.getRowCount();
        String RequestedBy = textRequestedBy.getText();
        if (textDate.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Something wrong. Date is not loaded. Window will close now. Please restart the application.", "System error", JOptionPane.OK_OPTION);
            this.dispose();
        } else if (RequestedBy.equals("")) {
            JOptionPane.showMessageDialog(this, "Name for requested by is not inserted.", "Empty name", JOptionPane.OK_OPTION);
            textRequestedBy.requestFocus();
        } else if (TransferRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not inserted.", "No items", JOptionPane.OK_OPTION);
        } else if (txtOtherChargers.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Other chargers field is empty.", "Empty field", JOptionPane.OK_OPTION);
            txtOtherChargers.requestFocus();
        } else if (!txtOtherChargers.getText().equals("")) {
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());
            if (OtherChargers < 0) {
                JOptionPane.showMessageDialog(this, "Other Chargers is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtOtherChargers.requestFocus();
            } else {
                int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this Material Requisition Note?", "Save Material Requisition Note?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    LoadTime();
                }
            }
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);
            if (resultset.next()) {
                Date = textDate.getText();
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                SaveAsMRN(Time, Date);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void SaveAsMRN(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode;
        String isPending = "Yes";
        double PurchasePrice, Quantity, Amount;
        double RecivedQuantity = 0;

        try {
            String departmentCode[] = cmbTakeFromDepartment.getSelectedItem().toString().split("--");
            String RequestedBy = textRequestedBy.getText();
            String userId = IndexPage.user;
            String ForEmptyFields = "-";

            float TotalWithoutTaxes = roundTwoDecimalsFloat(Float.parseFloat(txtTotalNoTax.getText()));
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());
            float TotalWithTaxes = roundTwoDecimalsFloat(Float.parseFloat(txtTotalWithTax.getText()));

            String Remarks = "", MRNStatus = "Yes";

            String ID;
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("MRN-PL1");
            ID = AutoID.getDocChar() + AutoID.getDocNumber();
            txtMRNID.setText(ID);
            ID = txtMRNID.getText();

            //////////////////////////////////////////////////////////////////
            int RowCount = tableMRNItem.getRowCount();
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [MRNmain]\n"
                    + "           ([MRNID]\n"
                    + "           ,[MRNDate]\n"
                    + "           ,[MRNTime]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentCode]\n"
                    + "           ,[RequestedBy]\n"
                    + "           ,[IsPending]\n"
                    + "           ,[IS_PRODUCTION_ITEM_MRN])\n"
                    + "     VALUES\n"
                    + "           ('" + ID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + departmentCode[1] + "'\n"
                    + "           ,'" + RequestedBy + "'\n"
                    + "           ,'" + isPending + "'\n"
                    + "           ,'" + MRNStatus + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            /////////////////////////////////////////////////////////////////////////       
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < RowCount; i++) {
                ItemCode = tableMRNItem.getValueAt(i, 0).toString();
                ItemName = tableMRNItem.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableMRNItem.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableMRNItem.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tableMRNItem.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tableMRNItem.getValueAt(i, 5).toString()));

                String ItemInsertQuery = "INSERT INTO [MRNItems]\n"
                        + "           ([MRNID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[RecivedQuantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[IsPending]\n"
                        + "           ,[MRNDate]\n"
                        + "           ,[Notes])\n"
                        + "     VALUES\n"
                        + "           ('" + ID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + RecivedQuantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + OtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + isPending + "'\n"
                        + "           ,'" + Date + "'\n"
                        + "           ,'" + ForEmptyFields + "')";
                stmtItems.execute(ItemInsertQuery);
                //////////////////////////////////////////////////////////////
            }
            stmtItems.close();

            JOptionPane.showMessageDialog(this, "'"+menuName+"' is successfully saved.");
            buttonSave.setEnabled(false);
            btnCalculate.setEnabled(false);

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public float roundTwoDecimalsFloat(float f) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Float.valueOf(twoDForm.format(f));
    }


    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Material Requisition Note window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            rBtnCode.setSelected(true);
            LoadSystemDate();
            LoadTaxesToLables();
            LoadRequestFromToCombo();

            buttonSave.setEnabled(false);
            textRequestedBy.setText("");

            txtTotalNoTax.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            txtSearch.setText("");

            TextPurchasePrice.setText("0.00");
            TextQuantity.setText("0.000");
            TextAmount.setText("0.00");
            txtMRNID.setText("");
            btnCalculate.setEnabled(true);
            
            model_MRNItemTable.setRowCount(0);
            model_IngredientItemTable.setRowCount(0);
            model_productLevel1Items.setRowCount(0);
            
            cmbTakeFromDepartment.requestFocus();
            textNumbersInAvailable.setText("0");
            textNumbersInTransaction.setText("0");
            comboBoxJobsToRequest.setSelectedIndex(0);
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void exit() {
        int rowCount = tableMRNItem.getRowCount();
        String ID = txtMRNID.getText();
        if (rowCount > 0 && ID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this Material Requisition Note?", "Exit Material Requisition Note?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (materialRequisitionNoteForProItems != null) {
                    materialRequisitionNoteForProItems = null;
                }
                this.dispose();
            }
        } else if (rowCount <= 0 && ID.isEmpty()) {
            if (materialRequisitionNoteForProItems != null) {
                materialRequisitionNoteForProItems = null;
            }
            this.dispose();
        } else {
            if (materialRequisitionNoteForProItems != null) {
                materialRequisitionNoteForProItems = null;
            }
            this.dispose();
        }
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            buttonSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String transactionID = txtMRNID.getText();
        if (transactionID.isEmpty()) {
            int GRnRowCount = tableMRNItem.getRowCount();
            if (GRnRowCount <= 0) {
                JOptionPane.showMessageDialog(this, "items are not added to preview.", "Not added", JOptionPane.OK_OPTION);
            } else if (GRnRowCount > 0) {
                int x = JOptionPane.showConfirmDialog(this, "Material Requisition Note is still not saved.\nDo you want to view a test preview?", "View a test preview?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    try {
                        java.sql.Statement stmtDelete = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String queryMain = "delete From InvTrTestPreviewMain";
                        stmtDelete.execute(queryMain);
                        String queryItems = "delete From InvTrTestPreviewItems";
                        stmtDelete.execute(queryItems);

                        String Time = "No time";
                        String Date = "No date";
                        SaveForTestPreview(Time, Date);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                }
            }
        } else if (!transactionID.isEmpty()) {
            Preview();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void SaveForTestPreview(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate;
        double PurchasePrice, Quantity, Amount;
        try {
            String OtherID = "Not define";

            String branchCode[] = cmbTakeFromDepartment.getSelectedItem().toString().split("--");
            String SupplierInvoice = textRequestedBy.getText();
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = 0;
            float Tax1 = 0;
            float Tax2 = 0;
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = textDate.getText();
            String PaymentType = "Not define";
            String CreditPeriod = "0";
            String PeriodEndsOn = "Not define";

            String Remarks = "";
            String departmentCode[] = cmbTakeFromDepartment.getSelectedItem().toString().split("--");
            String TransactionID = "Test Preview";

            //////////////////////////////////////////////////////////////////
            int rowCount = tableMRNItem.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [InvTrTestPreviewMain]\n"
                    + "           ([TransactionID]\n"
                    + "           ,[Date]\n"
                    + "           ,[Time]\n"
                    + "           ,[PreviousID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + TransactionID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + OtherID + "'\n"
                    + "           ,'" + branchCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + departmentCode[1] + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < rowCount; i++) {
                ItemCode = tableMRNItem.getValueAt(i, 0).toString();
                ItemName = tableMRNItem.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableMRNItem.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableMRNItem.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tableMRNItem.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tableMRNItem.getValueAt(i, 5).toString()));
                ExpireDate = tableMRNItem.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [InvTrTestPreviewItems]\n"
                        + "           ([TransactionID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ExpireDate])\n"
                        + "     VALUES\n"
                        + "           ('" + TransactionID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + ExpireDate + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
            }
            stmtItems.close();
            TestPreview();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void TestPreview() {
        String TransactionID = "Test Preview";
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", TransactionID);
            map.put("Logo", PathToLogo);

            String Report = "TestPreview.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Data Reports/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Preview() {
        String ID = txtMRNID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("DisposalID", ID);
            map.put("Logo", PathToLogo);

            String Report = "Disposal ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Disposal/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshProductLevel1ItemTable();

            if (!ItemCode.equals("")) {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '" + ItemCode + "%' AND ProductLevel1.\"VISIBILITY\" = 'Yes'";
            } else {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '" + ItemCode + "%' AND ProductLevel1.\"VISIBILITY\" = 'Yes'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_productLevel1Items.addRow(new Object[model_productLevel1Items.getColumnCount()]);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableProductLevel1.setValueAt(reset.getString("UnitCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInAvailableItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshProductLevel1ItemTable();

            if (!ItemName.equals("")) {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '%" + ItemName + "%' AND ProductLevel1.\"VISIBILITY\" = 'Yes'";
            } else {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '%" + ItemName + "%' AND ProductLevel1.\"VISIBILITY\" = 'Yes'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_IngredientItemTable.addRow(new Object[model_IngredientItemTable.getColumnCount()]);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableProductLevel1.setValueAt(reset.getString("UnitCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInAvailableItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshProductLevel1ItemTable() {
        try {
            int row = model_productLevel1Items.getRowCount();
            for (int j = 0; j < row; j++) {
                model_productLevel1Items.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void tableMRNItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMRNItemMouseClicked
        if (evt.getClickCount() == 1) {
            tableIngredientRawItems.setSelectionMode(0);
            buttonSave.setEnabled(false);
            String PurchasePrice, Quantity, Amount;
            float CheckAmount = Float.parseFloat(tableMRNItem.getValueAt(tableMRNItem.getSelectedRow(), 5).toString());
            if (CheckAmount > 0) {
                PurchasePrice = tableMRNItem.getValueAt(tableMRNItem.getSelectedRow(), 3).toString();
                Quantity = tableMRNItem.getValueAt(tableMRNItem.getSelectedRow(), 4).toString();
                Amount = tableMRNItem.getValueAt(tableMRNItem.getSelectedRow(), 5).toString();
                TextPurchasePrice.setText(PurchasePrice);
                TextQuantity.setText(Quantity);
                TextAmount.setText(Amount);
                TextQuantity.requestFocus();
                TextQuantity.selectAll();
            }
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableMRNItem.getSelectedRow();
                model_MRNItemTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
                countItemsInTransactionTable();
            }

        }
    }//GEN-LAST:event_tableMRNItemMouseClicked

    private void tableMRNItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMRNItemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableMRNItem.getSelectedRow();
                model_MRNItemTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
            }
        }
    }//GEN-LAST:event_tableMRNItemKeyPressed

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int GRNTableRowCount = tableMRNItem.getRowCount();
        for (int i = 0; i < GRNTableRowCount; i++) {
            ItemPriceAmount = Float.parseFloat(tableMRNItem.getValueAt(i, 5).toString());
            TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
        }
        txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
        txtSearch.setText("");
        txtSearch.requestFocus();
    }

    private void txtOtherChargersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOtherChargersMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtOtherChargersMouseClicked

    private void txtOtherChargersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtherChargersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtOtherChargers.getText();
            if (!EnteredValue.isEmpty()) {
                btnCalculate.requestFocus();
            }
            //            else if(EnteredValue.isEmpty()){
            //                txtDiscount.setText("0.00");
            //                txtTax1.requestFocus();
            //            }
        }
    }//GEN-LAST:event_txtOtherChargersKeyPressed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        float TotalWithTaxes;
        //        String Value1 = txtTotalNoTax.getText().toString();
        String Value5 = txtOtherChargers.getText();

        if (!Value5.isEmpty()) {
            try {
                float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
                float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

                TotalWithTaxes = (TotalWithoutTaxes + OtherChargers);
                txtTotalWithTax.setText(String.valueOf(TotalWithTaxes));
                buttonSave.setEnabled(true);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Value5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void textRequestedByKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRequestedByKeyReleased
        ValidateFields.CheckForOtherFields(textRequestedBy);
    }//GEN-LAST:event_textRequestedByKeyReleased

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCountAtProductLevel1 = tableProductLevel1.getSelectedRowCount();
        int SelectedRowCountAtMRN = tableMRNItem.getSelectedRowCount();
        if (SelectedRowCountAtProductLevel1 == 1 && SelectedRowCountAtMRN == 0) {
            FirstCheckBeforeAddToSecondTable();
        } else if (SelectedRowCountAtProductLevel1 == 0 && SelectedRowCountAtMRN == 1) {
            JOptionPane.showMessageDialog(this, "Please press the update button.", "Press update.", JOptionPane.OK_OPTION);
            buttonUpdate.requestFocus();
        }

    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void FirstCheckBeforeAddToSecondTable() {
        buttonSave.setEnabled(false);
        float enteredQuantity = Float.parseFloat(TextQuantity.getText());
        int SelectedRowCount = tableProductLevel1.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String ItemFromFirstTable = tableProductLevel1.getValueAt(tableProductLevel1.getSelectedRow(), 0).toString();
            Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(ItemFromFirstTable);
            if ((Boolean) CheckItemAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
            } else {
                if (CheckAvailableQuantity.equals("No")) {
                    AddToTransferTable(enteredQuantity);
                } else if (CheckAvailableQuantity.equals("Yes")) {
                    CheckBeforeAddToTransferTable();
                }
            }
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }

    protected Object[] CheckItemAlreadyAdded(String ItemFromFirstTable) {
        int rowCount = model_MRNItemTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String ItemAtSecondTable = model_MRNItemTable.getValueAt(i, 6).toString();
            if (ItemFromFirstTable.equals(ItemAtSecondTable)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void CheckBeforeAddToTransferTable() {
        int getSelectedRowAtGRN = tableIngredientRawItems.getSelectedRow();
        try {
            float AvailableQuantity = Float.parseFloat(tableIngredientRawItems.getValueAt(getSelectedRowAtGRN, 4).toString());
            float enteredQuantity = Float.parseFloat(TextQuantity.getText());

            if (AvailableQuantity > 0 && AvailableQuantity >= enteredQuantity) {
                AddToTransferTable(enteredQuantity);
            } else if (AvailableQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity is not enough to request.", "Not enough.", JOptionPane.OK_OPTION);
            } else if (AvailableQuantity < enteredQuantity) {
                JOptionPane.showMessageDialog(this, "MRN quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
            }

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void AddToTransferTable(double enteredQuantity) {
        String ItemCode, ItemName, PurchaseUnitCode, productLevel1ItemCode;
        double PurchasePrice, Quantity, Amount, calculatedQuantity;
        int tableIngredientRawItemsRowCount = tableIngredientRawItems.getRowCount();
        int tableProductLevel1SelectedRow = tableProductLevel1.getSelectedRow();
        productLevel1ItemCode = tableProductLevel1.getValueAt(tableProductLevel1SelectedRow, 0).toString();
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            try {
                for (int i = 0; i < tableIngredientRawItemsRowCount; i++) {
                    ItemCode = tableIngredientRawItems.getValueAt(i, 0).toString();
                    ItemName = tableIngredientRawItems.getValueAt(i, 1).toString();
                    PurchaseUnitCode = tableIngredientRawItems.getValueAt(i, 2).toString();
                    PurchasePrice = roundTwoDecimals(Double.parseDouble(tableIngredientRawItems.getValueAt(i, 3).toString()));
                    Quantity = roundThreeDecimals(Double.parseDouble(tableIngredientRawItems.getValueAt(i, 5).toString()));
                    calculatedQuantity = roundThreeDecimals(enteredQuantity * Quantity);
                    Amount = calculatedQuantity * PurchasePrice;

                    if (Quantity > 0) {
                        model_MRNItemTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, calculatedQuantity, Amount, productLevel1ItemCode});
                        CalculateAmountWithOutTax();
                        countItemsInTransactionTable();
                    } else if (Quantity <= 0) {
                        JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
                    }
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }


    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        int SelectedRowCountAtAvailable = tableIngredientRawItems.getSelectedRowCount();
        int SelectedRowCountAtMRN = tableMRNItem.getSelectedRowCount();
        if (SelectedRowCountAtAvailable == 1 && SelectedRowCountAtMRN == 0) {
            JOptionPane.showMessageDialog(this, "Please press the Add selected button.", "Press Add selected.", JOptionPane.OK_OPTION);
            ButtonAddSelected.requestFocus();
        } else if (SelectedRowCountAtAvailable == 0 && SelectedRowCountAtMRN == 1) {
            FirstCheckBeforeAddToTransferTableWithTransactionQuantity();
        }

    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void FirstCheckBeforeAddToTransferTableWithTransactionQuantity() {
        buttonSave.setEnabled(false);
        int SelectedRowCount = tableMRNItem.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(TextQuantity.getText());
                float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {
                    CheckAtUpdateButtonBeforeUpdate();
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }

    private void CheckAtUpdateButtonBeforeUpdate() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            String ItemCode;
            float AvailableQuantity;
            int getSelectedRowAtTransactionTable = tableMRNItem.getSelectedRow();
            try {
                ItemCode = tableMRNItem.getValueAt(getSelectedRowAtTransactionTable, 0).toString();
                ResultSet RSETAvaItems;
                java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETAvaItems = stmtItems.executeQuery(ItemQuery);
                if (RSETAvaItems.next()) {
                    AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                    float Quantity = Float.parseFloat(TextQuantity.getText());
                    if (AvailableQuantity > 0 && AvailableQuantity >= Quantity) {
                        UpdateToReturnTable();
                    } else if (AvailableQuantity <= 0) {
                        JOptionPane.showMessageDialog(this, "Quantity is not enough to request.", "Not enough.", JOptionPane.OK_OPTION);
                    } else if (AvailableQuantity < Quantity) {
                        JOptionPane.showMessageDialog(this, "Requesting quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                    }
                }
                stmtItems.close();
                RSETAvaItems.close();
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                Logger.getLogger(MaterialRequisitionNoteForProItems.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void UpdateToReturnTable() {
        int SelectedRow = tableMRNItem.getSelectedRow();
        double PurchasePrice = Double.parseDouble(TextPurchasePrice.getText());
        double Quantity = Double.parseDouble(TextQuantity.getText());
//        float Amount = Float.parseFloat(TextAmount.getText().toString());
        double Amount = roundTwoDecimals(PurchasePrice * Quantity);

        tableMRNItem.setValueAt(PurchasePrice, SelectedRow, 3);
        tableMRNItem.setValueAt(Quantity, SelectedRow, 4);
        tableMRNItem.setValueAt(Amount, SelectedRow, 5);
        CalculateAmountWithOutTax();
    }


    private void TextQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextQuantityFocusGained
        TextQuantity.selectAll();
    }//GEN-LAST:event_TextQuantityFocusGained

    private void TextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int SelectedRowCountAtAvailable = tableIngredientRawItems.getSelectedRowCount();
            int SelectedRowCountAtMRN = tableMRNItem.getSelectedRowCount();
            if (SelectedRowCountAtAvailable == 1 && SelectedRowCountAtMRN == 0) {
                CheckAtQuantityFieldBeforeUpdateWithAvailableQuantity();
            } else if (SelectedRowCountAtAvailable == 0 && SelectedRowCountAtMRN == 1) {
                CheckAtQuantityFieldBeforeUpdateWithTransactionQuantity();
            }
        }
    }//GEN-LAST:event_TextQuantityKeyPressed

    private void CheckAtQuantityFieldBeforeUpdateWithAvailableQuantity() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, AvailableQuantity;
            int SelectedRow = tableIngredientRawItems.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float TransferQuantity = Float.parseFloat(TextQuantity.getText());

            if (TransferQuantity > 0) {
                try {
                    String ItemCode = tableIngredientRawItems.getValueAt(SelectedRow, 0).toString();
                    ResultSet RSETAvaItems;
                    java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                    RSETAvaItems = stmtGRNItems.executeQuery(ItemQuery);
                    if (RSETAvaItems.next()) {
                        AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                        if (AvailableQuantity >= TransferQuantity) {
                            Amount = PurchasePrice * TransferQuantity;
                            TextAmount.setText("" + roundTwoDecimals(Amount));
                            ButtonAddSelected.requestFocus();
                        } else if (AvailableQuantity < TransferQuantity) {
                            JOptionPane.showMessageDialog(this, "Requesting quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                            TextQuantity.requestFocus();
                        }
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                } catch (HeadlessException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (TransferQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
            }

        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void CheckAtQuantityFieldBeforeUpdateWithTransactionQuantity() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, AvailableQuantity;
            int SelectedRow = tableMRNItem.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float TransferQuantity = Float.parseFloat(TextQuantity.getText());

            if (TransferQuantity > 0) {
                try {
                    String ItemCode = tableMRNItem.getValueAt(SelectedRow, 0).toString();
                    ResultSet RSETAvaItems;
                    java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                    RSETAvaItems = stmtGRNItems.executeQuery(ItemQuery);
                    if (RSETAvaItems.next()) {
                        AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                        if (AvailableQuantity >= TransferQuantity) {
                            Amount = PurchasePrice * TransferQuantity;
                            TextAmount.setText("" + roundTwoDecimals(Amount));
                            buttonUpdate.requestFocus();
                        } else if (AvailableQuantity < TransferQuantity) {
                            JOptionPane.showMessageDialog(this, "Requesting quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                            TextQuantity.requestFocus();
                        }
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                } catch (HeadlessException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (TransferQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
            }

        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void textRequestedByKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRequestedByKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!textRequestedBy.getText().isEmpty()) {
                txtSearch.requestFocus();
            }
        }
    }//GEN-LAST:event_textRequestedByKeyPressed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tableIngredientRawItems.requestFocus();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        materialRequisitionNoteForProItems.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtOtherChargersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherChargersFocusGained
        txtOtherChargers.selectAll();
    }//GEN-LAST:event_txtOtherChargersFocusGained

    private void buttonWriteNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWriteNotesActionPerformed
        String TransactionID = txtMRNID.getText();
        if (!TransactionID.equals("")) {
            new WriteNotesCommon(this).setVisible(true);
        } else if (TransactionID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the Material Requisition Note. After that you can write your notes.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonWriteNotesActionPerformed

    private void cmbTakeFromDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTakeFromDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (cmbTakeFromDepartment.getSelectedIndex() != 0) {
                textRequestedBy.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbTakeFromDepartmentKeyPressed

    private void cmbTakeFromDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbTakeFromDepartmentPopupMenuWillBecomeInvisible
        if (cmbTakeFromDepartment.getSelectedIndex() != 0) {
            textRequestedBy.requestFocus();
        }
    }//GEN-LAST:event_cmbTakeFromDepartmentPopupMenuWillBecomeInvisible

    private void tableProductLevel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductLevel1MouseClicked
        int SelectedRowCount = tableProductLevel1.getSelectedRowCount();
        tableMRNItem.setSelectionMode(0);
        if (SelectedRowCount == 1) {
            TextQuantity.requestFocus();
//            String PurchasePrice = tableIngredientRawItems.getValueAt(tableIngredientRawItems.getSelectedRow(), 3).toString();
//            String Quantity = tableIngredientRawItems.getValueAt(tableIngredientRawItems.getSelectedRow(), 4).toString();
//            TextPurchasePrice.setText(PurchasePrice);
//            TextQuantity.setText(Quantity);
            loadIngredientItem();
        }
    }//GEN-LAST:event_tableProductLevel1MouseClicked

    private void comboBoxJobsToRequestPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxJobsToRequestPopupMenuWillBecomeInvisible
        
    }//GEN-LAST:event_comboBoxJobsToRequestPopupMenuWillBecomeInvisible

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        int selectedIndexOfCombo = comboBoxJobsToRequest.getSelectedIndex();
        if(selectedIndexOfCombo == 0){
            
        }else if(selectedIndexOfCombo != 0){
            RefreshForJobSearch();
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void RefreshForJobSearch(){
        int x = JOptionPane.showConfirmDialog(this, "Chaning the job will refresh the whole window. Are you sure to change?", "Change", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            rBtnCode.setSelected(true);
            LoadSystemDate();
            LoadTaxesToLables();
            LoadRequestFromToCombo();

            buttonSave.setEnabled(false);
            textRequestedBy.setText("");

            txtTotalNoTax.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            txtSearch.setText("");

            TextPurchasePrice.setText("0.00");
            TextQuantity.setText("0.000");
            TextAmount.setText("0.00");
            txtMRNID.setText("");
            btnCalculate.setEnabled(true);
            
            model_MRNItemTable.setRowCount(0);
            model_IngredientItemTable.setRowCount(0);
            model_productLevel1Items.setRowCount(0);
            
            cmbTakeFromDepartment.requestFocus();
            textNumbersInAvailable.setText("0");
            textNumbersInTransaction.setText("0");
            
            rBtnCode.setEnabled(false);
            rBtnCode.setEnabled(false);
            cmbTakeFromDepartment.setEnabled(false);
            txtSearch.setEnabled(false);
        }
    }
    
    private void loadIngredientItem() {
        String Code, Name, UnitCode;

        Code = tableProductLevel1.getValueAt(tableProductLevel1.getSelectedRow(), 0).toString();
        UnitCode = tableProductLevel1.getValueAt(tableProductLevel1.getSelectedRow(), 2).toString();

        int rowCount = 0;

        try {
            ResultSet resetForIngredientItems;
            Statement stmtForIngredientItems;
            String query;
            query = "SELECT\n"
                    + "     ProductLevel1.\"PL1_ITEM_CODE\" AS ProductLevel1_PL1_ITEM_CODE,\n"
                    + "     ProductLevel1.\"PL1_ITEM_NAME\" AS ProductLevel1_PL1_ITEM_NAME,\n"
                    + "     ProductLevel1.\"PL1_ITEM_PRINT_NAME\" AS ProductLevel1_PL1_ITEM_PRINT_NAME,\n"
                    + "     ProductLevel1.\"UnitCode\" AS ProductLevel1_UnitCode,\n"
                    + "     ProductLevel1.\"VISIBILITY\" AS ProductLevel1_VISIBILITY,\n"
                    + "     ProductLevel1RawItems.\"PL1_ITEM_CODE\" AS ProductLevel1RawItems_PL1_ITEM_CODE,\n"
                    + "     ProductLevel1RawItems.\"PL1_ITEM_QUANTITY\" AS ProductLevel1RawItems_PL1_ITEM_QUANTITY,\n"
                    + "     ProductLevel1RawItems.\"ItemCode\" AS ProductLevel1RawItems_ItemCode,\n"
                    + "     ProductLevel1RawItems.\"QUANTITY\" AS ProductLevel1RawItems_QUANTITY,\n"
                    + "     SIUnits.\"UnitName\" AS SIUnits_UnitName,\n"
                    + "     SIUnits.\"PurchaseMeasurement\" AS SIUnits_PurchaseMeasurement,\n"
                    + "     SIUnits.\"IssueMeasurement\" AS SIUnits_IssueMeasurement,\n"
                    + "     SIUnits.\"BaseUnitCode\" AS SIUnits_BaseUnitCode,\n"
                    + "     Items.\"ItemName\" AS Items_ItemName,\n"
                    + "     Items.\"UnitPurchase\" AS Items_UnitPurchase,\n"
                    + "     Items.\"PurchasePrice\" AS Items_PurchasePrice,\n"
                    + "     Items.\"Quantity\" AS Items_Quantity,\n"
                    + "     Items.\"SupplierCode\" AS Items_SupplierCode\n"
                    + "FROM\n"
                    + "     \"dbo\".\"ProductLevel1RawItems\" ProductLevel1RawItems INNER JOIN \"dbo\".\"ProductLevel1\" ProductLevel1 ON ProductLevel1RawItems.\"PL1_ITEM_CODE\" = ProductLevel1.\"PL1_ITEM_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"SIUnits\" SIUnits ON ProductLevel1.\"UnitCode\" = SIUnits.\"UnitCode\"\n"
                    + "     INNER JOIN \"dbo\".\"Items\" Items ON ProductLevel1RawItems.\"ItemCode\" = Items.\"ItemCode\"\n"
                    + "WHERE\n"
                    + "     ProductLevel1.\"PL1_ITEM_CODE\" = '" + Code + "'";
            stmtForIngredientItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            resetForIngredientItems = stmtForIngredientItems.executeQuery(query);
            model_IngredientItemTable.setRowCount(0);

            while (resetForIngredientItems.next()) {
                model_IngredientItemTable.addRow(new Object[model_IngredientItemTable.getColumnCount()]);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("ProductLevel1RawItems_ItemCode"), rowCount, 0);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("Items_ItemName"), rowCount, 1);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("Items_UnitPurchase"), rowCount, 2);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("Items_PurchasePrice"), rowCount, 3);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("Items_Quantity"), rowCount, 4);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("ProductLevel1RawItems_QUANTITY"), rowCount, 5);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("Items_SupplierCode"), rowCount, 6);
                rowCount++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void countItemsInTransactionTable() {
        textNumbersInTransaction.setText(model_MRNItemTable.getRowCount() + "");
    }

    private void countItemsInAvailableItemsTable() {
        textNumbersInAvailable.setText(model_IngredientItemTable.getRowCount() + "");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JPanel PanelGRN;
    private javax.swing.JFormattedTextField TextAmount;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JFormattedTextField TextQuantity;
    private javax.swing.JLabel backgroundCornerLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonRefresh;
    public static javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonView;
    private javax.swing.JButton buttonWriteNotes;
    private javax.swing.JComboBox cmbTakeFromDepartment;
    private javax.swing.JComboBox comboBoxJobsToRequest;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lableOtherCharges;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_category6;
    private javax.swing.JLabel lbl_category8;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    public static javax.swing.JPanel panel1;
    private javax.swing.JPanel panelAvailableItems;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTable tableIngredientRawItems;
    public static javax.swing.JTable tableMRNItem;
    private javax.swing.JTable tableProductLevel1;
    private javax.swing.JTextField textDate;
    private javax.swing.JTextField textNumbersInAvailable;
    private javax.swing.JTextField textNumbersInTransaction;
    private javax.swing.JTextField textRequestedBy;
    public static javax.swing.JTextField txtMRNID;
    private javax.swing.JFormattedTextField txtOtherChargers;
    private javax.swing.JTextField txtSearch;
    public static javax.swing.JFormattedTextField txtTotalNoTax;
    private javax.swing.JTextField txtTotalWithTax;
    // End of variables declaration//GEN-END:variables
}
