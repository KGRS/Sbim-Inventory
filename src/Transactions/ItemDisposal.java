/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.ItemD;
import OtherDialogs.WriteNotesCommon;
import db.ConnectSql;
import functions.DocNumGenerator;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ravindu
 */
public class ItemDisposal extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_DisposalItemTable, model_AvailableItemTable;
    private final String spliter = "--";
    private DocNumGenerator AutoID;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form ItemDisposal
     */
    public ItemDisposal() {
        initComponents();

        LoadTakeFromToCombo();
        LoadSystemDate();
        LoadTaxesToLables();
        model_DisposalItemTable = (DefaultTableModel) tableDisposalItem.getModel();
        model_AvailableItemTable = (DefaultTableModel) TableAvailableItem.getModel();
        rBtnCode.setSelected(true);
        buttonSave.setEnabled(false);
        
        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround); //cornerBackground
        
        ImageIcon cornerBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/cornerBackground.jpg");
        backgroundCornerLabel.setIcon(cornerBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        ButtonPreview = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        TextDate = new javax.swing.JTextField();
        PanelPurchaseOrder = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableAvailableItem = new javax.swing.JTable();
        PanelGRN = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDisposalItem = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lableOtherCharges = new javax.swing.JLabel();
        lbl_category2 = new javax.swing.JLabel();
        txtOtherChargers = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtTotalWithTax = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        lbl_category6 = new javax.swing.JLabel();
        txtTotalNoTax = new javax.swing.JFormattedTextField();
        lbl_category1 = new javax.swing.JLabel();
        textRequestedBy = new javax.swing.JTextField();
        txtDisposalID = new javax.swing.JTextField();
        lbl_category8 = new javax.swing.JLabel();
        cmbTakeFromBranch = new javax.swing.JComboBox();
        ButtonAddSelected = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        TextQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        textNumbersInTransaction = new javax.swing.JTextField();
        buttonWriteNotes = new javax.swing.JButton();
        textNumbersInAvailable = new javax.swing.JTextField();
        lbl_category9 = new javax.swing.JLabel();
        cmbTakeFromDepartment = new javax.swing.JComboBox();
        backgroundCornerLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setIconifiable(true);
        setTitle("Item Disposal");
        setPreferredSize(new java.awt.Dimension(1097, 688));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSave.setMnemonic('s');
        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, 80, -1));

        buttonRefresh.setMnemonic('d');
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        panel1.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 80, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Disposal Date");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, 90, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText(" Search items to disposal by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 170, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 610, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 60, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 610, 80, -1));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 150, 150, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 600, 350, -1));

        TextDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextDate.setEnabled(false);
        panel1.add(TextDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 120, -1));

        PanelPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Available items"));

        TableAvailableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Available Quantity", "Sub category", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableAvailableItem.getTableHeader().setReorderingAllowed(false);
        TableAvailableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableAvailableItemMouseClicked(evt);
            }
        });
        TableAvailableItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableAvailableItemKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(TableAvailableItem);
        if (TableAvailableItem.getColumnModel().getColumnCount() > 0) {
            TableAvailableItem.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelPurchaseOrderLayout = new javax.swing.GroupLayout(PanelPurchaseOrder);
        PanelPurchaseOrder.setLayout(PanelPurchaseOrderLayout);
        PanelPurchaseOrderLayout.setHorizontalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelPurchaseOrderLayout.setVerticalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPurchaseOrderLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel1.add(PanelPurchaseOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 1050, 160));

        PanelGRN.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Disposal items"));

        tableDisposalItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Disposal Qunatity", "Amount", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDisposalItem.getTableHeader().setReorderingAllowed(false);
        tableDisposalItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDisposalItemMouseClicked(evt);
            }
        });
        tableDisposalItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableDisposalItemKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tableDisposalItem);
        if (tableDisposalItem.getColumnModel().getColumnCount() > 0) {
            tableDisposalItem.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelGRNLayout = new javax.swing.GroupLayout(PanelGRN);
        PanelGRN.setLayout(PanelGRNLayout);
        PanelGRNLayout.setHorizontalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGRNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelGRNLayout.setVerticalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGRNLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel1.add(PanelGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 1050, 190));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lableOtherCharges.setForeground(new java.awt.Color(102, 102, 102));
        lableOtherCharges.setText("Other chargers (Rs)");
        jPanel1.add(lableOtherCharges, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 20));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Total (with other chargers) =");
        jPanel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, 20));

        txtOtherChargers.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtOtherChargers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOtherChargers.setText("0.00");
        txtOtherChargers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOtherChargersFocusGained(evt);
            }
        });
        txtOtherChargers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOtherChargersMouseClicked(evt);
            }
        });
        txtOtherChargers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOtherChargersKeyPressed(evt);
            }
        });
        jPanel1.add(txtOtherChargers, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 160, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 160, -1));

        txtTotalWithTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalWithTax.setText("0.00");
        txtTotalWithTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWithTax.setEnabled(false);
        jPanel1.add(txtTotalWithTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 160, -1));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 100, 20));

        lbl_category6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category6.setText("Total (without other chargers)");
        jPanel1.add(lbl_category6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 160, 20));

        txtTotalNoTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTotalNoTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalNoTax.setText("0.00");
        txtTotalNoTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalNoTax.setEnabled(false);
        jPanel1.add(txtTotalNoTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 10, 160, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 560, 110));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("Permission by");
        panel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 30, 80, 20));

        textRequestedBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textRequestedByKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textRequestedByKeyReleased(evt);
            }
        });
        panel1.add(textRequestedBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 30, 160, -1));

        txtDisposalID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDisposalID.setEnabled(false);
        panel1.add(txtDisposalID, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 610, 110, -1));

        lbl_category8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category8.setText(" Take from (Department)");
        panel1.add(lbl_category8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 120, 20));

        cmbTakeFromBranch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbTakeFromBranch.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbTakeFromBranchPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbTakeFromBranch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbTakeFromBranchKeyPressed(evt);
            }
        });
        panel1.add(cmbTakeFromBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 320, -1));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 360, 120, -1));

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });
        panel1.add(buttonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 110, -1));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextPurchasePrice.setEnabled(false);
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 360, 110, 20));

        TextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        TextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextQuantity.setText("0.000");
        TextQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextQuantityFocusGained(evt);
            }
        });
        TextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextQuantityKeyPressed(evt);
            }
        });
        panel1.add(TextQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 360, 110, 20));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextAmount.setEnabled(false);
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 360, 110, 20));

        textNumbersInTransaction.setEditable(false);
        textNumbersInTransaction.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInTransaction.setText("0");
        textNumbersInTransaction.setEnabled(false);
        panel1.add(textNumbersInTransaction, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 70, -1));

        buttonWriteNotes.setText("Write any notes?");
        buttonWriteNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWriteNotesActionPerformed(evt);
            }
        });
        panel1.add(buttonWriteNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 610, 120, -1));

        textNumbersInAvailable.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInAvailable.setText("0");
        textNumbersInAvailable.setEnabled(false);
        panel1.add(textNumbersInAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 70, -1));

        lbl_category9.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category9.setText(" Take from (Branch)");
        panel1.add(lbl_category9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 120, 20));

        cmbTakeFromDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        panel1.add(cmbTakeFromDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 320, -1));

        backgroundCornerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(backgroundCornerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 470, 230));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 184, 1070, 460));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1081, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadTakeFromToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Branches order by BranchName";
            ResultSet rset = stmt.executeQuery(query);

            cmbTakeFromBranch.removeAllItems();
            cmbTakeFromBranch.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbTakeFromBranch.insertItemAt(rset.getString("BranchName") + "--" + rset.getString("BranchCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbTakeFromBranch.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadSystemDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Statement stmt;
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rset = stmt.executeQuery("SELECT sysDate FROM SystemDate");
            if (rset.next()) {
                TextDate.setText(sdf.format(rset.getDate("sysDate")));
            }
            rset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void LoadTaxesToLables() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select Other From Taxes";
            ResultSet rset = stmt.executeQuery(query);

            if (rset.next()) {
                lableOtherCharges.setText(rset.getString("Other"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        int TransferRowCount = tableDisposalItem.getRowCount();
        String RequestedBy = textRequestedBy.getText();
        if (cmbTakeFromBranch.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Take from is not selected.", "Not selected", JOptionPane.OK_OPTION);
            cmbTakeFromBranch.requestFocus();
        } else if (TextDate.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Something wrong. Date is not loaded. Window will close now. Please restart the application.", "System error", JOptionPane.OK_OPTION);
            this.dispose();
        } else if (RequestedBy.equals("")) {
            JOptionPane.showMessageDialog(this, "Name for permission by is not inserted.", "Empty name", JOptionPane.OK_OPTION);
            textRequestedBy.requestFocus();
        } else if (TransferRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not inserted.", "No items", JOptionPane.OK_OPTION);
        } else if (txtOtherChargers.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Other chargers field is empty.", "Empty field", JOptionPane.OK_OPTION);
            txtOtherChargers.requestFocus();
        } else if (!txtOtherChargers.getText().equals("")) {
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());
            if (OtherChargers < 0) {
                JOptionPane.showMessageDialog(this, "Other Chargers is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtOtherChargers.requestFocus();
            } else {
                int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this Item Disposal?", "Save Item Disposal?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    LoadTime();
                }
            }
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);
            if (resultset.next()) {
                Date = IndexPage.LabelDate.getText();
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                SaveAsDisposal(Time, Date);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void SaveAsDisposal(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode;
        double PurchasePrice, Quantity, Amount;
        double CurrentQuantity, NewQuantity;
        ResultSet RSETCurrentItemQuantity;

        try {
            String TakeFromCode[] = cmbTakeFromBranch.getSelectedItem().toString().split("--");
            String RequestedBy = textRequestedBy.getText();
            String userId = IndexPage.user;
            String ForEmptyFields = "-";

            float TotalWithoutTaxes = roundTwoDecimalsFloat(Float.parseFloat(txtTotalNoTax.getText()));
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());
            float TotalWithTaxes = roundTwoDecimalsFloat(Float.parseFloat(txtTotalWithTax.getText()));

            String Remarks = " ";

            String DisposalID;
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("DISPOSAL");
            DisposalID = AutoID.getDocChar() + AutoID.getDocNumber();
            txtDisposalID.setText(DisposalID);
            DisposalID = txtDisposalID.getText();

            //////////////////////////////////////////////////////////////////
            int RowCount = tableDisposalItem.getRowCount();
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtGRNMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [ItemDisposalMain]\n"
                    + "           ([DisposalID]\n"
                    + "           ,[DisposalDate]\n"
                    + "           ,[DisposalTime]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[TakeFrom]\n"
                    + "           ,[PermissionBy])\n"
                    + "     VALUES\n"
                    + "           ('" + DisposalID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + TakeFromCode[1] + "'\n"
                    + "           ,'" + RequestedBy + "')";
            stmtMain.execute(MainInsertQuery);

            //////////////////////////////////////////////////////////////////
            stmtGRNMain.close();
            stmtMain.close();

            /////////////////////////////////////////////////////////////////////////       
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtCurrentQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtBinCardInsert = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < RowCount; i++) {
                ItemCode = tableDisposalItem.getValueAt(i, 0).toString();
                ItemName = tableDisposalItem.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableDisposalItem.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableDisposalItem.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tableDisposalItem.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tableDisposalItem.getValueAt(i, 5).toString()));

                String ItemInsertQuery = "INSERT INTO [ItemDisposalItems]\n"
                        + "           ([DisposalID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[DisposalDate])\n"
                        + "     VALUES\n"
                        + "           ('" + DisposalID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + OtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + Date + "')";
                stmtItems.execute(ItemInsertQuery);

                String CurrentQtyQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETCurrentItemQuantity = stmtCurrentQty.executeQuery(CurrentQtyQuery);

                if (RSETCurrentItemQuantity.next()) {
                    CurrentQuantity = RSETCurrentItemQuantity.getDouble("Quantity");
                    NewQuantity = roundThreeDecimals(CurrentQuantity - Quantity);
                    String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "' where ItemCode='" + ItemCode + "'";
                    stmtStockUpdate.execute(StockUpdateQuery);

                    String BinCardInsert = "INSERT INTO [BinCard]\n"
                            + "           ([ItemCode]\n"
                            + "           ,[Date]\n"
                            + "           ,[Time]\n"
                            + "           ,[OtherNotes]\n"
                            + "           ,[RecivedID]\n"
                            + "           ,[RecivedFrom]\n"
                            + "           ,[RecivedQuantity]\n"
                            + "           ,[IssuedID]\n"
                            + "           ,[IssuedTo]\n"
                            + "           ,[IssuedQuantity]\n"
                            + "           ,[BalanceQty])\n"
                            + "     VALUES\n"
                            + "           ('" + ItemCode + "'\n"
                            + "           ,'" + Date + "'\n"
                            + "           ,'" + Time + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'0'\n"
                            + "           ,'" + DisposalID + "'\n"
                            + "           ,'" + TakeFromCode[1] + "'\n"
                            + "           ,'" + Quantity + "'\n"
                            + "           ,'" + NewQuantity + "')";
                    stmtBinCardInsert.execute(BinCardInsert);

                }
                //////////////////////////////////////////////////////////////
            }
            stmtCurrentQty.close();
            stmtStockUpdate.close();

            stmtGRNItems.close();
            stmtItems.close();

            JOptionPane.showMessageDialog(this, "Disposal is successfully saved.");
            buttonSave.setEnabled(false);
            btnCalculate.setEnabled(false);

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public float roundTwoDecimalsFloat(float f) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Float.valueOf(twoDForm.format(f));
    }


    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Item Transfer window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            rBtnCode.setSelected(true);
            LoadSystemDate();
            LoadTakeFromToCombo();
            LoadTaxesToLables();

            buttonSave.setEnabled(false);
            textRequestedBy.setText("");

            txtTotalNoTax.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            txtSearch.setText("");

            TextPurchasePrice.setText("0.00");
            TextQuantity.setText("0.000");
            TextAmount.setText("0.00");
            txtDisposalID.setText("");
            btnCalculate.setEnabled(true);

            try {
                int rowi = model_DisposalItemTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_DisposalItemTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowj = model_AvailableItemTable.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_AvailableItemTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            textNumbersInAvailable.setText("0");
            textNumbersInTransaction.setText("0");
//            LoadItems();
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void exit() {
        int GRnRowCount = tableDisposalItem.getRowCount();
        String GRNID = txtDisposalID.getText();
        if (GRnRowCount > 0 && GRNID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this Item Disposal?", "Exit Item Disposal?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (ItemD != null) {
                    ItemD = null;
                }
                this.dispose();
            }
        } else if (GRnRowCount <= 0 && GRNID.isEmpty()) {
            if (ItemD != null) {
                ItemD = null;
            }
            this.dispose();
        } else {
            if (ItemD != null) {
                ItemD = null;
            }
            this.dispose();
        }
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            buttonSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String transactionID = txtDisposalID.getText();
        if (transactionID.isEmpty()) {
            int GRnRowCount = tableDisposalItem.getRowCount();
            if (GRnRowCount <= 0) {
                JOptionPane.showMessageDialog(this, "items are not added to preview.", "Not added", JOptionPane.OK_OPTION);
            } else if (GRnRowCount > 0) {
                int x = JOptionPane.showConfirmDialog(this, "Disposal is still not saved.\nDo you want to view a test preview?", "View a test preview?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    try {
                        java.sql.Statement stmtDelete = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String queryMain = "delete From InvTrTestPreviewMain";
                        stmtDelete.execute(queryMain);
                        String queryItems = "delete From InvTrTestPreviewItems";
                        stmtDelete.execute(queryItems);

                        String Time = "No time";
                        String Date = "No date";
                        SaveForTestPreview(Time, Date);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                }
            }
        } else if (!transactionID.isEmpty()) {
            Preview();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void SaveForTestPreview(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate;
        double PurchasePrice, Quantity, Amount;
        try {
            String OtherID = "Not define";

            String branchCode[] = cmbTakeFromBranch.getSelectedItem().toString().split("--");
            String SupplierInvoice = textRequestedBy.getText();
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = 0;
            float Tax1 = 0;
            float Tax2 = 0;
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = TextDate.getText();
            String PaymentType = "Not define";
            String CreditPeriod = "0";
            String PeriodEndsOn = "Not define";

            String Remarks = "";
            String departmentCode[] = cmbTakeFromDepartment.getSelectedItem().toString().split("--");
            String TransactionID = "Test Preview";

            //////////////////////////////////////////////////////////////////
            int rowCount = tableDisposalItem.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [InvTrTestPreviewMain]\n"
                    + "           ([TransactionID]\n"
                    + "           ,[Date]\n"
                    + "           ,[Time]\n"
                    + "           ,[PreviousID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + TransactionID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + OtherID + "'\n"
                    + "           ,'" + branchCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + departmentCode[1] + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < rowCount; i++) {
                ItemCode = tableDisposalItem.getValueAt(i, 0).toString();
                ItemName = tableDisposalItem.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableDisposalItem.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableDisposalItem.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tableDisposalItem.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tableDisposalItem.getValueAt(i, 5).toString()));
                ExpireDate = tableDisposalItem.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [InvTrTestPreviewItems]\n"
                        + "           ([TransactionID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ExpireDate])\n"
                        + "     VALUES\n"
                        + "           ('" + TransactionID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + ExpireDate + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
            }
            stmtItems.close();
            TestPreview();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void TestPreview() {
        String TransactionID = "Test Preview";
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", TransactionID);
            map.put("Logo", PathToLogo);

            String Report = "TestPreview.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Data Reports/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Preview() {
        String ID = txtDisposalID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("DisposalID", ID);
            map.put("Logo", PathToLogo);

            String Report = "Disposal ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Issue/Disposal/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemCode.equals("")) {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND ItemCode LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND ItemCode LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AvailableItemTable.addRow(new Object[model_AvailableItemTable.getColumnCount()]);
                TableAvailableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableAvailableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableAvailableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableAvailableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableAvailableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableAvailableItem.setValueAt(reset.getString("SubCategoryCode"), rowCount, 5);
                TableAvailableItem.setValueAt(reset.getString("SupplierCode"), rowCount, 6);
                rowCount++;
            }
            reset.close();
            countItemsInAvailableItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemName.equals("")) {
                query = "SELECT * FROM Items WHERE Visibility = 'Yes' AND ItemName LIKE '%" + ItemName + "%'";
            } else {
                query = "SELECT * FROM Items  WHERE Visibility = 'Yes' AND ItemName LIKE '%" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AvailableItemTable.addRow(new Object[model_AvailableItemTable.getColumnCount()]);
                TableAvailableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableAvailableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableAvailableItem.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableAvailableItem.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableAvailableItem.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableAvailableItem.setValueAt(reset.getString("SubCategoryCode"), rowCount, 5);
                TableAvailableItem.setValueAt(reset.getString("SupplierCode"), rowCount, 6);
                rowCount++;
            }
            reset.close();
            countItemsInAvailableItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshTable() {
        try {
            int row = model_AvailableItemTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_AvailableItemTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void TableAvailableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableAvailableItemMouseClicked
        int SelectedRowCount = TableAvailableItem.getSelectedRowCount();
        tableDisposalItem.setSelectionMode(0);
        if (SelectedRowCount == 1) {
            TextQuantity.requestFocus();
            String PurchasePrice = TableAvailableItem.getValueAt(TableAvailableItem.getSelectedRow(), 3).toString();
            String Quantity = TableAvailableItem.getValueAt(TableAvailableItem.getSelectedRow(), 4).toString();
            TextPurchasePrice.setText(PurchasePrice);
            TextQuantity.setText(Quantity);
        }
    }//GEN-LAST:event_TableAvailableItemMouseClicked

    private void tableDisposalItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDisposalItemMouseClicked
        if (evt.getClickCount() == 1) {
            TableAvailableItem.setSelectionMode(0);
            buttonSave.setEnabled(false);
            String PurchasePrice, Quantity, Amount;
            float CheckAmount = Float.parseFloat(tableDisposalItem.getValueAt(tableDisposalItem.getSelectedRow(), 5).toString());
            if (CheckAmount > 0) {
                PurchasePrice = tableDisposalItem.getValueAt(tableDisposalItem.getSelectedRow(), 3).toString();
                Quantity = tableDisposalItem.getValueAt(tableDisposalItem.getSelectedRow(), 4).toString();
                Amount = tableDisposalItem.getValueAt(tableDisposalItem.getSelectedRow(), 5).toString();
                TextPurchasePrice.setText(PurchasePrice);
                TextQuantity.setText(Quantity);
                TextAmount.setText(Amount);
                TextQuantity.requestFocus();
                TextQuantity.selectAll();
            }
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableDisposalItem.getSelectedRow();
                model_DisposalItemTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
                countItemsInTransactionTable();
            }

        }
    }//GEN-LAST:event_tableDisposalItemMouseClicked

    private void tableDisposalItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableDisposalItemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableDisposalItem.getSelectedRow();
                model_DisposalItemTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
            }
        }
    }//GEN-LAST:event_tableDisposalItemKeyPressed

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int GRNTableRowCount = tableDisposalItem.getRowCount();
        for (int i = 0; i < GRNTableRowCount; i++) {
            ItemPriceAmount = Float.parseFloat(tableDisposalItem.getValueAt(i, 5).toString());
            TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
        }
        txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
        txtSearch.setText("");
        txtSearch.requestFocus();
    }

    private void txtOtherChargersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOtherChargersMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtOtherChargersMouseClicked

    private void txtOtherChargersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtherChargersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtOtherChargers.getText();
            if (!EnteredValue.isEmpty()) {
                btnCalculate.requestFocus();
            }
            //            else if(EnteredValue.isEmpty()){
            //                txtDiscount.setText("0.00");
            //                txtTax1.requestFocus();
            //            }
        }
    }//GEN-LAST:event_txtOtherChargersKeyPressed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        float TotalWithTaxes;
        //        String Value1 = txtTotalNoTax.getText().toString();
        String Value5 = txtOtherChargers.getText();

        if (!Value5.isEmpty()) {
            try {
                float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
                float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

                TotalWithTaxes = (TotalWithoutTaxes + OtherChargers);
                txtTotalWithTax.setText(String.valueOf(TotalWithTaxes));
                buttonSave.setEnabled(true);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Value5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void textRequestedByKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRequestedByKeyReleased
        ValidateFields.CheckForOtherFields(textRequestedBy);
    }//GEN-LAST:event_textRequestedByKeyReleased

    private void cmbTakeFromBranchPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbTakeFromBranchPopupMenuWillBecomeInvisible
        if (!cmbTakeFromBranch.getSelectedItem().equals(select)) {
            textRequestedBy.requestFocus();
        }
    }//GEN-LAST:event_cmbTakeFromBranchPopupMenuWillBecomeInvisible

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCountAtAvailable = TableAvailableItem.getSelectedRowCount();
        int SelectedRowCountAtTransaction = tableDisposalItem.getSelectedRowCount();
        if (SelectedRowCountAtAvailable == 1 && SelectedRowCountAtTransaction == 0) {
            FirstCheckBeforeAddToDisposalTableWithAvailableQuantity();
        } else if (SelectedRowCountAtAvailable == 0 && SelectedRowCountAtTransaction == 1) {
            JOptionPane.showMessageDialog(this, "Please press the update button.", "Press update.", JOptionPane.OK_OPTION);
            buttonUpdate.requestFocus();
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void FirstCheckBeforeAddToDisposalTableWithAvailableQuantity() {
        buttonSave.setEnabled(false);
        int SelectedRowCount = TableAvailableItem.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String AddToGRNItem = TableAvailableItem.getValueAt(TableAvailableItem.getSelectedRow(), 0).toString();
            Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(AddToGRNItem);
            if ((Boolean) CheckItemAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
            } else {
                CheckBeforeAddToTransactionTable();
            }
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }

    protected Object[] CheckItemAlreadyAdded(String ItemFromAddToGRN) {
        int rowCount = model_DisposalItemTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String GRNTableItemCode = model_DisposalItemTable.getValueAt(i, 0).toString();
            if (ItemFromAddToGRN.equals(GRNTableItemCode)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void CheckBeforeAddToTransactionTable() {
        int getSelectedRowAtGRN = TableAvailableItem.getSelectedRow();
        try {
            float AvailableQuantity = Float.parseFloat(TableAvailableItem.getValueAt(getSelectedRowAtGRN, 4).toString());
            float Quantity = Float.parseFloat(TextQuantity.getText());

            if (AvailableQuantity > 0 && AvailableQuantity >= Quantity) {
                AddToTransferTable();
            } else if (AvailableQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity is not enough to dispose.", "Not enough.", JOptionPane.OK_OPTION);
            } else if (AvailableQuantity < Quantity) {
                JOptionPane.showMessageDialog(this, "Disposal quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
            }

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void AddToTransferTable() {
        String ItemCode, ItemName, PurchaseUnitCode, Supplier;
        double PurchasePrice, Quantity, Amount;
        int getSelectedRowAtGRN = TableAvailableItem.getSelectedRow();
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            try {
                ItemCode = TableAvailableItem.getValueAt(getSelectedRowAtGRN, 0).toString();
                ItemName = TableAvailableItem.getValueAt(getSelectedRowAtGRN, 1).toString();
                PurchaseUnitCode = TableAvailableItem.getValueAt(getSelectedRowAtGRN, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TextPurchasePrice.getText()));
                Quantity = roundThreeDecimals(Double.parseDouble(TextQuantity.getText()));
                Amount = Quantity * PurchasePrice;
                Supplier = TableAvailableItem.getValueAt(getSelectedRowAtGRN, 6).toString();

                if (Quantity > 0) {
                    model_DisposalItemTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, Quantity, Amount, Supplier});
                    CalculateAmountWithOutTax();
                    countItemsInTransactionTable();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
                }

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }


    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        int SelectedRowCountAtAvailable = TableAvailableItem.getSelectedRowCount();
        int SelectedRowCountAtTransaction = tableDisposalItem.getSelectedRowCount();
        if (SelectedRowCountAtAvailable == 1 && SelectedRowCountAtTransaction == 0) {
            JOptionPane.showMessageDialog(this, "Please press the Add selected button.", "Press Add selected.", JOptionPane.OK_OPTION);
            ButtonAddSelected.requestFocus();
        } else if (SelectedRowCountAtAvailable == 0 && SelectedRowCountAtTransaction == 1) {
            FirstCheckAtUpdateButtonBeforeUpdateWithTransactionQuantity();
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void FirstCheckAtUpdateButtonBeforeUpdateWithTransactionQuantity() {
        buttonSave.setEnabled(false);
        int SelectedRowCount = tableDisposalItem.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(TextQuantity.getText());
                float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {
                    CheckAtUpdateButtonBeforeUpdate();
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }

    private void CheckAtUpdateButtonBeforeUpdate() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            String ItemCode;
            float AvailableQuantity;
            int getSelectedRowAtTransactionTable = tableDisposalItem.getSelectedRow();
            try {
                ItemCode = tableDisposalItem.getValueAt(getSelectedRowAtTransactionTable, 0).toString();
                ResultSet RSETAvaItems;
                java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETAvaItems = stmtItems.executeQuery(ItemQuery);
                if (RSETAvaItems.next()) {
                    AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                    float Quantity = Float.parseFloat(TextQuantity.getText());
                    if (AvailableQuantity > 0 && AvailableQuantity >= Quantity) {
                        UpdateToReturnTable();
                    } else if (AvailableQuantity <= 0) {
                        JOptionPane.showMessageDialog(this, "Quantity is not enough to disposal.", "Not enough.", JOptionPane.OK_OPTION);
                    } else if (AvailableQuantity < Quantity) {
                        JOptionPane.showMessageDialog(this, "Disposal quantity should be less than or equal to the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                    }
                }
                stmtItems.close();
                RSETAvaItems.close();
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                Logger.getLogger(ItemTransferBranchWise.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void UpdateToReturnTable() {
        int SelectedRow = tableDisposalItem.getSelectedRow();
        double PurchasePrice = Double.parseDouble(TextPurchasePrice.getText());
        double Quantity = Double.parseDouble(TextQuantity.getText());
//        float Amount = Float.parseFloat(TextAmount.getText().toString());
        double Amount = roundTwoDecimals(PurchasePrice * Quantity);

        tableDisposalItem.setValueAt(PurchasePrice, SelectedRow, 3);
        tableDisposalItem.setValueAt(Quantity, SelectedRow, 4);
        tableDisposalItem.setValueAt(Amount, SelectedRow, 5);
        CalculateAmountWithOutTax();
    }


    private void TextQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextQuantityFocusGained
        TextQuantity.selectAll();
    }//GEN-LAST:event_TextQuantityFocusGained

    private void TextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int SelectedRowCountAtAvailable = TableAvailableItem.getSelectedRowCount();
            int SelectedRowCountAtTransaction = tableDisposalItem.getSelectedRowCount();
            if (SelectedRowCountAtAvailable == 1 && SelectedRowCountAtTransaction == 0) {
                CheckAtQuantityFieldBeforeUpdateWithAvailableQuantity();
            } else if (SelectedRowCountAtAvailable == 0 && SelectedRowCountAtTransaction == 1) {
                CheckAtQuantityFieldBeforeUpdateWithTransactionQuantity();
            }
        }
    }//GEN-LAST:event_TextQuantityKeyPressed

    private void CheckAtQuantityFieldBeforeUpdateWithAvailableQuantity() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, AvailableQuantity;
            int SelectedRow = TableAvailableItem.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float TransferQuantity = Float.parseFloat(TextQuantity.getText());

            if (TransferQuantity > 0) {
                try {
                    String ItemCode = TableAvailableItem.getValueAt(SelectedRow, 0).toString();
                    ResultSet RSETAvaItems;
                    java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                    RSETAvaItems = stmtGRNItems.executeQuery(ItemQuery);
                    if (RSETAvaItems.next()) {
                        AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                        if (AvailableQuantity >= TransferQuantity) {
                            Amount = PurchasePrice * TransferQuantity;
                            TextAmount.setText("" + roundTwoDecimals(Amount));
                            ButtonAddSelected.requestFocus();
                        } else if (AvailableQuantity < TransferQuantity) {
                            JOptionPane.showMessageDialog(this, "Disposal quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                            TextQuantity.requestFocus();
                        }
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                } catch (HeadlessException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (TransferQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
            }

        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void CheckAtQuantityFieldBeforeUpdateWithTransactionQuantity() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, AvailableQuantity;
            int SelectedRow = tableDisposalItem.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float TransferQuantity = Float.parseFloat(TextQuantity.getText());

            if (TransferQuantity > 0) {
                try {
                    String ItemCode = tableDisposalItem.getValueAt(SelectedRow, 0).toString();
                    ResultSet RSETAvaItems;
                    java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                    RSETAvaItems = stmtGRNItems.executeQuery(ItemQuery);
                    if (RSETAvaItems.next()) {
                        AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                        if (AvailableQuantity >= TransferQuantity) {
                            Amount = PurchasePrice * TransferQuantity;
                            TextAmount.setText("" + roundTwoDecimals(Amount));
                            ButtonAddSelected.requestFocus();
                        } else if (AvailableQuantity < TransferQuantity) {
                            JOptionPane.showMessageDialog(this, "Disposal quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                            TextQuantity.requestFocus();
                        }
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                } catch (HeadlessException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (TransferQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
            }

        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void cmbTakeFromBranchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTakeFromBranchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!cmbTakeFromBranch.getSelectedItem().equals(select)) {
                textRequestedBy.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbTakeFromBranchKeyPressed

    private void textRequestedByKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRequestedByKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!textRequestedBy.getText().isEmpty()) {
                txtSearch.requestFocus();
            }
        }
    }//GEN-LAST:event_textRequestedByKeyPressed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            TableAvailableItem.requestFocus();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void TableAvailableItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableAvailableItemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int SelectedRowCount = TableAvailableItem.getSelectedRowCount();
            if (SelectedRowCount == 1) {
                TextQuantity.requestFocus();
                String PurchasePrice = TableAvailableItem.getValueAt(TableAvailableItem.getSelectedRow(), 3).toString();
                String Quantity = TableAvailableItem.getValueAt(TableAvailableItem.getSelectedRow(), 4).toString();
                TextPurchasePrice.setText(PurchasePrice);
                TextQuantity.setText(Quantity);
            }
        }
    }//GEN-LAST:event_TableAvailableItemKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        ItemD.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtOtherChargersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherChargersFocusGained
        txtOtherChargers.selectAll();
    }//GEN-LAST:event_txtOtherChargersFocusGained

    private void buttonWriteNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWriteNotesActionPerformed
        String TransactionID = txtDisposalID.getText();
        if (!TransactionID.equals("")) {
            new WriteNotesCommon(this).setVisible(true);
        } else if (TransactionID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the Item Disposal. After that you can write your notes.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonWriteNotesActionPerformed

    private void countItemsInTransactionTable() {
//        DefaultTableModel model_ = null;
//        model_DisposalItemTable = (DefaultTableModel) TableDisposalItem.getModel();
        textNumbersInTransaction.setText(model_DisposalItemTable.getRowCount() + "");
    }

    private void countItemsInAvailableItemsTable() {
//        DefaultTableModel model_ = null;
//        model_DisposalItemTable = (DefaultTableModel) TableDisposalItem.getModel();
        textNumbersInAvailable.setText(model_AvailableItemTable.getRowCount() + "");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JPanel PanelGRN;
    private javax.swing.JPanel PanelPurchaseOrder;
    private javax.swing.JTable TableAvailableItem;
    private javax.swing.JFormattedTextField TextAmount;
    private javax.swing.JTextField TextDate;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JFormattedTextField TextQuantity;
    private javax.swing.JLabel backgroundCornerLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonRefresh;
    public static javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonWriteNotes;
    private javax.swing.JComboBox cmbTakeFromBranch;
    private javax.swing.JComboBox cmbTakeFromDepartment;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lableOtherCharges;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_category6;
    private javax.swing.JLabel lbl_category8;
    private javax.swing.JLabel lbl_category9;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    public static javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    public static javax.swing.JTable tableDisposalItem;
    private javax.swing.JTextField textNumbersInAvailable;
    private javax.swing.JTextField textNumbersInTransaction;
    private javax.swing.JTextField textRequestedBy;
    public static javax.swing.JTextField txtDisposalID;
    private javax.swing.JFormattedTextField txtOtherChargers;
    private javax.swing.JTextField txtSearch;
    public static javax.swing.JFormattedTextField txtTotalNoTax;
    private javax.swing.JTextField txtTotalWithTax;
    // End of variables declaration//GEN-END:variables
}
