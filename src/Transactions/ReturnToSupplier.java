/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.RetToSup;
import OtherDialogs.WriteNotesCommon;
import db.ConnectSql;
import functions.DocNumGenerator;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ravindu
 */
public class ReturnToSupplier extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_GRNTable, model_ReturnTable, model_SearchTable;
    private final String spliter = "--";
    private DocNumGenerator AutoID;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form ReturnToSupplier
     */
    public ReturnToSupplier() {
        initComponents();
        LoadSystemDate();
        LoadSuppliersToCombo();
        LoadTaxesToLables();

        model_ReturnTable = (DefaultTableModel) TableReturnItems.getModel();
        model_GRNTable = (DefaultTableModel) tableGRN.getModel();
        model_SearchTable = (DefaultTableModel) TableSearch.getModel();
        buttonSave.setEnabled(false);
        
        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround); //cornerBackground
        
        ImageIcon cornerBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/cornerBackground.jpg");
        backgroundCornerLabel.setIcon(cornerBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        ButtonPreview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSearch = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        PanelGRN = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableReturnItems = new javax.swing.JTable();
        ButtonAddSelected = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtTotalNoTax = new javax.swing.JFormattedTextField();
        txtDiscount = new javax.swing.JFormattedTextField();
        txtTax1 = new javax.swing.JFormattedTextField();
        lbl_category2 = new javax.swing.JLabel();
        lbl_category3 = new javax.swing.JLabel();
        txtTax2 = new javax.swing.JFormattedTextField();
        txtOtherChargers = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtTotalWithTax = new javax.swing.JTextField();
        lbl_category6 = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        TextDate = new javax.swing.JTextField();
        TextInvoiceNum = new javax.swing.JTextField();
        lbl_category1 = new javax.swing.JLabel();
        CheckBoxAddDTO = new javax.swing.JCheckBox();
        lableTax2 = new javax.swing.JLabel();
        lableTax1 = new javax.swing.JLabel();
        lableOtherCharges = new javax.swing.JLabel();
        TextGRNID = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        ButtonAddToTable = new javax.swing.JButton();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        TextQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        buttonUpdate = new javax.swing.JButton();
        cmbSupplier = new javax.swing.JComboBox();
        txtReturnID = new javax.swing.JTextField();
        PanelPurchaseOrder = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableGRN = new javax.swing.JTable();
        CalendarButtonStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        CalendarButtonEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        ButtonView = new javax.swing.JButton();
        lbl_category8 = new javax.swing.JLabel();
        textNumbersInReturn = new javax.swing.JTextField();
        buttonWriteNotes = new javax.swing.JButton();
        ButtonAddAll = new javax.swing.JButton();
        textNumbersInGRN = new javax.swing.JTextField();
        textNumberTransactions = new javax.swing.JTextField();
        backgroundCornerLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setIconifiable(true);
        setTitle("Return To Supplier (Item code wise)");
        setPreferredSize(new java.awt.Dimension(1109, 674));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSave.setMnemonic('s');
        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, 80, -1));

        buttonRefresh.setMnemonic('d');
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        panel1.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 80, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText(" Date range");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 100, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 610, 80, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 610, 80, -1));

        TableSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN number", "GRN Date", "Purchase order", "Supplier invoice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableSearch.getTableHeader().setReorderingAllowed(false);
        TableSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableSearch);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 110));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 600, 350, -1));

        PanelGRN.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Return items"));

        TableReturnItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Return Qunatity", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableReturnItems.getTableHeader().setReorderingAllowed(false);
        TableReturnItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableReturnItemsMouseClicked(evt);
            }
        });
        TableReturnItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableReturnItemsKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(TableReturnItems);
        if (TableReturnItems.getColumnModel().getColumnCount() > 0) {
            TableReturnItems.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelGRNLayout = new javax.swing.GroupLayout(PanelGRN);
        PanelGRN.setLayout(PanelGRNLayout);
        PanelGRNLayout.setHorizontalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGRNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelGRNLayout.setVerticalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGRNLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel1.add(PanelGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 1050, 150));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 400, 120, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtTotalNoTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTotalNoTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalNoTax.setText("0.00");
        txtTotalNoTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalNoTax.setEnabled(false);
        jPanel1.add(txtTotalNoTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 10, 160, -1));

        txtDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("0.00");
        txtDiscount.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtDiscount.setEnabled(false);
        jPanel1.add(txtDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 40, 160, -1));

        txtTax1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTax1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTax1.setText("0.00");
        txtTax1.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtTax1.setEnabled(false);
        jPanel1.add(txtTax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 70, 160, -1));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Total (with taxes) =");
        jPanel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 120, 20));

        lbl_category3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category3.setText("Discounts (Rs)");
        jPanel1.add(lbl_category3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 20));

        txtTax2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTax2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTax2.setText("0.00");
        txtTax2.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtTax2.setEnabled(false);
        jPanel1.add(txtTax2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 160, -1));

        txtOtherChargers.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtOtherChargers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOtherChargers.setText("0.00");
        txtOtherChargers.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtOtherChargers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOtherChargersFocusGained(evt);
            }
        });
        txtOtherChargers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOtherChargersMouseClicked(evt);
            }
        });
        txtOtherChargers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOtherChargersKeyPressed(evt);
            }
        });
        jPanel1.add(txtOtherChargers, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 160, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 160, -1));

        txtTotalWithTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalWithTax.setText("0.00");
        txtTotalWithTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWithTax.setEnabled(false);
        jPanel1.add(txtTotalWithTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 160, -1));

        lbl_category6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category6.setText("Total (without taxes)");
        jPanel1.add(lbl_category6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 110, 20));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, 100, 20));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("  Return Date");
        jPanel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 110, 20));

        TextDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextDate.setEnabled(false);
        jPanel1.add(TextDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 120, -1));

        TextInvoiceNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextInvoiceNum.setEnabled(false);
        jPanel1.add(TextInvoiceNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 120, -1));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("  Supplier invoice no");
        jPanel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 110, 20));

        CheckBoxAddDTO.setForeground(new java.awt.Color(102, 102, 102));
        CheckBoxAddDTO.setText("Add discout, taxes and other chargers");
        CheckBoxAddDTO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxAddDTOActionPerformed(evt);
            }
        });
        jPanel1.add(CheckBoxAddDTO, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 240, -1));

        lableTax2.setForeground(new java.awt.Color(102, 102, 102));
        lableTax2.setText("Tax 2 (Rs)");
        jPanel1.add(lableTax2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 110, 20));

        lableTax1.setForeground(new java.awt.Color(102, 102, 102));
        lableTax1.setText("Tax 1 (Rs)");
        jPanel1.add(lableTax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 110, 20));

        lableOtherCharges.setForeground(new java.awt.Color(102, 102, 102));
        lableOtherCharges.setText("Other chargers (Rs)");
        jPanel1.add(lableOtherCharges, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 110, 20));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 560, 220));

        TextGRNID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextGRNID.setEnabled(false);
        panel1.add(TextGRNID, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, 110, -1));

        jButton4.setText("Preview GRN");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        panel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, 110, -1));

        ButtonAddToTable.setText("Add to GRN items");
        ButtonAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddToTableActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 230, 120, -1));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextPurchasePrice.setEnabled(false);
        TextPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPurchasePriceKeyPressed(evt);
            }
        });
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 400, 110, -1));

        TextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        TextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextQuantity.setText("0.000");
        TextQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextQuantityFocusGained(evt);
            }
        });
        TextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextQuantityKeyPressed(evt);
            }
        });
        panel1.add(TextQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 400, 110, -1));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextAmount.setEnabled(false);
        TextAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAmountKeyPressed(evt);
            }
        });
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 400, 110, -1));

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });
        panel1.add(buttonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, 110, -1));

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSupplier.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbSupplierPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(cmbSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 330, -1));

        txtReturnID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtReturnID.setEnabled(false);
        panel1.add(txtReturnID, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 610, 110, -1));

        PanelPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "GRN items"));

        tableGRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "GRN Quantity", "Available Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGRN.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableGRN);
        if (tableGRN.getColumnModel().getColumnCount() > 0) {
            tableGRN.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelPurchaseOrderLayout = new javax.swing.GroupLayout(PanelPurchaseOrder);
        PanelPurchaseOrder.setLayout(PanelPurchaseOrderLayout);
        PanelPurchaseOrderLayout.setHorizontalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelPurchaseOrderLayout.setVerticalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        panel1.add(PanelPurchaseOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 1050, 120));

        CalendarButtonStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 120, 20));

        CalendarButtonEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 120, 20));

        ButtonView.setText("View");
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });
        panel1.add(ButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, 70, 20));

        lbl_category8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category8.setText(" Supplier");
        panel1.add(lbl_category8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 80, 20));

        textNumbersInReturn.setEditable(false);
        textNumbersInReturn.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInReturn.setText("0");
        textNumbersInReturn.setEnabled(false);
        panel1.add(textNumbersInReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 70, -1));

        buttonWriteNotes.setText("Write any notes?");
        buttonWriteNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWriteNotesActionPerformed(evt);
            }
        });
        panel1.add(buttonWriteNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, 120, -1));

        ButtonAddAll.setText("Add all");
        ButtonAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddAllActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 110, -1));

        textNumbersInGRN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInGRN.setText("0");
        textNumbersInGRN.setEnabled(false);
        panel1.add(textNumbersInGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 70, -1));

        textNumberTransactions.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumberTransactions.setEnabled(false);
        panel1.add(textNumberTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 70, 20));

        backgroundCornerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(backgroundCornerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 470, 230));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 84, 1070, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1093, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadSystemDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Statement stmt;
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rset = stmt.executeQuery("SELECT sysDate FROM SystemDate");
            if (rset.next()) {
                TextDate.setText(sdf.format(rset.getDate("sysDate")));
            }
            rset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void LoadSuppliersToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Suppliers order by SupplierName";
            ResultSet rset = stmt.executeQuery(query);

            cmbSupplier.removeAllItems();
            cmbSupplier.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSupplier.insertItemAt(rset.getString("SupplierName") + "--" + rset.getString("SupplierCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbSupplier.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void LoadTaxesToLables() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Taxes";
            ResultSet rset = stmt.executeQuery(query);

            if (rset.next()) {
                lableTax1.setText(rset.getString("Tax1"));
                lableTax2.setText(rset.getString("Tax2"));
                lableOtherCharges.setText(rset.getString("Other"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        int ReturnRowCount = TableReturnItems.getRowCount();
        String SupplierInvoice = TextInvoiceNum.getText();
        if (cmbSupplier.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Supplier is not selected.", "No supplier", JOptionPane.OK_OPTION);
            cmbSupplier.requestFocus();
        } else if (TextDate.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Something wrong. Date is not loaded. Return To Supplier will close now. Please restart the application.", "System error", JOptionPane.OK_OPTION);
            this.dispose();
        } else if (SupplierInvoice.equals("")) {
            JOptionPane.showMessageDialog(this, "Supplier's invoice number is not inserted.", "Empty invoice number", JOptionPane.OK_OPTION);
        } else if (ReturnRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not inserted to Return.", "No items", JOptionPane.OK_OPTION);
        } else if (txtDiscount.getText().equals("") || txtTax1.getText().equals("") || txtTax2.getText().equals("") || txtOtherChargers.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Discount or taxes or other chargers fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            txtDiscount.requestFocus();
        } else if (!txtDiscount.getText().equals("") && !txtTax1.getText().equals("") && !txtTax2.getText().equals("") && !txtOtherChargers.getText().equals("")) {
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            if (Discount < 0) {
                JOptionPane.showMessageDialog(this, "Discount is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtDiscount.requestFocus();
            } else if (Tax1 < 0) {
                JOptionPane.showMessageDialog(this, "Tax1 is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtTax1.requestFocus();
            } else if (Tax2 < 0) {
                JOptionPane.showMessageDialog(this, "Tax2 is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtTax2.requestFocus();
            } else if (OtherChargers < 0) {
                JOptionPane.showMessageDialog(this, "Other Chargers is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtOtherChargers.requestFocus();
            } else {
                int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this Return?", "Save Return?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    LoadTime();
                }

            }
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);
            if (resultset.next()) {
                Date = TextDate.getText();
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                SaveAsReturn(Time, Date);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void SaveAsReturn(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode;
        double PurchasePrice, Quantity, Amount;
        double CurrentQuantity, NewQuantity;
        ResultSet RSETCurrentItemQuantity, RSETGRNMain, RSETGRNItems;
        int SelectedRow = TableSearch.getSelectedRow();

        double QuantityAfterReturn, NewGRNItemQuantity, ItemPriceAmountAfterReturn, NewGRNItemPriceAmount, ReduceQuantity, NewGRNReduceQuantity;
        double TotalWithOutTaxesAfterReturn, TotalWithTaxesAfterReturn, NewGRNMainTotalWithOutTaxes, NewGRNMainTotalWithTaxes;

        try {
            String GRNID = TextGRNID.getText();
            String POID = TableSearch.getValueAt(SelectedRow, 2).toString();

            String SupplierCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String SupplierInvoice = TextInvoiceNum.getText();
            String userId = IndexPage.user;
            String ForEmptyFields = "-";

            float TotalWithoutTaxes = roundTwoDecimalsFloat(Float.parseFloat(txtTotalNoTax.getText()));
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());
            float TotalWithTaxes = roundTwoDecimalsFloat(Float.parseFloat(txtTotalWithTax.getText()));

            String Remarks = "";
            String DepartmentsCode = "Store";

            String ReturnID;
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("RETURN");
            ReturnID = AutoID.getDocChar() + AutoID.getDocNumber();
            txtReturnID.setText(ReturnID);
            ReturnID = txtReturnID.getText();

            //////////////////////////////////////////////////////////////////
            int RowCount = TableReturnItems.getRowCount();
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtGRNMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtGRNMainUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [GRNReturnMain]\n"
                    + "           ([ReturnID]\n"
                    + "           ,[GRNID]\n"
                    + "           ,[POID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[ReturnDate]\n"
                    + "           ,[ReturnTime]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + ReturnID + "'\n"
                    + "           ,'" + GRNID + "'\n"
                    + "           ,'" + POID + "'\n"
                    + "           ,'" + SupplierCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + DepartmentsCode + "')";
            stmtMain.execute(MainInsertQuery);

            //////////////////////////////////////////////////////////////////
            String GRNMainQuery = "SELECT TotalWithOutTaxesAfterReturn, TotalWithTaxesAfterReturn FROM GRNMain WHERE GRNID = '" + GRNID + "'";
            RSETGRNMain = stmtGRNMain.executeQuery(GRNMainQuery);

            if (RSETGRNMain.next()) {
                TotalWithOutTaxesAfterReturn = RSETGRNMain.getDouble("TotalWithOutTaxesAfterReturn");
                TotalWithTaxesAfterReturn = RSETGRNMain.getDouble("TotalWithTaxesAfterReturn");
                NewGRNMainTotalWithOutTaxes = roundTwoDecimals(TotalWithOutTaxesAfterReturn - TotalWithoutTaxes);
                NewGRNMainTotalWithTaxes = roundTwoDecimals(TotalWithTaxesAfterReturn - TotalWithTaxes);
                String GRNMainUpdateQuery = "Update GRNMain set TotalWithOutTaxesAfterReturn = '" + NewGRNMainTotalWithOutTaxes + "', "
                        + "TotalWithTaxesAfterReturn = '" + NewGRNMainTotalWithTaxes + "', IsReturn = 'Yes' where GRNID = '" + GRNID + "'";
                stmtGRNMainUpdate.execute(GRNMainUpdateQuery);
            }
            stmtGRNMain.close();
            stmtGRNMainUpdate.close();
            stmtMain.close();

            /////////////////////////////////////////////////////////////////////////       
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtCurrentQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtGRNItemUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtBinCardInsert = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < RowCount; i++) {
                ItemCode = TableReturnItems.getValueAt(i, 0).toString();
                ItemName = TableReturnItems.getValueAt(i, 1).toString();
                PurchaseUnitCode = TableReturnItems.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TableReturnItems.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TableReturnItems.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(TableReturnItems.getValueAt(i, 5).toString()));

                String ItemInsertQuery = "INSERT INTO [GRNReturnItems]\n"
                        + "           ([ReturnID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ReturnDate])\n"
                        + "     VALUES\n"
                        + "           ('" + ReturnID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + Tax1 + "'\n"
                        + "           ,'" + Tax2 + "'\n"
                        + "           ,'" + OtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + Date + "')";
                stmtItems.execute(ItemInsertQuery);

                String CurrentQtyQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETCurrentItemQuantity = stmtCurrentQty.executeQuery(CurrentQtyQuery);

                if (RSETCurrentItemQuantity.next()) {
                    CurrentQuantity = RSETCurrentItemQuantity.getDouble("Quantity");
                    NewQuantity = roundThreeDecimals(CurrentQuantity - Quantity);
                    String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "' where ItemCode='" + ItemCode + "'";
                    stmtStockUpdate.execute(StockUpdateQuery);

                    String BinCardInsert = "INSERT INTO [BinCard]\n"
                            + "           ([ItemCode]\n"
                            + "           ,[Date]\n"
                            + "           ,[Time]\n"
                            + "           ,[OtherNotes]\n"
                            + "           ,[RecivedID]\n"
                            + "           ,[RecivedFrom]\n"
                            + "           ,[RecivedQuantity]\n"
                            + "           ,[IssuedID]\n"
                            + "           ,[IssuedTo]\n"
                            + "           ,[IssuedQuantity]\n"
                            + "           ,[BalanceQty])\n"
                            + "     VALUES\n"
                            + "           ('" + ItemCode + "'\n"
                            + "           ,'" + Date + "'\n"
                            + "           ,'" + Time + "'\n"
                            + "           ,'" + GRNID + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'0'\n"
                            + "           ,'" + ReturnID + "'\n"
                            + "           ,'" + SupplierCode[1] + "'\n"
                            + "           ,'" + Quantity + "'\n"
                            + "           ,'" + NewQuantity + "')";
                    stmtBinCardInsert.execute(BinCardInsert);

                }
                //////////////////////////////////////////////////////////////

                String GRNItemQuery = "SELECT QuantityAfterReturn, ItemPriceAmountAfterReturn, ReduceQuantity FROM GRNItems WHERE GRNID = '" + GRNID + "' AND ItemCode='" + ItemCode + "'";
                RSETGRNItems = stmtGRNItems.executeQuery(GRNItemQuery);

                if (RSETGRNItems.next()) {
                    QuantityAfterReturn = RSETGRNItems.getDouble("QuantityAfterReturn");
                    ItemPriceAmountAfterReturn = RSETGRNItems.getDouble("ItemPriceAmountAfterReturn");
                    ReduceQuantity = RSETGRNItems.getDouble("ReduceQuantity");
                    NewGRNItemQuantity = roundThreeDecimals(QuantityAfterReturn - Quantity);
                    NewGRNItemPriceAmount = roundTwoDecimals(ItemPriceAmountAfterReturn - Amount);
                    NewGRNReduceQuantity = roundThreeDecimals(ReduceQuantity - Quantity);
                    String GRNItemUpdateQuery = "Update GRNItems set QuantityAfterReturn = '" + NewGRNItemQuantity + "', "
                            + "ItemPriceAmountAfterReturn = '" + NewGRNItemPriceAmount + "', ReduceQuantity = '" + NewGRNReduceQuantity + "', IsReturn = 'Yes' where ItemCode='" + ItemCode + "'";
                    stmtGRNItemUpdate.execute(GRNItemUpdateQuery);

                }
            }
            stmtCurrentQty.close();
            stmtStockUpdate.close();

            stmtGRNItems.close();
            stmtGRNItemUpdate.close();

            stmtItems.close();

            JOptionPane.showMessageDialog(this, "Return is successfully saved.");
            buttonSave.setEnabled(false);
            btnCalculate.setEnabled(false);

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

    }

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Return to supplier window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            LoadSystemDate();
            LoadSuppliersToCombo();
            LoadTaxesToLables();

            CalendarButtonStartDate.setEnabled(true);
            CalendarButtonEndDate.setEnabled(true);
            cmbSupplier.setEnabled(true);
            ButtonView.setEnabled(true);
            ButtonAddToTable.setEnabled(true);
            TableSearch.setEnabled(true);
            buttonSave.setEnabled(false);

            TextInvoiceNum.setText("");
            CheckBoxAddDTO.setSelected(false);
            CalendarButtonStartDate.setText("");
            CalendarButtonEndDate.setText("");

            txtTotalNoTax.setText("0.00");
            txtDiscount.setText("0.00");
            txtTax1.setText("0.00");
            txtTax2.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            TextGRNID.setText("");

            TextPurchasePrice.setText("0.00");
            TextQuantity.setText("0.000");
            TextAmount.setText("0.00");
            txtReturnID.setText("");
            btnCalculate.setEnabled(true);

            ButtonAddSelected.setEnabled(true);
            ButtonAddAll.setEnabled(true);

            try {
                int rowi = model_GRNTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_GRNTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

            try {
                int rowj = model_ReturnTable.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_ReturnTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

            try {
                int rowk = model_SearchTable.getRowCount();
                for (int k = 0; k < rowk; k++) {
                    model_SearchTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void exit() {
        int ReturnToSupplierRowCount = TableReturnItems.getRowCount();
        String ReturnID = txtReturnID.getText();
        if (ReturnToSupplierRowCount > 0 && ReturnID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this Return?", "Exit Return To Supplier?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (RetToSup != null) {
                    RetToSup = null;
                }
                this.dispose();
            }
        } else if (ReturnToSupplierRowCount <= 0 && ReturnID.isEmpty()) {
            if (RetToSup != null) {
                RetToSup = null;
            }
            this.dispose();
        } else {
            if (RetToSup != null) {
                RetToSup = null;
            }
            this.dispose();
        }
    }

    private void TableSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSearchMouseClicked
        String GRNID, SupplierInvoice;
        int SelectedRowCount = TableSearch.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            GRNID = TableSearch.getValueAt(TableSearch.getSelectedRow(), 0).toString();
            SupplierInvoice = TableSearch.getValueAt(TableSearch.getSelectedRow(), 3).toString();
            TextGRNID.setText(GRNID);
            TextInvoiceNum.setText(SupplierInvoice);
        }


    }//GEN-LAST:event_TableSearchMouseClicked

    private void TableReturnItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableReturnItemsMouseClicked
        if (evt.getClickCount() == 1) {
            buttonSave.setEnabled(false);
            String PurchasePrice, Quantity, Amount;
            float CheckAmount = Float.parseFloat(TableReturnItems.getValueAt(TableReturnItems.getSelectedRow(), 5).toString());
            if (CheckAmount > 0) {
                PurchasePrice = TableReturnItems.getValueAt(TableReturnItems.getSelectedRow(), 3).toString();
                Quantity = TableReturnItems.getValueAt(TableReturnItems.getSelectedRow(), 4).toString();
                Amount = TableReturnItems.getValueAt(TableReturnItems.getSelectedRow(), 5).toString();
                TextPurchasePrice.setText(PurchasePrice);
                TextQuantity.setText(Quantity);
                TextAmount.setText(Amount);
                TextQuantity.requestFocus();
            }
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = TableReturnItems.getSelectedRow();
                model_ReturnTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
                int getRowCountAtReturn = TableReturnItems.getRowCount();
                textNumbersInReturn.setText(String.valueOf(getRowCountAtReturn));
            }

        }
    }//GEN-LAST:event_TableReturnItemsMouseClicked

    private void TableReturnItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableReturnItemsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = TableReturnItems.getSelectedRow();
                model_GRNTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
            }

        }
    }//GEN-LAST:event_TableReturnItemsKeyPressed

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = tableGRN.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            CheckBeforeAddToReturnTable();
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }

    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void CheckBeforeAddToReturnTable() {
        int getSelectedRowAtGRN = tableGRN.getSelectedRow();
        try {
//            float GRNQuantity = Float.parseFloat(TableGRN.getValueAt(getSelectedRowAtGRN, 4).toString());
            float AvailableQuantity = Float.parseFloat(tableGRN.getValueAt(getSelectedRowAtGRN, 5).toString());

            if (AvailableQuantity > 0) {
                AddToReturnTable();
            } else if (AvailableQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity is not enough to return.", "Not enough.", JOptionPane.OK_OPTION);
            }

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void AddToReturnTable() {
        String ItemCode, ItemName, PurchaseUnitCode;
        double PurchasePrice, availableQuantity, Amount;
        int getSelectedRowAtGRN = tableGRN.getSelectedRow();
        try {
            ItemCode = tableGRN.getValueAt(getSelectedRowAtGRN, 0).toString();
            ItemName = tableGRN.getValueAt(getSelectedRowAtGRN, 1).toString();
            PurchaseUnitCode = tableGRN.getValueAt(getSelectedRowAtGRN, 2).toString();
            PurchasePrice = roundTwoDecimals(Double.parseDouble(tableGRN.getValueAt(getSelectedRowAtGRN, 3).toString()));
            availableQuantity = roundThreeDecimals(Double.parseDouble(tableGRN.getValueAt(getSelectedRowAtGRN, 5).toString()));
            Amount = availableQuantity * PurchasePrice;

            model_ReturnTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, availableQuantity, Amount});
            model_GRNTable.removeRow(getSelectedRowAtGRN);
            ButtonAddAll.setEnabled(false);
            CalculateAmountWithOutTax();
            int getRowCountAtReturn = TableReturnItems.getRowCount();
            textNumbersInReturn.setText(String.valueOf(getRowCountAtReturn));

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        float TotalWithTaxes;
        String Value1 = txtTotalNoTax.getText();
        String Value2 = txtDiscount.getText();
        String Value3 = txtTax1.getText();
        String Value4 = txtTax2.getText();
        String Value5 = txtOtherChargers.getText();

        if (!Value1.isEmpty() && !Value2.isEmpty() && !Value3.isEmpty() && !Value4.isEmpty() && !Value5.isEmpty()) {
            try {
                float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
                float Discount = Float.parseFloat(txtDiscount.getText());
                float Tax1 = Float.parseFloat(txtTax1.getText());
                float Tax2 = Float.parseFloat(txtTax2.getText());
                float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

                TotalWithTaxes = (TotalWithoutTaxes + Tax1 + Tax2 + OtherChargers) - Discount;
                txtTotalWithTax.setText(String.valueOf(TotalWithTaxes));
                buttonSave.setEnabled(true);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }
        } else if (Value1.isEmpty() || Value2.isEmpty() || Value3.isEmpty() || Value4.isEmpty() || Value5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }

//        CreditPeriod();
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void TextQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextQuantityFocusGained
        TextQuantity.selectAll();
    }//GEN-LAST:event_TextQuantityFocusGained

    private void TextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckAtQuantityFieldBeforeUpdate();
        }
    }//GEN-LAST:event_TextQuantityKeyPressed

    private void CheckAtQuantityFieldBeforeUpdate() {
        String GRNID = TextGRNID.getText();
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, ReduceQuantity;
            int SelectedRow = TableReturnItems.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float Quantity = Float.parseFloat(TextQuantity.getText());
            try {
                String ItemCode = TableReturnItems.getValueAt(SelectedRow, 0).toString();
                ResultSet RSETGRNItems;
                java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String GRNItemQuery = "SELECT ReduceQuantity FROM GRNItems WHERE GRNID = '" + GRNID + "' AND ItemCode='" + ItemCode + "'";
                RSETGRNItems = stmtGRNItems.executeQuery(GRNItemQuery);
                if (RSETGRNItems.next()) {
                    ReduceQuantity = RSETGRNItems.getFloat("ReduceQuantity");
                    if (ReduceQuantity >= Quantity) {
                        Amount = PurchasePrice * Quantity;
                        TextAmount.setText("" + roundTwoDecimals(Amount));
                        buttonUpdate.requestFocus();
                    } else if (ReduceQuantity < Quantity) {
                        JOptionPane.showMessageDialog(this, "Quantity you entered is lager than available quantity.", "Lager than available.", JOptionPane.OK_OPTION);
                        TextQuantity.requestFocus();
                    }
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }
        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void TextAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAmountKeyPressed
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            if (!TextAmount.getText().equals("") && !TextQuantity.getText().equals("") && !TextPurchasePrice.getText().equals("")) {
//                float Amount = Float.parseFloat(TextAmount.getText());
//                float PurchasePrice;
//                float Quantity = Float.parseFloat(TextQuantity.getText());
//
//                PurchasePrice = Amount / Quantity;
//                TextPurchasePrice.setText("" + roundTwoDecimals(PurchasePrice));
//            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
//                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
//            }
//        }
    }//GEN-LAST:event_TextAmountKeyPressed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = TableReturnItems.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(TextQuantity.getText());
                float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {
                    CheckAtUpdateButtonBeforeUpdate();
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void CheckAtUpdateButtonBeforeUpdate() {
        String GRNID = TextGRNID.getText();
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, ReduceQuantity;
            int SelectedRow = TableReturnItems.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float Quantity = Float.parseFloat(TextQuantity.getText());
            try {
                String ItemCode = TableReturnItems.getValueAt(SelectedRow, 0).toString();
                ResultSet RSETGRNItems;
                java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String GRNItemQuery = "SELECT ReduceQuantity FROM GRNItems WHERE GRNID = '" + GRNID + "' AND ItemCode='" + ItemCode + "'";
                RSETGRNItems = stmtGRNItems.executeQuery(GRNItemQuery);
                if (RSETGRNItems.next()) {
                    ReduceQuantity = RSETGRNItems.getFloat("ReduceQuantity");
                    if (ReduceQuantity >= Quantity) {
                        Amount = PurchasePrice * Quantity;
                        TextAmount.setText("" + roundTwoDecimals(Amount));
                        UpdateToReturnTable();
                        buttonUpdate.requestFocus();
                    } else if (ReduceQuantity < Quantity) {
                        JOptionPane.showMessageDialog(this, "Quantity is not enough to return.", "Not enough.", JOptionPane.OK_OPTION);
                        TextQuantity.requestFocus();
                    }
                }
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }
        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void UpdateToReturnTable() {
        int SelectedRow = TableReturnItems.getSelectedRow();
        String PurchasePrice = TextPurchasePrice.getText();
        String Quantity = TextQuantity.getText();
        String Amount = TextAmount.getText();

        TableReturnItems.setValueAt(PurchasePrice, SelectedRow, 3);
        TableReturnItems.setValueAt(Quantity, SelectedRow, 4);
        TableReturnItems.setValueAt(Amount, SelectedRow, 5);
        CalculateAmountWithOutTax();
    }

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int ReturnTableRowCount = TableReturnItems.getRowCount();
        if (ReturnTableRowCount > 0) {
            for (int i = 0; i < ReturnTableRowCount; i++) {
                ItemPriceAmount = Float.parseFloat(TableReturnItems.getValueAt(i, 5).toString());
                TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
            }
            txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
        }
    }

    private void cmbSupplierPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbSupplierPopupMenuWillBecomeInvisible
        TextInvoiceNum.requestFocus();
    }//GEN-LAST:event_cmbSupplierPopupMenuWillBecomeInvisible

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void CalendarButtonStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonStartDate.setText(format.format(RecievedDate));
            CalendarButtonEndDate.requestFocus();
        }
    }//GEN-LAST:event_CalendarButtonStartDatePropertyChange

    private void CalendarButtonEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonEndDate.setText(format.format(RecievedDate));
            ButtonView.requestFocus();
        }
    }//GEN-LAST:event_CalendarButtonEndDatePropertyChange

    private void LoadGRNToSearchTable() {
        try {
            String StartDate = CalendarButtonStartDate.getText();
            String EndDate = CalendarButtonEndDate.getText();
            String Supplier[] = cmbSupplier.getSelectedItem().toString().split("--");

            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT GRNID,GRNDate,POID,SupplierInvoice FROM GRNMain where SupplierCode = '" + Supplier[1] + "' and (GRNDate >= '" + StartDate + "' and GRNDate <= '" + EndDate + "') ORDER BY GRNID";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                TableSearch.setValueAt(reset.getString("GRNID"), rowCount, 0);
                TableSearch.setValueAt(reset.getString("GRNDate"), rowCount, 1);
                TableSearch.setValueAt(reset.getString("POID"), rowCount, 2);
                TableSearch.setValueAt(reset.getString("SupplierInvoice"), rowCount, 3);
                rowCount++;
            }
            reset.close();
            textNumberTransactions.setText(String.valueOf(rowCount));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void RefreshSearchTable() {
        try {
            int row = model_SearchTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_SearchTable.removeRow(0);
            }
            LoadGRNToSearchTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
        String StartDate = CalendarButtonStartDate.getText();
        String EndDate = CalendarButtonEndDate.getText();
        String CheckSupplier = cmbSupplier.getSelectedItem().toString();

        if (!StartDate.isEmpty() && !EndDate.isEmpty() && !CheckSupplier.equals(select)) {
            RefreshSearchTable();
        } else if (StartDate.isEmpty() || EndDate.isEmpty() || CheckSupplier.equals(select)) {
            JOptionPane.showMessageDialog(this, "Start date, end date or supplier is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }

    }//GEN-LAST:event_ButtonViewActionPerformed

    private void ButtonAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddToTableActionPerformed
        RefreshGRNTable();

    }//GEN-LAST:event_ButtonAddToTableActionPerformed

    private void RefreshGRNTable() {
        try {
            int row = model_GRNTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_GRNTable.removeRow(0);
            }
            AddToGRNTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void AddToGRNTable() {
        String GRNID = TextGRNID.getText();
        if (!GRNID.isEmpty()) {
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                int rowCount = 0;
                query = "SELECT ItemCode,ItemName,UnitPurchase,PurchasePrice,QuantityAfterReturn,ReduceQuantity FROM GRNItems where GRNID = '" + GRNID + "' ORDER BY ItemName";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                while (reset.next()) {
                    model_GRNTable.addRow(new Object[model_GRNTable.getColumnCount()]);
                    tableGRN.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                    tableGRN.setValueAt(reset.getString("ItemName"), rowCount, 1);
                    tableGRN.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                    tableGRN.setValueAt(reset.getString("PurchasePrice"), rowCount, 3);
                    tableGRN.setValueAt(reset.getString("QuantityAfterReturn"), rowCount, 4);
                    tableGRN.setValueAt(reset.getString("ReduceQuantity"), rowCount, 5);
                    rowCount++;
                }
                reset.close();
                textNumbersInGRN.setText(String.valueOf(rowCount));
                ButtonAddToTable.setEnabled(false);
                cmbSupplier.setEnabled(false);
                CalendarButtonStartDate.setEnabled(false);
                CalendarButtonEndDate.setEnabled(false);
                ButtonView.setEnabled(false);
                TableSearch.setEnabled(false);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

        } else if (GRNID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "GRN is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }
    }

    private void TextPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPurchasePriceKeyPressed
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
//                TextQuantity.requestFocus();
//                TextQuantity.selectAll();
//            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
//                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
//            }
//
//        }
    }//GEN-LAST:event_TextPurchasePriceKeyPressed

    public float roundTwoDecimalsFloat(float f) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Float.valueOf(twoDForm.format(f));
    }

    private void CheckBoxAddDTOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxAddDTOActionPerformed
        if (CheckBoxAddDTO.isSelected()) {
            String GRNID = TextGRNID.getText();
            if (!GRNID.isEmpty()) {
                buttonSave.setEnabled(false);
                try {

                    ResultSet reset;
                    Statement stmt;
                    String query;
                    query = "SELECT Discount,Tax1,Tax2,OtherChargers FROM GRNMain where GRNID = '" + GRNID + "'";
                    stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    reset = stmt.executeQuery(query);

                    if (reset.next()) {
                        float Discount = roundTwoDecimalsFloat(Float.parseFloat(reset.getString("Discount")));
                        float Tax1 = roundTwoDecimalsFloat(Float.parseFloat(reset.getString("Tax1")));
                        float Tax2 = roundTwoDecimalsFloat(Float.parseFloat(reset.getString("Tax2")));
                        float OtherChargers = roundTwoDecimalsFloat(Float.parseFloat(reset.getString("OtherChargers")));

                        txtDiscount.setText("" + (Discount));
                        txtTax1.setText("" + (Tax1));
                        txtTax2.setText("" + (Tax2));
                        txtOtherChargers.setText("" + (OtherChargers));
                    }

                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "please contact for support.");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "please contact for support.");
                }
            } else if (GRNID.isEmpty()) {
                JOptionPane.showMessageDialog(this, "GRN is not selected.", "Not selected", JOptionPane.OK_OPTION);
                CheckBoxAddDTO.setSelected(false);
            }
        } else if (!CheckBoxAddDTO.isSelected()) {
            txtDiscount.setText("0.00");
            txtTax1.setText("0.00");
            txtTax2.setText("0.00");
            txtOtherChargers.setText("0.00");
        }
    }//GEN-LAST:event_CheckBoxAddDTOActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String GRNID = TextGRNID.getText();
        if (GRNID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "GRN id is not selected to preview.", "Not selected", JOptionPane.OK_OPTION);
        } else if (!GRNID.isEmpty()) {
            Preview();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void Preview() {
        String GRNID = TextGRNID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", GRNID);
            map.put("Logo", PathToLogo);

            String Report = "GRN ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/GRN/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String ID = txtReturnID.getText();
        if (ID.isEmpty()) {
            int returnRowCount = TableReturnItems.getRowCount();
            if (returnRowCount <= 0) {
                JOptionPane.showMessageDialog(this, "items are not added to preview.", "Not added", JOptionPane.OK_OPTION);
            } else if (returnRowCount > 0) {
                int x = JOptionPane.showConfirmDialog(this, "Retrun to supplier is still not saved.\nDo you want to view a test preview?", "View a test preview?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    try {
                        java.sql.Statement stmtDelete = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String queryMain = "delete From InvTrTestPreviewMain";
                        stmtDelete.execute(queryMain);
                        String queryItems = "delete From InvTrTestPreviewItems";
                        stmtDelete.execute(queryItems);

                        String Time = "No time";
                        String Date = "No date";
                        SaveForTestPreview(Time, Date);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                }
            }
        } else if (!ID.isEmpty()) {
            PreviewReturnToSupplier();
        }

    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void SaveForTestPreview(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate;
        double PurchasePrice, Quantity, Amount;
        try {
            String OtherID = "Not define";

            String branchCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String SupplierInvoice = "Not define";
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = 0;
            float Tax1 = 0;
            float Tax2 = 0;
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = TextDate.getText();
            String PaymentType = "Not define";
            String CreditPeriod = "0";
            String PeriodEndsOn = "Not define";

            String Remarks = "";
            String departmentCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String TransactionID = "Test Preview";

            //////////////////////////////////////////////////////////////////
            int rowCount = TableReturnItems.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [InvTrTestPreviewMain]\n"
                    + "           ([TransactionID]\n"
                    + "           ,[Date]\n"
                    + "           ,[Time]\n"
                    + "           ,[PreviousID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + TransactionID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + OtherID + "'\n"
                    + "           ,'" + branchCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + departmentCode[1] + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < rowCount; i++) {
                ItemCode = TableReturnItems.getValueAt(i, 0).toString();
                ItemName = TableReturnItems.getValueAt(i, 1).toString();
                PurchaseUnitCode = TableReturnItems.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TableReturnItems.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TableReturnItems.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(TableReturnItems.getValueAt(i, 5).toString()));
                ExpireDate = "Not define";

                String ItemInsertQuery = "INSERT INTO [InvTrTestPreviewItems]\n"
                        + "           ([TransactionID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ExpireDate])\n"
                        + "     VALUES\n"
                        + "           ('" + TransactionID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + ExpireDate + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
            }
            stmtItems.close();
            TestPreview();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void TestPreview() {
        String TransactionID = "Test Preview";
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", TransactionID);
            map.put("Logo", PathToLogo);

            String Report = "TestPreview.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Data Reports/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        RetToSup.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtOtherChargersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOtherChargersMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtOtherChargersMouseClicked

    private void txtOtherChargersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtherChargersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtOtherChargers.getText();
            if (!EnteredValue.isEmpty()) {
                btnCalculate.requestFocus();
            }
        }
    }//GEN-LAST:event_txtOtherChargersKeyPressed

    private void txtOtherChargersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherChargersFocusGained
        txtOtherChargers.selectAll();
    }//GEN-LAST:event_txtOtherChargersFocusGained

    private void buttonWriteNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWriteNotesActionPerformed
        String ID = txtReturnID.getText();
        if (!ID.equals("")) {
            new WriteNotesCommon(this).setVisible(true);
        } else if (ID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the Return to supplier. After that you can write your notes.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonWriteNotesActionPerformed

    private void ButtonAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddAllActionPerformed
        buttonSave.setEnabled(false);
        AddAllItemsToTransactionTable();
    }//GEN-LAST:event_ButtonAddAllActionPerformed

    private void AddAllItemsToTransactionTable() {
        String ItemCode, ItemName, PurchaseUnitCode;
        double PurchasePrice, availableQuantity, Amount;
        int getRowCountAtGRN = tableGRN.getRowCount();
        try {
            for (int i = 0; i < getRowCountAtGRN; i++) {
                ItemCode = tableGRN.getValueAt(i, 0).toString();
                ItemName = tableGRN.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableGRN.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableGRN.getValueAt(i, 3).toString()));
                availableQuantity = roundThreeDecimals(Double.parseDouble(tableGRN.getValueAt(i, 5).toString()));
                Amount = availableQuantity * PurchasePrice;
                if (availableQuantity > 0) {
                    model_ReturnTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, availableQuantity, Amount});
                }
            }

            ButtonAddSelected.setEnabled(false);
            ButtonAddAll.setEnabled(false);
            int getRowCountAtReturn = TableReturnItems.getRowCount();
            textNumbersInReturn.setText(String.valueOf(getRowCountAtReturn));
            CalculateAmountWithOutTax();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void PreviewReturnToSupplier() {
        String ID = txtReturnID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("RETURNID", ID);
            map.put("Logo", PathToLogo);

            String Report = "Return ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/Returns/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddAll;
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonAddToTable;
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JButton ButtonView;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonStartDate;
    private javax.swing.JCheckBox CheckBoxAddDTO;
    private javax.swing.JPanel PanelGRN;
    private javax.swing.JPanel PanelPurchaseOrder;
    public static javax.swing.JTable TableReturnItems;
    private javax.swing.JTable TableSearch;
    private javax.swing.JFormattedTextField TextAmount;
    private javax.swing.JTextField TextDate;
    public static javax.swing.JTextField TextGRNID;
    private javax.swing.JTextField TextInvoiceNum;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JFormattedTextField TextQuantity;
    private javax.swing.JLabel backgroundCornerLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton buttonRefresh;
    public static javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonWriteNotes;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lableOtherCharges;
    private javax.swing.JLabel lableTax1;
    private javax.swing.JLabel lableTax2;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_category3;
    private javax.swing.JLabel lbl_category6;
    private javax.swing.JLabel lbl_category8;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    public static javax.swing.JPanel panel1;
    private javax.swing.JTable tableGRN;
    private javax.swing.JTextField textNumberTransactions;
    private javax.swing.JTextField textNumbersInGRN;
    private javax.swing.JTextField textNumbersInReturn;
    private javax.swing.JFormattedTextField txtDiscount;
    private javax.swing.JFormattedTextField txtOtherChargers;
    public static javax.swing.JTextField txtReturnID;
    private javax.swing.JFormattedTextField txtTax1;
    private javax.swing.JFormattedTextField txtTax2;
    public static javax.swing.JFormattedTextField txtTotalNoTax;
    private javax.swing.JTextField txtTotalWithTax;
    // End of variables declaration//GEN-END:variables
}
