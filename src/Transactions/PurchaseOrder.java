/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.po;
import OtherDialogs.WriteNotesCommon;
import SearchDialogs.CommonItemSearch;
import db.ConnectSql;
import functions.DocNumGenerator;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.ERROR;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ravindu
 */
public class PurchaseOrder extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_PurchaseOrderTable, model_PRTable, model_SearchTable;
    private final String spliter = "--";
    private DocNumGenerator AutoID;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form PurchaseOrder
     */
    public PurchaseOrder() {
        initComponents();

        rBtnCode.setSelected(true);
        LoadSystemDate();
        LoadSuppliersToCombo();
        loadDepartmentsToCombo();
        LoadTaxesToLables();
        buttonSave.setEnabled(false);

        model_PurchaseOrderTable = (DefaultTableModel) tablePurchaseOrder.getModel();
        model_PRTable = (DefaultTableModel) tablePurchaseRequisition.getModel();
        model_SearchTable = (DefaultTableModel) TableSearch.getModel();
        
        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround); //cornerBackground
        
        ImageIcon cornerBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/cornerBackground.jpg");
        backgroundCornerLabel.setIcon(cornerBackGround);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        ButtonPreview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSearch = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        CheckBoxAllPendingPO = new javax.swing.JCheckBox();
        PanelPurchaseOrder = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePurchaseRequisition = new javax.swing.JTable();
        PanelGRN = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePurchaseOrder = new javax.swing.JTable();
        ButtonAddSelected = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lableOtherCharges = new javax.swing.JLabel();
        txtTotalNoTax = new javax.swing.JFormattedTextField();
        txtDiscount = new javax.swing.JFormattedTextField();
        txtTax1 = new javax.swing.JFormattedTextField();
        lbl_category2 = new javax.swing.JLabel();
        lbl_category3 = new javax.swing.JLabel();
        txtTax2 = new javax.swing.JFormattedTextField();
        txtOtherChargers = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtTotalWithTax = new javax.swing.JTextField();
        lableTax1 = new javax.swing.JLabel();
        lableTax2 = new javax.swing.JLabel();
        lbl_category6 = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_accountType1 = new javax.swing.JLabel();
        cmbPaymentTypes = new javax.swing.JComboBox();
        calenderButtonDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        TextPRNumber = new javax.swing.JTextField();
        ButtonSearchItems = new javax.swing.JButton();
        ButtonPreviewPR = new javax.swing.JButton();
        ButtonAddToPRItems = new javax.swing.JButton();
        ButtonAddAll = new javax.swing.JButton();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        TextQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        buttonUpdate = new javax.swing.JButton();
        cmbSupplier = new javax.swing.JComboBox();
        lbl_category7 = new javax.swing.JLabel();
        txtPOID = new javax.swing.JTextField();
        lbl_category8 = new javax.swing.JLabel();
        ComboDepartment = new javax.swing.JComboBox();
        buttonWriteNotes = new javax.swing.JButton();
        textNumbersInPR = new javax.swing.JTextField();
        textNumberTransactions = new javax.swing.JTextField();
        textNumbersInPO = new javax.swing.JTextField();
        backgroundCornerLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setIconifiable(true);
        setTitle("Purchase Order");
        setPreferredSize(new java.awt.Dimension(1097, 688));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSave.setMnemonic('s');
        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, 80, -1));

        buttonRefresh.setMnemonic('d');
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        panel1.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 80, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText(" Search pending suppliers by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 170, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 610, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, 60, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 610, 80, -1));

        TableSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PR number", "Date", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableSearch.getTableHeader().setReorderingAllowed(false);
        TableSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableSearch);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 150));

        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 150, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 600, 350, -1));

        CheckBoxAllPendingPO.setBackground(new java.awt.Color(255, 255, 255));
        CheckBoxAllPendingPO.setForeground(new java.awt.Color(102, 102, 102));
        CheckBoxAllPendingPO.setText("Check this box to view all pending purchase requisition");
        panel1.add(CheckBoxAllPendingPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 23, 410, 30));

        PanelPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Purchase requisition"));

        tablePurchaseRequisition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Quantity", "Amount", "Set pending?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePurchaseRequisition.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablePurchaseRequisition);
        if (tablePurchaseRequisition.getColumnModel().getColumnCount() > 0) {
            tablePurchaseRequisition.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelPurchaseOrderLayout = new javax.swing.GroupLayout(PanelPurchaseOrder);
        PanelPurchaseOrder.setLayout(PanelPurchaseOrderLayout);
        PanelPurchaseOrderLayout.setHorizontalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelPurchaseOrderLayout.setVerticalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        panel1.add(PanelPurchaseOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 1050, 120));

        PanelGRN.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Purchase order items"));

        tablePurchaseOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Qunatity", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePurchaseOrder.getTableHeader().setReorderingAllowed(false);
        tablePurchaseOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePurchaseOrderMouseClicked(evt);
            }
        });
        tablePurchaseOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablePurchaseOrderKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tablePurchaseOrder);
        if (tablePurchaseOrder.getColumnModel().getColumnCount() > 0) {
            tablePurchaseOrder.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelGRNLayout = new javax.swing.GroupLayout(PanelGRN);
        PanelGRN.setLayout(PanelGRNLayout);
        PanelGRNLayout.setHorizontalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGRNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelGRNLayout.setVerticalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGRNLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        panel1.add(PanelGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 1050, 120));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, 120, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lableOtherCharges.setForeground(new java.awt.Color(102, 102, 102));
        lableOtherCharges.setText("Other chargers (Rs)");
        jPanel1.add(lableOtherCharges, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 110, 20));

        txtTotalNoTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTotalNoTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalNoTax.setText("0.00");
        txtTotalNoTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalNoTax.setEnabled(false);
        jPanel1.add(txtTotalNoTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 10, 160, -1));

        txtDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("0.00");
        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDiscountFocusGained(evt);
            }
        });
        txtDiscount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDiscountMouseClicked(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
        });
        jPanel1.add(txtDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 40, 160, -1));

        txtTax1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTax1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTax1.setText("0.00");
        txtTax1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTax1FocusGained(evt);
            }
        });
        txtTax1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTax1MouseClicked(evt);
            }
        });
        txtTax1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTax1KeyPressed(evt);
            }
        });
        jPanel1.add(txtTax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 70, 160, -1));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Total (with taxes) =");
        jPanel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 120, 20));

        lbl_category3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category3.setText("Discounts (Rs)");
        jPanel1.add(lbl_category3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 20));

        txtTax2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTax2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTax2.setText("0.00");
        txtTax2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTax2FocusGained(evt);
            }
        });
        txtTax2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTax2MouseClicked(evt);
            }
        });
        txtTax2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTax2KeyPressed(evt);
            }
        });
        jPanel1.add(txtTax2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 160, -1));

        txtOtherChargers.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtOtherChargers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOtherChargers.setText("0.00");
        txtOtherChargers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOtherChargersFocusGained(evt);
            }
        });
        txtOtherChargers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOtherChargersMouseClicked(evt);
            }
        });
        txtOtherChargers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOtherChargersKeyPressed(evt);
            }
        });
        jPanel1.add(txtOtherChargers, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 160, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 160, -1));

        txtTotalWithTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalWithTax.setText("0.00");
        txtTotalWithTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWithTax.setEnabled(false);
        jPanel1.add(txtTotalWithTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 160, -1));

        lableTax1.setForeground(new java.awt.Color(102, 102, 102));
        lableTax1.setText("Tax 1 (Rs)");
        jPanel1.add(lableTax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 110, 20));

        lableTax2.setForeground(new java.awt.Color(102, 102, 102));
        lableTax2.setText("Tax 2 (Rs)");
        jPanel1.add(lableTax2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 110, 20));

        lbl_category6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category6.setText("Total (without taxes)");
        jPanel1.add(lbl_category6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 110, 20));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, 100, 20));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Need before");
        jPanel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, 20));

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Payment type");
        jPanel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 20));

        cmbPaymentTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Credit" }));
        cmbPaymentTypes.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbPaymentTypesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbPaymentTypes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbPaymentTypesKeyPressed(evt);
            }
        });
        jPanel1.add(cmbPaymentTypes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 130, -1));

        calenderButtonDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calenderButtonDateActionPerformed(evt);
            }
        });
        calenderButtonDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calenderButtonDatePropertyChange(evt);
            }
        });
        jPanel1.add(calenderButtonDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 130, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 560, 200));

        TextPRNumber.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextPRNumber.setEnabled(false);
        panel1.add(TextPRNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 120, -1));

        ButtonSearchItems.setText("Search items");
        ButtonSearchItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchItemsActionPerformed(evt);
            }
        });
        panel1.add(ButtonSearchItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 610, 120, -1));

        ButtonPreviewPR.setText("Preview PR");
        panel1.add(ButtonPreviewPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 270, 120, -1));

        ButtonAddToPRItems.setText("Add to PR items");
        panel1.add(ButtonAddToPRItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 270, 120, -1));

        ButtonAddAll.setText("Add all");
        ButtonAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddAllActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 440, 120, -1));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextPurchasePriceFocusGained(evt);
            }
        });
        TextPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPurchasePriceKeyPressed(evt);
            }
        });
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, 110, -1));

        TextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        TextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextQuantity.setText("0.000");
        TextQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextQuantityFocusGained(evt);
            }
        });
        TextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextQuantityKeyPressed(evt);
            }
        });
        panel1.add(TextQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 440, 110, -1));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextAmountFocusGained(evt);
            }
        });
        TextAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAmountKeyPressed(evt);
            }
        });
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 110, -1));

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });
        panel1.add(buttonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, 120, -1));

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSupplier.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbSupplierPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbSupplier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSupplierKeyPressed(evt);
            }
        });
        panel1.add(cmbSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 60, 220, -1));

        lbl_category7.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category7.setText("Department");
        panel1.add(lbl_category7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, 90, 20));

        txtPOID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPOID.setEnabled(false);
        panel1.add(txtPOID, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 610, 110, -1));

        lbl_category8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category8.setText("Supplier");
        panel1.add(lbl_category8, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, 50, 20));

        ComboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        ComboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                ComboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        ComboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(ComboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 140, -1));

        buttonWriteNotes.setText("Write any notes?");
        buttonWriteNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWriteNotesActionPerformed(evt);
            }
        });
        panel1.add(buttonWriteNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 610, 120, -1));

        textNumbersInPR.setEditable(false);
        textNumbersInPR.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInPR.setText("0");
        textNumbersInPR.setEnabled(false);
        panel1.add(textNumbersInPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 60, -1));

        textNumberTransactions.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumberTransactions.setEnabled(false);
        panel1.add(textNumberTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 60, -1));

        textNumbersInPO.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInPO.setText("0");
        textNumbersInPO.setEnabled(false);
        panel1.add(textNumbersInPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 60, -1));

        backgroundCornerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(backgroundCornerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 470, 230));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 104, 1070, 540));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadSystemDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Statement stmt;
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rset = stmt.executeQuery("SELECT sysDate FROM SystemDate");
            if (rset.next()) {
                calenderButtonDate.setText(sdf.format(rset.getDate("sysDate")));
            }
            rset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR);
        }
    }

    private void LoadSuppliersToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Suppliers order by SupplierName";
            ResultSet rset = stmt.executeQuery(query);

            cmbSupplier.removeAllItems();
            cmbSupplier.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSupplier.insertItemAt(rset.getString("SupplierName") + "--" + rset.getString("SupplierCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbSupplier.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR);
        }
    }

    private void loadDepartmentsToCombo() {
        String Type = "Stock";
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments where Type = '" + Type + "' order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            ComboDepartment.removeAllItems();
            ComboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    ComboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            ComboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);
            if (resultset.next()) {
//                Date = resultset.getString("CurrentDateTime").split(" ")[0];
                Date = IndexPage.LabelDate.getText();
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                SaveAsPurhaseorder(Time, Date);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void LoadTaxesToLables() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Taxes";
            ResultSet rset = stmt.executeQuery(query);

            if (rset.next()) {
                lableTax1.setText(rset.getString("Tax1"));
                lableTax2.setText(rset.getString("Tax2"));
                lableOtherCharges.setText(rset.getString("Other"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void SaveAsPurhaseorder(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, needOn, status;
        double PurchasePrice, Quantity, Amount;
        double CurrentQuantity, NewQuantity;
        double PresentageShowSellPrice, SellPrice = 0, AddedValueForCalSellPrice, OriginalSellPrice;
        ResultSet RSETCurrentItemQuantity;

        try {
            String PRID = TextPRNumber.getText();
            needOn = calenderButtonDate.getText();
            String SupplierCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());
            float defaultRecivedQuantity = 0;

            String PaymentType = cmbPaymentTypes.getSelectedItem().toString();
            String Remarks = "";
//            String DepartmentsCode = "Store";
            String DepartmentsCode[] = ComboDepartment.getSelectedItem().toString().split("--");
            String isPending = "Yes";
            String defaultNotes = "-";

            String poID;
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("PO");
            poID = AutoID.getDocChar() + AutoID.getDocNumber();
            txtPOID.setText(poID);
            poID = txtPOID.getText();

            //////////////////////////////////////////////////////////////////
            int rowCount = tablePurchaseOrder.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [PurchaseOrderMain]\n"
                    + "           ([POID]\n"
                    + "           ,[PODate]\n"
                    + "           ,[POTime]\n"
                    + "           ,[PRID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[NeedDateOn]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode]\n"
                    + "           ,[IsPending])\n"
                    + "     VALUES\n"
                    + "           ('" + poID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + PRID + "'\n"
                    + "           ,'" + SupplierCode[1] + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + needOn + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + DepartmentsCode[1] + "'\n"
                    + "           ,'" + isPending + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < rowCount; i++) {
                ItemCode = tablePurchaseOrder.getValueAt(i, 0).toString();
                ItemName = tablePurchaseOrder.getValueAt(i, 1).toString();
                PurchaseUnitCode = tablePurchaseOrder.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tablePurchaseOrder.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tablePurchaseOrder.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tablePurchaseOrder.getValueAt(i, 5).toString()));
                status = tablePurchaseOrder.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [PurchaseOrderItems]\n"
                        + "           ([POID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[RecivedQuantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[IsPending]\n"
                        + "           ,[PODate]\n"
                        + "           ,[Notes])\n"
                        + "     VALUES\n"
                        + "           ('" + poID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + defaultRecivedQuantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + isPending + "'\n"
                        + "           ,'" + Date + "'\n"
                        + "           ,'" + defaultNotes + "')";
                stmtItems.execute(ItemInsertQuery);
            }
            stmtItems.close();

            JOptionPane.showMessageDialog(this, "Purchase order is successfully saved.");
            buttonSave.setEnabled(false);
            btnCalculate.setEnabled(false);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        int GRnRowCount = tablePurchaseOrder.getRowCount();
        if (cmbSupplier.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Supplier is not selected.", "No supplier", JOptionPane.OK_OPTION);
            cmbSupplier.requestFocus();
        } else if (ComboDepartment.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Department is not selected.", "No department", JOptionPane.OK_OPTION);
            ComboDepartment.requestFocus();
        } else if (calenderButtonDate.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Something wrong. Date is not loaded. GRN will close now. Please restart the application.", "System error", JOptionPane.OK_OPTION);
            this.dispose();
        } else if (GRnRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not inserted to GRN.", "No items", JOptionPane.OK_OPTION);
            ButtonSearchItems.requestFocus();
        } else if (txtDiscount.getText().equals("") || txtTax1.getText().equals("") || txtTax2.getText().equals("") || txtOtherChargers.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Discount or taxes or other chargers fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            txtDiscount.requestFocus();
        } else if (!txtDiscount.getText().equals("") && !txtTax1.getText().equals("") && !txtTax2.getText().equals("") && !txtOtherChargers.getText().equals("")) {
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            if (Discount < 0) {
                JOptionPane.showMessageDialog(this, "Discount is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtDiscount.requestFocus();
            } else if (Tax1 < 0) {
                JOptionPane.showMessageDialog(this, "Tax1 is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtTax1.requestFocus();
            } else if (Tax2 < 0) {
                JOptionPane.showMessageDialog(this, "Tax2 is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtTax2.requestFocus();
            } else if (OtherChargers < 0) {
                JOptionPane.showMessageDialog(this, "Other Chargers is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtOtherChargers.requestFocus();
            } else {
                int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this purchase order?", "Save purchase order?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    LoadTime();
                }
            }
        }
    }

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Purchase Order window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            rBtnCode.setSelected(true);
            LoadSystemDate();
            LoadSuppliersToCombo();
            loadDepartmentsToCombo();
            LoadTaxesToLables();
            buttonSave.setEnabled(false);

            txtTotalNoTax.setText("0.00");
            txtDiscount.setText("0.00");
            txtTax1.setText("0.00");
            txtTax2.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            txtSearch.setText("");
            TextPRNumber.setText("");

            TextPurchasePrice.setText("0.00");
            TextQuantity.setText("0.000");
            TextAmount.setText("0.00");
            txtPOID.setText("");
            btnCalculate.setEnabled(true);

            try {
                int rowi = model_PurchaseOrderTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_PurchaseOrderTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowj = model_PRTable.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_PRTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowk = model_SearchTable.getRowCount();
                for (int k = 0; k < rowk; k++) {
                    model_SearchTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void exit() {
        int GRnRowCount = tablePurchaseOrder.getRowCount();
        String poID = txtPOID.getText();
        if (GRnRowCount > 0 && poID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this Purchase order?", "Exit Purchase order?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (po != null) {
                    po = null;
                }
                this.dispose();
            }
        } else if (GRnRowCount <= 0 && poID.isEmpty()) {
            if (po != null) {
                po = null;
            }
            this.dispose();
        } else {
            if (po != null) {
                po = null;
            }
            this.dispose();
        }
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            buttonSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String poID = txtPOID.getText();
        if (poID.isEmpty()) {
            int PORowCount = tablePurchaseOrder.getRowCount();
            if (PORowCount <= 0) {
                JOptionPane.showMessageDialog(this, "items are not added to preview.", "Not added", JOptionPane.OK_OPTION);
            } else if (PORowCount > 0) {
                int x = JOptionPane.showConfirmDialog(this, "Purchase order is still not saved.\nDo you want to view a test preview?", "View a test preview?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    try {
                        java.sql.Statement stmtDelete = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String queryMain = "delete From InvTrTestPreviewMain";
                        stmtDelete.execute(queryMain);
                        String queryItems = "delete From InvTrTestPreviewItems";
                        stmtDelete.execute(queryItems);

                        String GRNTime = "No time";
                        String GRNDate = "No date";
                        SaveForTestPreview(GRNTime, GRNDate);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                }
            }
        } else if (!poID.isEmpty()) {
            Preview();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void SaveForTestPreview(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate;
        double PurchasePrice, Quantity, Amount;
        try {
            String OtherID = "Not define";

            String branchCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String SupplierInvoice = "Not define";
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = 0;
            float Tax1 = 0;
            float Tax2 = 0;
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = calenderButtonDate.getText();
            String PaymentType = "Not define";
            String CreditPeriod = "0";
            String PeriodEndsOn = "Not define";

            String Remarks = "";
            String departmentCode[] = ComboDepartment.getSelectedItem().toString().split("--");
            String TransactionID = "Test Preview";

            //////////////////////////////////////////////////////////////////
            int rowCount = tablePurchaseOrder.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [InvTrTestPreviewMain]\n"
                    + "           ([TransactionID]\n"
                    + "           ,[Date]\n"
                    + "           ,[Time]\n"
                    + "           ,[PreviousID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + TransactionID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + OtherID + "'\n"
                    + "           ,'" + branchCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + departmentCode[1] + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < rowCount; i++) {
                ItemCode = tablePurchaseOrder.getValueAt(i, 0).toString();
                ItemName = tablePurchaseOrder.getValueAt(i, 1).toString();
                PurchaseUnitCode = tablePurchaseOrder.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tablePurchaseOrder.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tablePurchaseOrder.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tablePurchaseOrder.getValueAt(i, 5).toString()));
                ExpireDate = tablePurchaseOrder.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [InvTrTestPreviewItems]\n"
                        + "           ([TransactionID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ExpireDate])\n"
                        + "     VALUES\n"
                        + "           ('" + TransactionID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + ExpireDate + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
            }
            stmtItems.close();
            TestPreview();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void TestPreview() {
        String TransactionID = "Test Preview";
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", TransactionID);
            map.put("Logo", PathToLogo);

            String Report = "TestPreview.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Data Reports/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Preview() {
        String poID = txtPOID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("transactionID", poID);
            map.put("Logo", PathToLogo);

            String Report = "PO ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/PO/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void TableSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSearchMouseClicked
        String Code, Name, Type;

        Code = TableSearch.getValueAt(TableSearch.getSelectedRow(), 0).toString();
        Name = TableSearch.getValueAt(TableSearch.getSelectedRow(), 1).toString();
        Type = TableSearch.getValueAt(TableSearch.getSelectedRow(), 2).toString();
    }//GEN-LAST:event_TableSearchMouseClicked

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        if (CheckBoxAllPendingPO.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please remove the tick at all pending purchase orders.");
            CheckBoxAllPendingPO.requestFocus();
        }
    }//GEN-LAST:event_txtSearchMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            //            SearchCategoryByCode(txtSearch.getText().toString());
        } else if (rBtnName.isSelected()) {
            //            SearchCategoryByName(txtSearch.getText().toString());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tablePurchaseOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePurchaseOrderMouseClicked
        if (evt.getClickCount() == 1) {
            buttonSave.setEnabled(false);
            String PurchasePrice, Quantity, Amount;
            float CheckAmount = Float.parseFloat(tablePurchaseOrder.getValueAt(tablePurchaseOrder.getSelectedRow(), 5).toString());
            if (CheckAmount > 0) {
                PurchasePrice = tablePurchaseOrder.getValueAt(tablePurchaseOrder.getSelectedRow(), 3).toString();
                Quantity = tablePurchaseOrder.getValueAt(tablePurchaseOrder.getSelectedRow(), 4).toString();
                Amount = tablePurchaseOrder.getValueAt(tablePurchaseOrder.getSelectedRow(), 5).toString();
                TextPurchasePrice.setText(PurchasePrice);
                TextQuantity.setText(Quantity);
                TextAmount.setText(Amount);
                TextPurchasePrice.requestFocus();
                TextPurchasePrice.selectAll();
            }
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tablePurchaseOrder.getSelectedRow();
                model_PurchaseOrderTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
                countItemsInPOItemsTable();
            }

        }
    }//GEN-LAST:event_tablePurchaseOrderMouseClicked

    private void tablePurchaseOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablePurchaseOrderKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tablePurchaseOrder.getSelectedRow();
                model_PurchaseOrderTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalculateAmountWithOutTax();
            }
        }
    }//GEN-LAST:event_tablePurchaseOrderKeyPressed

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int GRNTableRowCount = tablePurchaseOrder.getRowCount();
        for (int i = 0; i < GRNTableRowCount; i++) {
            ItemPriceAmount = Float.parseFloat(tablePurchaseOrder.getValueAt(i, 5).toString());
            TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
        }
        txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
    }

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void txtDiscountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDiscountMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtDiscountMouseClicked

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtDiscount.getText();
            if (!EnteredValue.isEmpty()) {
                txtTax1.requestFocus();
            }
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void txtTax1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTax1MouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtTax1MouseClicked

    private void txtTax1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTax1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtTax1.getText();
            if (!EnteredValue.isEmpty()) {
                txtTax2.requestFocus();
            }
            //            else if(EnteredValue.isEmpty()){
            //                txtDiscount.setText("0.00");
            //                txtTax1.requestFocus();
            //            }
        }
    }//GEN-LAST:event_txtTax1KeyPressed

    private void txtTax2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTax2MouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtTax2MouseClicked

    private void txtTax2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTax2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtTax2.getText();
            if (!EnteredValue.isEmpty()) {
                txtOtherChargers.requestFocus();
            }
        }
    }//GEN-LAST:event_txtTax2KeyPressed

    private void txtOtherChargersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOtherChargersMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtOtherChargersMouseClicked

    private void txtOtherChargersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtherChargersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtOtherChargers.getText();
            if (!EnteredValue.isEmpty()) {
                btnCalculate.requestFocus();
            }
        }
    }//GEN-LAST:event_txtOtherChargersKeyPressed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        float TotalWithTaxes;
        String Value1 = txtTotalNoTax.getText();
        String Value2 = txtDiscount.getText();
        String Value3 = txtTax1.getText();
        String Value4 = txtTax2.getText();
        String Value5 = txtOtherChargers.getText();

        if (!Value1.isEmpty() && !Value2.isEmpty() && !Value3.isEmpty() && !Value4.isEmpty() && !Value5.isEmpty()) {
            try {
                float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
                float Discount = Float.parseFloat(txtDiscount.getText());
                float Tax1 = Float.parseFloat(txtTax1.getText());
                float Tax2 = Float.parseFloat(txtTax2.getText());
                float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

                TotalWithTaxes = (TotalWithoutTaxes + Tax1 + Tax2 + OtherChargers) - Discount;
                txtTotalWithTax.setText(String.valueOf(TotalWithTaxes));
                buttonSave.setEnabled(true);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR);
            }
        } else if (Value1.isEmpty() || Value2.isEmpty() || Value3.isEmpty() || Value4.isEmpty() || Value5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }

//        CreditPeriod();
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void ButtonSearchItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchItemsActionPerformed
        int prSelectedRowCount = tablePurchaseRequisition.getSelectedRowCount();
        if (prSelectedRowCount > 0) {
            JOptionPane.showMessageDialog(this, "Authorized purchase requisition is selected.\n "
                    + "You can't add more items to this.");
        } else if (prSelectedRowCount == 0) {
            new CommonItemSearch(this).setVisible(true);
        }
    }//GEN-LAST:event_ButtonSearchItemsActionPerformed

    private void ButtonAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddAllActionPerformed
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_ButtonAddAllActionPerformed

    private void TextPurchasePriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextPurchasePriceFocusGained
        TextPurchasePrice.selectAll();
    }//GEN-LAST:event_TextPurchasePriceFocusGained

    private void TextPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPurchasePriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                TextQuantity.requestFocus();
                TextQuantity.selectAll();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_TextPurchasePriceKeyPressed

    private void TextQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextQuantityFocusGained
        TextQuantity.selectAll();
    }//GEN-LAST:event_TextQuantityFocusGained

    private void TextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float Amount;
                float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                float Quantity = Float.parseFloat(TextQuantity.getText());

                Amount = PurchasePrice * Quantity;
                TextAmount.setText("" + roundTwoDecimals(Amount));
                TextAmount.requestFocus();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_TextQuantityKeyPressed

    private void TextAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextAmountFocusGained
        TextAmount.selectAll();
    }//GEN-LAST:event_TextAmountFocusGained

    private void TextAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAmountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextAmount.getText().equals("") && !TextQuantity.getText().equals("") && !TextPurchasePrice.getText().equals("")) {
                float Amount = Float.parseFloat(TextAmount.getText());
                float PurchasePrice;
                float Quantity = Float.parseFloat(TextQuantity.getText());

                PurchasePrice = Amount / Quantity;
                TextPurchasePrice.setText("" + roundTwoDecimals(PurchasePrice));
                buttonUpdate.requestFocus();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_TextAmountKeyPressed


    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = tablePurchaseOrder.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(TextQuantity.getText());
                float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {
                    CheckAtUpdateButtonBeforeUpdate();
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void CheckAtUpdateButtonBeforeUpdate() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            try {
                float Quantity = Float.parseFloat(TextQuantity.getText());
                if (0 < Quantity) {
                    UpdateToReturnTable();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity is not enough to GRN.", "Not enough.", JOptionPane.OK_OPTION);
                }
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void UpdateToReturnTable() {
        int SelectedRow = tablePurchaseOrder.getSelectedRow();
        double PurchasePrice = Double.parseDouble(TextPurchasePrice.getText());
        double Quantity = Double.parseDouble(TextQuantity.getText());
        double Amount = roundTwoDecimals(PurchasePrice * Quantity);

        tablePurchaseOrder.setValueAt(PurchasePrice, SelectedRow, 3);
        tablePurchaseOrder.setValueAt(Quantity, SelectedRow, 4);
        tablePurchaseOrder.setValueAt(Amount, SelectedRow, 5);

        CalculateAmountWithOutTax();
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        po.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void ComboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ComboDepartmentPopupMenuWillBecomeInvisible
        if (!ComboDepartment.getSelectedItem().equals(select)) {
            cmbSupplier.requestFocus();
        }
    }//GEN-LAST:event_ComboDepartmentPopupMenuWillBecomeInvisible

    private void ComboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!ComboDepartment.getSelectedItem().equals(select)) {
                cmbSupplier.requestFocus();
            }
        }
    }//GEN-LAST:event_ComboDepartmentKeyPressed

    private void txtDiscountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusGained
        txtDiscount.selectAll();
    }//GEN-LAST:event_txtDiscountFocusGained

    private void txtTax1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTax1FocusGained
        txtTax1.selectAll();
    }//GEN-LAST:event_txtTax1FocusGained

    private void txtTax2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTax2FocusGained
        txtTax2.selectAll();
    }//GEN-LAST:event_txtTax2FocusGained

    private void txtOtherChargersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherChargersFocusGained
        txtOtherChargers.selectAll();
    }//GEN-LAST:event_txtOtherChargersFocusGained

    private void buttonWriteNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWriteNotesActionPerformed
        String poID = txtPOID.getText();
        if (!poID.equals("")) {
            new WriteNotesCommon(this).setVisible(true);
        } else if (poID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the purchase order. After that you can write your notes.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonWriteNotesActionPerformed

    private void cmbPaymentTypesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbPaymentTypesPopupMenuWillBecomeInvisible
        calenderButtonDate.requestFocus();
    }//GEN-LAST:event_cmbPaymentTypesPopupMenuWillBecomeInvisible

    private void cmbPaymentTypesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbPaymentTypesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            calenderButtonDate.requestFocus();
        }
    }//GEN-LAST:event_cmbPaymentTypesKeyPressed

    private void calenderButtonDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calenderButtonDateActionPerformed
        if (!calenderButtonDate.getText().isEmpty()) {
            ButtonSearchItems.requestFocus();
        }
    }//GEN-LAST:event_calenderButtonDateActionPerformed

    private void calenderButtonDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calenderButtonDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            calenderButtonDate.setText(format.format(RecievedDate));
            ButtonSearchItems.requestFocus();
        }
    }//GEN-LAST:event_calenderButtonDatePropertyChange

    private void cmbSupplierKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSupplierKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!cmbSupplier.getSelectedItem().equals(select)) {
                cmbPaymentTypes.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbSupplierKeyPressed

    private void cmbSupplierPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbSupplierPopupMenuWillBecomeInvisible
        if (!cmbSupplier.getSelectedItem().equals(select)) {
            cmbPaymentTypes.requestFocus();
        }
    }//GEN-LAST:event_cmbSupplierPopupMenuWillBecomeInvisible

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void countItemsInTransactionTable() {
        textNumberTransactions.setText(model_SearchTable.getRowCount() + "");
    }

    private void countItemsInPOItemsTable() {
        textNumbersInPO.setText(model_PurchaseOrderTable.getRowCount() + "");
    }

    private void countItemsInPRItemsTable() {
        textNumbersInPR.setText(model_PRTable.getRowCount() + "");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddAll;
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonAddToPRItems;
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JButton ButtonPreviewPR;
    private javax.swing.JButton ButtonSearchItems;
    private javax.swing.JCheckBox CheckBoxAllPendingPO;
    private javax.swing.JComboBox ComboDepartment;
    private javax.swing.JPanel PanelGRN;
    private javax.swing.JPanel PanelPurchaseOrder;
    private javax.swing.JTable TableSearch;
    private javax.swing.JFormattedTextField TextAmount;
    public static javax.swing.JTextField TextPRNumber;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JFormattedTextField TextQuantity;
    private javax.swing.JLabel backgroundCornerLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonRefresh;
    public static javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonWriteNotes;
    private org.sourceforge.jcalendarbutton.JCalendarButton calenderButtonDate;
    private javax.swing.JComboBox cmbPaymentTypes;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lableOtherCharges;
    private javax.swing.JLabel lableTax1;
    private javax.swing.JLabel lableTax2;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_category3;
    private javax.swing.JLabel lbl_category6;
    private javax.swing.JLabel lbl_category7;
    private javax.swing.JLabel lbl_category8;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    public static javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    public static javax.swing.JTable tablePurchaseOrder;
    private javax.swing.JTable tablePurchaseRequisition;
    private javax.swing.JTextField textNumberTransactions;
    private javax.swing.JTextField textNumbersInPO;
    private javax.swing.JTextField textNumbersInPR;
    private javax.swing.JFormattedTextField txtDiscount;
    private javax.swing.JFormattedTextField txtOtherChargers;
    public static javax.swing.JTextField txtPOID;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JFormattedTextField txtTax1;
    private javax.swing.JFormattedTextField txtTax2;
    public static javax.swing.JFormattedTextField txtTotalNoTax;
    private javax.swing.JTextField txtTotalWithTax;
    // End of variables declaration//GEN-END:variables
}
