/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.stockedit;
import db.ConnectSql;
import functions.DocNumGenerator;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;


public class StockEdit extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_StockEditingTable;
    private final DefaultTableModel model_AvailableTable;
    private final String spliter = "--";
    private DocNumGenerator AutoID;

    /**
     * Creates new form StockEdit
     */
    public StockEdit() {
        initComponents();
        LoadDepartmentsToCombo();

        rBtnCode.setSelected(true);
        cmbDepartment.requestFocus();
        model_StockEditingTable = (DefaultTableModel) TableStockEdit.getModel();
        model_AvailableTable = (DefaultTableModel) TableAvailableItems.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");

        rBtnCode.setEnabled(false);
        rBtnName.setEnabled(false);
        txtSearch.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        lbl_accountType = new javax.swing.JLabel();
        CalendarButtonEditDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        ButtonView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableAvailableItems = new javax.swing.JTable();
        cmbDepartment = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        rBtnName = new javax.swing.JRadioButton();
        rBtnCode = new javax.swing.JRadioButton();
        lbl_subAccount = new javax.swing.JLabel();
        lbl_subAccount3 = new javax.swing.JLabel();
        FormattedTextNewQuantity = new javax.swing.JFormattedTextField();
        lbl_subAccount4 = new javax.swing.JLabel();
        TextReason = new javax.swing.JTextField();
        ButtonAddSelected = new javax.swing.JButton();
        txStockEditID = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableStockEdit = new javax.swing.JTable();
        ButtonUpdate = new javax.swing.JButton();
        ButtonHoldEditItems = new javax.swing.JButton();
        ButtonGetHoldItems = new javax.swing.JButton();
        lbl_subAccount1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        TextNumberOfEditItems = new javax.swing.JTextField();
        TextNumberOfSystemItems = new javax.swing.JTextField();

        setIconifiable(true);
        setTitle("Stock Edit (Main Stores)");
        setPreferredSize(new java.awt.Dimension(990, 688));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText(" Department");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText(" Date");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 80, 20));

        CalendarButtonEditDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonEditDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonEditDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 120, 20));

        ButtonView.setText("View");
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });
        panel1.add(ButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 50, 120, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 80, -1));

        jButton1.setText("Preview");
        panel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 610, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 610, 80, -1));

        TableAvailableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Quantity", "Sub category", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableAvailableItems.getTableHeader().setReorderingAllowed(false);
        TableAvailableItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableAvailableItemsMouseClicked(evt);
            }
        });
        TableAvailableItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableAvailableItemsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TableAvailableItems);
        if (TableAvailableItems.getColumnModel().getColumnCount() > 0) {
            TableAvailableItems.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 930, 210));

        cmbDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbDepartmentKeyPressed(evt);
            }
        });
        panel1.add(cmbDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 250, 20));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 20, 220, 20));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 60, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 60, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Number of edited items");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 630, 120, 20));

        lbl_subAccount3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount3.setText("Reason");
        panel1.add(lbl_subAccount3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 320, 60, 20));

        FormattedTextNewQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        FormattedTextNewQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        FormattedTextNewQuantity.setText("0.00");
        FormattedTextNewQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FormattedTextNewQuantityFocusGained(evt);
            }
        });
        FormattedTextNewQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FormattedTextNewQuantityKeyPressed(evt);
            }
        });
        panel1.add(FormattedTextNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 320, 100, -1));

        lbl_subAccount4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount4.setText("New Quantity");
        panel1.add(lbl_subAccount4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 320, 90, 20));

        TextReason.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextReasonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextReasonKeyReleased(evt);
            }
        });
        panel1.add(TextReason, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 320, 220, -1));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 320, 110, -1));

        txStockEditID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txStockEditID.setEnabled(false);
        panel1.add(txStockEditID, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 610, 110, -1));

        TableStockEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Quantity", "New Quantity", "Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableStockEdit.getTableHeader().setReorderingAllowed(false);
        TableStockEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableStockEditMouseClicked(evt);
            }
        });
        TableStockEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableStockEditKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(TableStockEdit);
        if (TableStockEdit.getColumnModel().getColumnCount() > 0) {
            TableStockEdit.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 357, 930, 230));

        ButtonUpdate.setText("Update");
        panel1.add(ButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 110, -1));

        ButtonHoldEditItems.setText("Hold edit items");
        ButtonHoldEditItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonHoldEditItemsActionPerformed(evt);
            }
        });
        panel1.add(ButtonHoldEditItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 110, -1));

        ButtonGetHoldItems.setText("Get hold items");
        ButtonGetHoldItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGetHoldItemsActionPerformed(evt);
            }
        });
        panel1.add(ButtonGetHoldItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 600, 120, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Search item by");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 100, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Number of searched items at the system");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, 210, 20));

        TextNumberOfEditItems.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEditItems.setEnabled(false);
        panel1.add(TextNumberOfEditItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 630, 60, -1));

        TextNumberOfSystemItems.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfSystemItems.setEnabled(false);
        panel1.add(TextNumberOfSystemItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 50, 70, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void RefreshTable() {
        try {
            int row = model_AvailableTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_AvailableTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemCode.equals("")) {
                query = "SELECT * FROM Items WHERE ItemCode LIKE '" + ItemCode + "%' AND Visibility = 'Yes' AND (Type != 'Asset' OR Type != 'Sell')";
            } else {
                query = "SELECT * FROM Items  WHERE ItemCode LIKE '" + ItemCode + "%' AND Visibility = 'Yes' AND (Type != 'Asset' OR Type != 'Sell')";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AvailableTable.addRow(new Object[model_AvailableTable.getColumnCount()]);
                TableAvailableItems.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableAvailableItems.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableAvailableItems.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableAvailableItems.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableAvailableItems.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableAvailableItems.setValueAt(reset.getString("SubCategoryCode"), rowCount, 5);
                TableAvailableItems.setValueAt(reset.getString("SupplierCode"), rowCount, 6);
                rowCount++;
            }
            TextNumberOfSystemItems.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!ItemName.equals("")) {
                query = "SELECT * FROM Items WHERE ItemName LIKE '%" + ItemName + "%' AND Visibility = 'Yes' AND (Type != 'Asset' OR Type != 'Sell')";
            } else {
                query = "SELECT * FROM Items  WHERE ItemName LIKE '%" + ItemName + "%' AND Visibility = 'Yes' AND (Type != 'Asset' OR Type != 'Sell')";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AvailableTable.addRow(new Object[model_AvailableTable.getColumnCount()]);
                TableAvailableItems.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableAvailableItems.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableAvailableItems.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                TableAvailableItems.setValueAt(reset.getFloat("PurchasePrice"), rowCount, 3);
                TableAvailableItems.setValueAt(reset.getFloat("Quantity"), rowCount, 4);
                TableAvailableItems.setValueAt(reset.getString("SubCategoryCode"), rowCount, 5);
                TableAvailableItems.setValueAt(reset.getString("SupplierCode"), rowCount, 6);
                rowCount++;
            }
            TextNumberOfSystemItems.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void cmbDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = cmbDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbDepartmentKeyPressed

    private void cmbDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbDepartmentPopupMenuWillBecomeInvisible
        String text = cmbDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_cmbDepartmentPopupMenuWillBecomeInvisible

    private void TableAvailableItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableAvailableItemsMouseClicked
        String Quantity;
        Quantity = TableAvailableItems.getValueAt(TableAvailableItems.getSelectedRow(), 4).toString();

        FormattedTextNewQuantity.setText(Quantity);
        FormattedTextNewQuantity.requestFocus();
        ButtonUpdate.setEnabled(false);
        ButtonAddSelected.setEnabled(true);
    }//GEN-LAST:event_TableAvailableItemsMouseClicked

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
        String Department = cmbDepartment.getSelectedItem().toString();
        String EditDate = CalendarButtonEditDate.getText();

        if (!Department.equals(select) && !EditDate.isEmpty()) {
            LoadToStockEditTable();
        } else if (Department.equals(select) || EditDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Department or date is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonViewActionPerformed

    private void CalendarButtonEditDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonEditDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonEditDate.setText(format.format(RecievedDate));
            ButtonView.requestFocus();

        }
    }//GEN-LAST:event_CalendarButtonEditDatePropertyChange

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void FormattedTextNewQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FormattedTextNewQuantityFocusGained
        FormattedTextNewQuantity.selectAll();
    }//GEN-LAST:event_FormattedTextNewQuantityFocusGained

    private void FormattedTextNewQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FormattedTextNewQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            float NewQuantity = Float.parseFloat(FormattedTextNewQuantity.getText());
            if (!FormattedTextNewQuantity.getText().isEmpty() && NewQuantity >= 0) {
                TextReason.requestFocus();
            } else if (FormattedTextNewQuantity.getText().isEmpty() || NewQuantity < 0) {
                JOptionPane.showMessageDialog(this, "New quantity cannot be empty and should be greater than or equal to zero.", "invalid quantity", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_FormattedTextNewQuantityKeyPressed

    private void TextReasonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextReasonKeyReleased
        ValidateFields.CheckForOtherFields(TextReason);
    }//GEN-LAST:event_TextReasonKeyReleased

    private void TextReasonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextReasonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String Reason = TextReason.getText();
            if (Reason.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Reason cannot be empty.", "Empty reason", JOptionPane.OK_OPTION);
            } else if (!Reason.isEmpty()) {
                ButtonAddSelected.requestFocus();
            }

        }
    }//GEN-LAST:event_TextReasonKeyPressed

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCount = TableAvailableItems.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String Reason = TextReason.getText();
            String CheckNewQuantity = FormattedTextNewQuantity.getText();

            if (Reason.isEmpty() || CheckNewQuantity.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Reason or new quantity fields cannot be empty.", "Empty fields", JOptionPane.OK_OPTION);
            } else {
                String AddToGRNItem = TableAvailableItems.getValueAt(TableAvailableItems.getSelectedRow(), 0).toString();
                Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(AddToGRNItem);
                if ((Boolean) CheckItemAlreadyAdded[0]) {
                    JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
                } else {
                    AddToStockEdit();
                }
            }
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void TableStockEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableStockEditMouseClicked
        if (evt.getClickCount() == 1) {
            String NewQuantity, reason;
            NewQuantity = TableStockEdit.getValueAt(TableStockEdit.getSelectedRow(), 5).toString();
            reason = TableStockEdit.getValueAt(TableStockEdit.getSelectedRow(), 6).toString();

            FormattedTextNewQuantity.setText(NewQuantity);
            TextReason.setText(reason);
            FormattedTextNewQuantity.requestFocus();
            ButtonUpdate.setEnabled(true);
            ButtonAddSelected.setEnabled(false);
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = TableStockEdit.getSelectedRow();
                model_StockEditingTable.removeRow(i);
                FormattedTextNewQuantity.setText("0.00");
                TextReason.setText("");

                int EditedRowCount = TableStockEdit.getRowCount();
                TextNumberOfEditItems.setText(String.valueOf(EditedRowCount));
            }
        }
    }//GEN-LAST:event_TableStockEditMouseClicked

    private void TableStockEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableStockEditKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = TableStockEdit.getSelectedRow();
                model_StockEditingTable.removeRow(i);
                FormattedTextNewQuantity.setText("0.00");
                TextReason.setText("");
            }
        }
    }//GEN-LAST:event_TableStockEditKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        stockedit.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            TableAvailableItems.requestFocus();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void TableAvailableItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableAvailableItemsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String Quantity;
            Quantity = TableAvailableItems.getValueAt(TableAvailableItems.getSelectedRow(), 4).toString();

            FormattedTextNewQuantity.setText(Quantity);
            FormattedTextNewQuantity.requestFocus();
            ButtonUpdate.setEnabled(false);
            ButtonAddSelected.setEnabled(true);
        }
    }//GEN-LAST:event_TableAvailableItemsKeyPressed

    private void ButtonHoldEditItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonHoldEditItemsActionPerformed
        CheckBeforeToHoldEditItems();
    }//GEN-LAST:event_ButtonHoldEditItemsActionPerformed

    private void ButtonGetHoldItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGetHoldItemsActionPerformed
        String Department = cmbDepartment.getSelectedItem().toString();
        String EditDate = CalendarButtonEditDate.getText();

        if (!Department.equals(select) && !EditDate.isEmpty()) {
            GetHoldBackItems();
        } else if (Department.equals(select) || EditDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Department or date is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonGetHoldItemsActionPerformed

    private void GetHoldBackItems() {
        try {
            int rowi = model_StockEditingTable.getRowCount();
            for (int i = 0; i < rowi; i++) {
                model_StockEditingTable.removeRow(0);
            }
            ResultSet RSETStockEditItems;
            int rowCount = 0;
            java.sql.Statement stmtStockEditItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String StockEditItemsQuery = "SELECT [ItemCode]\n"
                    + "      ,[ItemName]\n"
                    + "      ,[UnitPurchase]\n"
                    + "      ,[PurchasePrice]\n"
                    + "      ,[Quantity]\n"
                    + "      ,[NewQuantity]\n"
                    + "      ,[Remarks]\n"
                    + "  FROM [StockEditHoldItems]";
            RSETStockEditItems = stmtStockEditItems.executeQuery(StockEditItemsQuery);
            while (RSETStockEditItems.next()) {
                model_StockEditingTable.addRow(new Object[model_StockEditingTable.getColumnCount()]);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("ItemCode"), rowCount, 0);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("ItemName"), rowCount, 1);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("UnitPurchase"), rowCount, 2);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("PurchasePrice"), rowCount, 3);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("Quantity"), rowCount, 4);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("NewQuantity"), rowCount, 5);
                TableStockEdit.setValueAt(RSETStockEditItems.getString("Remarks"), rowCount, 6);
                rowCount++;
            }
            TextNumberOfEditItems.setText(String.valueOf(rowCount));
            cmbDepartment.setEnabled(false);
            CalendarButtonEditDate.setEnabled(false);
            ButtonView.setEnabled(false);

            rBtnCode.setEnabled(true);
            rBtnName.setEnabled(true);
            txtSearch.setEnabled(true);
            txtSearch.requestFocus();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void CheckBeforeToHoldEditItems() {
        int RowCount = TableStockEdit.getRowCount();
        if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not available at the table to hold.", "No items", JOptionPane.OK_OPTION);
        } else if (RowCount > 0) {
            SaveAsHoldItems();
        }
    }

    private void SaveAsHoldItems() {
        String ItemCode, ItemName, PurchaseUnitCode, Reason;
        double PurchasePrice, Quantity, NewQuantity;
        int RowCount = TableStockEdit.getRowCount();
        try {
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockEditHoldItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            String StockEditHoldItemsQuery = "Delete from StockEditHoldItems";
            stmtStockEditHoldItems.execute(StockEditHoldItemsQuery);

            for (int i = 0; i < RowCount; i++) {
                ItemCode = TableStockEdit.getValueAt(i, 0).toString();
                ItemName = TableStockEdit.getValueAt(i, 1).toString();
                PurchaseUnitCode = TableStockEdit.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TableStockEdit.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TableStockEdit.getValueAt(i, 4).toString()));
                NewQuantity = roundTwoDecimals(Double.parseDouble(TableStockEdit.getValueAt(i, 5).toString()));
                Reason = TableStockEdit.getValueAt(i, 6).toString();

                String MainInsertQuery = "INSERT INTO [StockEditHoldItems]\n"
                        + "           ([ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[NewQuantity]\n"
                        + "           ,[Remarks])"
                        + "     VALUES\n"
                        + "           ('" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + NewQuantity + "'\n"
                        + "           ,'" + Reason + "')";
                stmtMain.execute(MainInsertQuery);
            }

            JOptionPane.showMessageDialog(this, "Edited items are holded.");
            stmtMain.close();
            stmtStockEditHoldItems.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    protected Object[] CheckItemAlreadyAdded(String ItemFromAddToGRN) {
        int rowCount = model_StockEditingTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String GRNTableItemCode = model_StockEditingTable.getValueAt(i, 0).toString();
            if (ItemFromAddToGRN.equals(GRNTableItemCode)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void AddToStockEdit() {
        String Reason = TextReason.getText();
        int SelectedRow = TableAvailableItems.getSelectedRow();
        String ItemCode, ItemName, PurchaseUnitCode, PurchasePrice;
        double Quantity;
        double NewQuantity = Float.parseFloat(FormattedTextNewQuantity.getText());
        if (NewQuantity >= 0) {
            try {
                ItemCode = TableAvailableItems.getValueAt(SelectedRow, 0).toString();
                ItemName = TableAvailableItems.getValueAt(SelectedRow, 1).toString();
                PurchaseUnitCode = TableAvailableItems.getValueAt(SelectedRow, 2).toString();
                PurchasePrice = TableAvailableItems.getValueAt(SelectedRow, 3).toString();
                Quantity = roundThreeDecimals(Double.parseDouble(TableAvailableItems.getValueAt(SelectedRow, 4).toString()));

                if (NewQuantity == Quantity) {
                    JOptionPane.showMessageDialog(this, "New quantity and available quantity cannot be same.", "invalid quantity", JOptionPane.OK_OPTION);
                    FormattedTextNewQuantity.requestFocus();
                } else if (NewQuantity != Quantity) {
                    model_StockEditingTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, Quantity, NewQuantity, Reason});
                    FormattedTextNewQuantity.setText("0.00");
                    TextReason.setText("");

                    int EditedRowCount = TableStockEdit.getRowCount();
                    TextNumberOfEditItems.setText(String.valueOf(EditedRowCount));

                    txtSearch.selectAll();
                    txtSearch.requestFocus();
                }

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

        } else if (NewQuantity < 0) {
            JOptionPane.showMessageDialog(this, "New quantity should be greater than or equal to zero.", "invalid quantity", JOptionPane.OK_OPTION);
        }
    }

    private void LoadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments where Type = 'Stock' order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            cmbDepartment.removeAllItems();
            cmbDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void CheckBeforeSave() {
        int RowCount = TableStockEdit.getRowCount();
        String Department = cmbDepartment.getSelectedItem().toString();
        String EditDate = CalendarButtonEditDate.getText();

        if (Department.equals(select) || EditDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Department or date is not selected.", "Not selected", JOptionPane.OK_OPTION);
        } else if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not available at table.", "No items", JOptionPane.OK_OPTION);
        } else if (!Department.equals(select) && !EditDate.isEmpty() && RowCount > 0) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this Stock Edit?\n Please consider that you can't do another stock edit to '" + EditDate + "'\n after saved this.", "Save Stock Edit?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                LoadTime();
            }
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);
            if (resultset.next()) {
                Date = resultset.getString("CurrentDateTime").split(" ")[0];
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                SaveAsStockEdit(Time,Date);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }
    
    private void SaveAsStockEdit(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, Reason;
        double PurchasePrice, Quantity, NewQuantity, EditQuantity;
        int RowCount = TableStockEdit.getRowCount();
        String DepartmentCode[] = cmbDepartment.getSelectedItem().toString().split("--");        
        String userId = IndexPage.user;

        String StockEditID;
        AutoID = new DocNumGenerator();
        AutoID.methodNumGen("StockEdit");
        StockEditID = AutoID.getDocChar() + AutoID.getDocNumber();
        txStockEditID.setText(StockEditID);
        StockEditID = txStockEditID.getText();
        String ForEmptyFields = "-";
        try {
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtBinCardInsert = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockEditHoldItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < RowCount; i++) {
                ItemCode = TableStockEdit.getValueAt(i, 0).toString();
                ItemName = TableStockEdit.getValueAt(i, 1).toString();
                PurchaseUnitCode = TableStockEdit.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TableStockEdit.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TableStockEdit.getValueAt(i, 4).toString()));
                NewQuantity = roundTwoDecimals(Double.parseDouble(TableStockEdit.getValueAt(i, 5).toString()));
                Reason = TableStockEdit.getValueAt(i, 6).toString();

                String MainInsertQuery = "INSERT INTO [StockEdit]\n"
                        + "           ([StockEditID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[NewQuantity]\n"
                        + "           ,[Remarks]\n"
                        + "           ,[DepartmentCode]\n"
                        + "           ,[Date]\n"
                        + "           ,[Time]\n"
                        + "           ,[UserID])\n"
                        + "     VALUES\n"
                        + "           ('" + StockEditID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + NewQuantity + "'\n"
                        + "           ,'" + Reason + "'\n"
                        + "           ,'" + DepartmentCode[1] + "'\n"
                        + "           ,'" + Date + "'\n"
                        + "           ,'" + Time + "'\n"
                        + "           ,'" + userId + "')";
                stmtMain.execute(MainInsertQuery);

                String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "' where ItemCode='" + ItemCode + "'";
                stmtStockUpdate.execute(StockUpdateQuery);

                EditQuantity = NewQuantity - Quantity;
                String BinCardInsert = "INSERT INTO [BinCard]\n"
                        + "           ([ItemCode]\n"
                        + "           ,[Date]\n"
                        + "           ,[Time]\n"
                        + "           ,[OtherNotes]\n"
                        + "           ,[RecivedID]\n"
                        + "           ,[RecivedFrom]\n"
                        + "           ,[RecivedQuantity]\n"
                        + "           ,[IssuedID]\n"
                        + "           ,[IssuedTo]\n"
                        + "           ,[IssuedQuantity]\n"
                        + "           ,[StockEditID]\n"
                        + "           ,[EditQuantity]\n"
                        + "           ,[BalanceQty])\n"
                        + "     VALUES\n"
                        + "           ('" + ItemCode + "'\n"
                        + "           ,'" + Date + "'\n"
                        + "           ,'" + Time + "'\n"
                        + "           ,'" + DepartmentCode[1] + "'\n"
                        + "           ,'" + ForEmptyFields + "'\n"
                        + "           ,'" + ForEmptyFields + "'\n"
                        + "           ,'0'\n"
                        + "           ,'" + ForEmptyFields + "'\n"
                        + "           ,'" + ForEmptyFields + "'\n"
                        + "           ,'0'\n"
                        + "           ,'" + StockEditID + "'\n"
                        + "           ,'" + EditQuantity + "'\n"
                        + "           ,'" + NewQuantity + "')";
                stmtBinCardInsert.execute(BinCardInsert);

            }

            String StockEditHoldItemsQuery = "Delete from StockEditHoldItems";
            stmtStockEditHoldItems.execute(StockEditHoldItemsQuery);

            JOptionPane.showMessageDialog(this, "New stock edit entry is saved and current stock is updated.");
            btnSave.setEnabled(false);
            stmtMain.close();
            stmtStockUpdate.close();
            stmtBinCardInsert.close();
            stmtStockEditHoldItems.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Stock Eidt window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            cmbDepartment.setEnabled(true);
            CalendarButtonEditDate.setEnabled(true);
            ButtonView.setEnabled(true);
            txtSearch.setText("");
            CalendarButtonEditDate.setText("");
            cmbDepartment.setSelectedItem(select);

            rBtnCode.setEnabled(false);
            rBtnName.setEnabled(false);
            txtSearch.setEnabled(false);
            txStockEditID.setText("");
            TextNumberOfEditItems.setText("");
            TextNumberOfSystemItems.setText("");

            try {
                int rowi = model_AvailableTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_AvailableTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowi = model_StockEditingTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_StockEditingTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void exit() {
        int GRnRowCount = TableStockEdit.getRowCount();
        String GRNID = txStockEditID.getText();
        if (GRnRowCount > 0 && GRNID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this Stock edit?", "Exit Stock edit?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (stockedit != null) {
                    stockedit = null;
                }
                this.dispose();
            }
        } else if (GRnRowCount <= 0 && GRNID.isEmpty()) {
            if (stockedit != null) {
                stockedit = null;
            }
            this.dispose();
        } else {
            if (stockedit != null) {
                stockedit = null;
            }
            this.dispose();
        }
    }

    private void LoadToStockEditTable() {
        String DepartmentCode[] = cmbDepartment.getSelectedItem().toString().split("--");
        String Date = CalendarButtonEditDate.getText();
        try {
            ResultSet RSETCheckStockEdit, RSETStockEditItems;
            java.sql.Statement stmtCheckStockEdit = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String CheckStockEditQuery = "SELECT \n"
                    + "      [DepartmentCode]\n"
                    + "      ,[Date]\n"
                    + "  FROM [StockEdit] WHERE DepartmentCode='" + DepartmentCode[1] + "' AND Date='" + Date + "' ";
            RSETCheckStockEdit = stmtCheckStockEdit.executeQuery(CheckStockEditQuery);
            if (RSETCheckStockEdit.next()) {
                JOptionPane.showMessageDialog(this, "Stock edit is already done at '" + Date + "'. Please select a different date.", "Already done", JOptionPane.OK_OPTION);
            } else if (!RSETCheckStockEdit.next()) {
                int rowCount = 0;
                java.sql.Statement stmtStockEditItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String StockEditItemsQuery = "SELECT [ItemCode]\n"
                        + "      ,[ItemName]\n"
                        + "      ,[PrintName]\n"
                        + "      ,[MainCategoryCode]\n"
                        + "      ,[SubCategoryCode]\n"
                        + "      ,[Type]\n"
                        + "      ,[PurchasePrice]\n"
                        + "      ,[SellPrice]\n"
                        + "      ,[Quantity]\n"
                        + "      ,[UnitPurchase]\n"
                        + "      ,[UnitSell]\n"
                        + "      ,[ReorderQty]\n"
                        + "      ,[MinimumQty]\n"
                        + "      ,[MaximumQty]\n"
                        + "      ,[DepartmentCode]\n"
                        + "      ,[MinusSell]\n"
                        + "      ,[Currency]\n"
                        + "      ,[Visibility]\n"
                        + "      ,[SupplierCode]\n"
                        + "  FROM [Items] WHERE Visibility = 'Yes' AND (Type != 'Asset' OR Type != 'Sell')";
                RSETStockEditItems = stmtStockEditItems.executeQuery(StockEditItemsQuery);
                while (RSETStockEditItems.next()) {
                    model_AvailableTable.addRow(new Object[model_AvailableTable.getColumnCount()]);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("ItemCode"), rowCount, 0);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("ItemName"), rowCount, 1);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("UnitPurchase"), rowCount, 2);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("PurchasePrice"), rowCount, 3);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("Quantity"), rowCount, 4);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("SubCategoryCode"), rowCount, 5);
                    TableAvailableItems.setValueAt(RSETStockEditItems.getString("SupplierCode"), rowCount, 6);
                    rowCount++;
                }
                TextNumberOfSystemItems.setText(String.valueOf(rowCount));
                cmbDepartment.setEnabled(false);
                CalendarButtonEditDate.setEnabled(false);
                ButtonView.setEnabled(false);

                rBtnCode.setEnabled(true);
                rBtnName.setEnabled(true);
                txtSearch.setEnabled(true);
                txtSearch.requestFocus();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonGetHoldItems;
    private javax.swing.JButton ButtonHoldEditItems;
    private javax.swing.JButton ButtonUpdate;
    private javax.swing.JButton ButtonView;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonEditDate;
    private javax.swing.JFormattedTextField FormattedTextNewQuantity;
    private javax.swing.JTable TableAvailableItems;
    private javax.swing.JTable TableStockEdit;
    private javax.swing.JTextField TextNumberOfEditItems;
    private javax.swing.JTextField TextNumberOfSystemItems;
    private javax.swing.JTextField TextReason;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDepartment;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JLabel lbl_subAccount3;
    private javax.swing.JLabel lbl_subAccount4;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTextField txStockEditID;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
