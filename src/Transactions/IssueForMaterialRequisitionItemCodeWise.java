/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.issueForMaterialRequisitionItemCodeWise;
;
import OtherDialogs.WriteNotesCommon;
import db.ConnectSql;
import functions.DocNumGenerator;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ravindu
 */


public class IssueForMaterialRequisitionItemCodeWise extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_IssueTable, model_ChooseFromTable, model_SearchTable;
    private final String spliter = "--";
    private DocNumGenerator AutoID;
    private final String projectPath = System.getProperty("user.dir");
    private final String internalFrameName = "Issue for Material Requisition (Item code wise)";

    public IssueForMaterialRequisitionItemCodeWise() {
        initComponents();
        buttonSave.setEnabled(false);
        this.setTitle(internalFrameName);
        model_IssueTable = (DefaultTableModel) tableIssue.getModel();
        model_ChooseFromTable = (DefaultTableModel) tableMRN.getModel();
        model_SearchTable = (DefaultTableModel) tableSearch.getModel();

        LoadSystemDate();
        loadDepartmentsToCombo();
        listOrderByMRNIDForAll();
        LoadTaxesToLables();

        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround); //cornerBackground

        ImageIcon cornerBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/cornerBackground.jpg");
        backgroundCornerLabel.setIcon(cornerBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        ButtonPreview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSearch = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        TextDate = new javax.swing.JTextField();
        PanelPurchaseOrder = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMRN = new javax.swing.JTable();
        PanelGRN = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableIssue = new javax.swing.JTable();
        ButtonAddSelected = new javax.swing.JButton();
        lbl_category1 = new javax.swing.JLabel();
        textMRNNumber = new javax.swing.JTextField();
        buttonPreviewPO = new javax.swing.JButton();
        buttonAddToTable = new javax.swing.JButton();
        ButtonAddAll = new javax.swing.JButton();
        CalendarButtonExpDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        buttonUpdate = new javax.swing.JButton();
        textIssueBy = new javax.swing.JTextField();
        txtIssueID = new javax.swing.JTextField();
        lbl_description1 = new javax.swing.JLabel();
        comboBoxFilter = new javax.swing.JComboBox();
        buttonWriteNotes = new javax.swing.JButton();
        textNumberTransactions = new javax.swing.JTextField();
        textNumbersInMRN = new javax.swing.JTextField();
        textNumbersInIssue = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lableOtherCharges = new javax.swing.JLabel();
        lbl_category2 = new javax.swing.JLabel();
        txtOtherChargers = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtTotalWithTax = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        lbl_category6 = new javax.swing.JLabel();
        txtTotalNoTax = new javax.swing.JFormattedTextField();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        textEnteredQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        lbl_description2 = new javax.swing.JLabel();
        textAvailableQuantity = new javax.swing.JFormattedTextField();
        backgroundCornerLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1097, 674));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSave.setMnemonic('s');
        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, 80, -1));

        buttonRefresh.setMnemonic('d');
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        panel1.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 80, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText(" Search pending material requisitions");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 200, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 610, 80, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 610, 80, -1));

        tableSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MRN number", "Date", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSearch.getTableHeader().setReorderingAllowed(false);
        tableSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSearch);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 110));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 250, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 600, 350, -1));

        TextDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextDate.setEnabled(false);
        panel1.add(TextDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 130, -1));

        PanelPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Material requisition note items"));

        tableMRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "MRN Quantity", "Amount", "Set pending?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMRN.getTableHeader().setReorderingAllowed(false);
        tableMRN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMRNMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableMRN);
        if (tableMRN.getColumnModel().getColumnCount() > 0) {
            tableMRN.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelPurchaseOrderLayout = new javax.swing.GroupLayout(PanelPurchaseOrder);
        PanelPurchaseOrder.setLayout(PanelPurchaseOrderLayout);
        PanelPurchaseOrderLayout.setHorizontalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelPurchaseOrderLayout.setVerticalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        panel1.add(PanelPurchaseOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 1050, 170));

        PanelGRN.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Issue items"));

        tableIssue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Issue Qunatity", "Amount", "Expire Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableIssue.getTableHeader().setReorderingAllowed(false);
        tableIssue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableIssueMouseClicked(evt);
            }
        });
        tableIssue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableIssueKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tableIssue);
        if (tableIssue.getColumnModel().getColumnCount() > 0) {
            tableIssue.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelGRNLayout = new javax.swing.GroupLayout(PanelGRN);
        PanelGRN.setLayout(PanelGRNLayout);
        PanelGRNLayout.setHorizontalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGRNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelGRNLayout.setVerticalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGRNLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        panel1.add(PanelGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 1050, 120));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 120, -1));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("Issue by");
        panel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, 60, 20));

        textMRNNumber.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textMRNNumber.setEnabled(false);
        panel1.add(textMRNNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, 120, -1));

        buttonPreviewPO.setText("Preview MRN");
        buttonPreviewPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviewPOActionPerformed(evt);
            }
        });
        panel1.add(buttonPreviewPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 110, -1));

        buttonAddToTable.setText("Add to MRN items");
        buttonAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddToTableActionPerformed(evt);
            }
        });
        panel1.add(buttonAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, 120, -1));

        ButtonAddAll.setText("Add all");
        ButtonAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddAllActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, 110, -1));

        CalendarButtonExpDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonExpDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonExpDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 440, 120, -1));

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });
        panel1.add(buttonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, 120, -1));

        textIssueBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textIssueByKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textIssueByKeyReleased(evt);
            }
        });
        panel1.add(textIssueBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 60, 210, -1));

        txtIssueID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtIssueID.setEnabled(false);
        panel1.add(txtIssueID, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 610, 110, -1));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("Available quantity");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 230, 100, 20));

        comboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        comboBoxFilter.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxFilterPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboBoxFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboBoxFilterKeyPressed(evt);
            }
        });
        panel1.add(comboBoxFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 250, -1));

        buttonWriteNotes.setText("Write any notes?");
        buttonWriteNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWriteNotesActionPerformed(evt);
            }
        });
        panel1.add(buttonWriteNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 610, 120, -1));

        textNumberTransactions.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumberTransactions.setEnabled(false);
        panel1.add(textNumberTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 70, -1));

        textNumbersInMRN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInMRN.setText("0");
        textNumbersInMRN.setEnabled(false);
        panel1.add(textNumbersInMRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 70, -1));

        textNumbersInIssue.setEditable(false);
        textNumbersInIssue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInIssue.setText("0");
        textNumbersInIssue.setEnabled(false);
        panel1.add(textNumbersInIssue, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 70, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lableOtherCharges.setForeground(new java.awt.Color(102, 102, 102));
        lableOtherCharges.setText("Other chargers (Rs)");
        jPanel1.add(lableOtherCharges, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 20));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Total (with other chargers) =");
        jPanel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, 20));

        txtOtherChargers.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtOtherChargers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOtherChargers.setText("0.00");
        txtOtherChargers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOtherChargersFocusGained(evt);
            }
        });
        txtOtherChargers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOtherChargersMouseClicked(evt);
            }
        });
        txtOtherChargers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOtherChargersKeyPressed(evt);
            }
        });
        jPanel1.add(txtOtherChargers, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 160, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 160, -1));

        txtTotalWithTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalWithTax.setText("0.00");
        txtTotalWithTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWithTax.setEnabled(false);
        jPanel1.add(txtTotalWithTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 160, -1));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 100, 20));

        lbl_category6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category6.setText("Total (without other chargers)");
        jPanel1.add(lbl_category6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 160, 20));

        txtTotalNoTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTotalNoTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalNoTax.setText("0.00");
        txtTotalNoTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalNoTax.setEnabled(false);
        jPanel1.add(txtTotalNoTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 10, 160, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 560, 110));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextPurchasePrice.setEnabled(false);
        TextPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPurchasePriceKeyPressed(evt);
            }
        });
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 440, 110, -1));

        textEnteredQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        textEnteredQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textEnteredQuantity.setText("0.000");
        textEnteredQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textEnteredQuantityFocusGained(evt);
            }
        });
        textEnteredQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textEnteredQuantityKeyPressed(evt);
            }
        });
        panel1.add(textEnteredQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 440, 110, -1));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        TextAmount.setEnabled(false);
        TextAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAmountKeyPressed(evt);
            }
        });
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 440, 100, -1));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Issue Date");
        panel1.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, 80, 20));

        textAvailableQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textAvailableQuantity.setText("0.000");
        textAvailableQuantity.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textAvailableQuantity.setEnabled(false);
        panel1.add(textAvailableQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(929, 230, 120, -1));

        backgroundCornerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(backgroundCornerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 460, 110));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 184, 1070, 460));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadSystemDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Statement stmt;
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rset = stmt.executeQuery("SELECT sysDate FROM SystemDate");
            if (rset.next()) {
                TextDate.setText(sdf.format(rset.getDate("sysDate")));
            }
            rset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void loadDepartmentsToCombo() {
        String Type = "Stock";
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments where Type != '" + Type + "' order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboBoxFilter.removeAllItems();
            comboBoxFilter.insertItemAt("All", 0);
            comboBoxFilter.insertItemAt("MRN number", 1);
            int position = 2;
            if (rset.next()) {
                do {
                    comboBoxFilter.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboBoxFilter.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void LoadTaxesToLables() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Taxes";
            ResultSet rset = stmt.executeQuery(query);

            if (rset.next()) {
                lableOtherCharges.setText(rset.getString("Other"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        int GRnRowCount = tableIssue.getRowCount();
        String SupplierInvoice = textIssueBy.getText();
        if (comboBoxFilter.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Department is not selected.", "No department", JOptionPane.OK_OPTION);
            comboBoxFilter.requestFocus();
        } else if (TextDate.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Something wrong. Date is not loaded. '" + internalFrameName + "' will close now. Please restart the application.", "System error", JOptionPane.OK_OPTION);
            this.dispose();
        } else if (SupplierInvoice.equals("")) {
            JOptionPane.showMessageDialog(this, "Issue by is not inserted.", "Empty name", JOptionPane.OK_OPTION);
            textIssueBy.requestFocus();
        } else if (GRnRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not inserted to '" + internalFrameName + "'.", "No items", JOptionPane.OK_OPTION);
        } else if (txtOtherChargers.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Other chargers field is empty.", "Empty fields", JOptionPane.OK_OPTION);
            txtOtherChargers.requestFocus();
        } else if (!txtOtherChargers.getText().equals("")) {
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            if (OtherChargers < 0) {
                JOptionPane.showMessageDialog(this, "Other Chargers is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtOtherChargers.requestFocus();
            } else {
                int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this '" + internalFrameName + "'?", "Save '" + internalFrameName + "'?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    LoadTime();
                }
            }
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);

            if (resultset.next()) {
                Date = IndexPage.LabelDate.getText();
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                SaveAsIssue(Time, Date);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

    }

    private void SaveAsIssue(String Time, String Date) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate, MRNID = "", UnitSell;
        double PurchasePrice, Quantity, Amount;
        double CurrentQuantity, NewQuantity, calculatedPoRecivedQuantity, recivedPoQuantity;
        double PresentageShowSellPrice, SellPrice, AddedValueForCalSellPrice, OriginalSellPrice;
        int PriceLevel = 0;
        ResultSet RSETCurrentItemQuantity, RSETPoRecivedItemQuantity;
        try {
            String issueBy = textIssueBy.getText();
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String Remarks = "";
            String departmentCode[] = comboBoxFilter.getSelectedItem().toString().split("--");
            int HasPaid = 0;
            String IsReturn = "No";
            String ForEmptyFields = "-";

            String ID;
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("ISSUE");
            ID = AutoID.getDocChar() + AutoID.getDocNumber();
            txtIssueID.setText(ID);
            ID = txtIssueID.getText();

            //////////////////////////////////////////////////////////////////
            int IssueRowCount = tableIssue.getRowCount();
            int MRNRowCount = tableMRN.getRowCount();
            if (MRNRowCount > 0) {
                MRNID = textMRNNumber.getText();
            } else if (MRNRowCount <= 0) {
                MRNID = "";
            }

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [Issuemain]\n"
                    + "           ([IssueID]\n"
                    + "           ,[IssueDate]\n"
                    + "           ,[IssueTime]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentCode]\n"
                    + "           ,[IssueBy]\n"
                    + "           ,[MRNID])\n"
                    + "     VALUES\n"
                    + "           ('" + ID + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + departmentCode[1] + "'\n"
                    + "           ,'" + issueBy + "'\n"
                    + "           ,'" + MRNID + "')";

            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtCurrentQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtBinCardInsert = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtPOItemsRecivedQtyUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtPOItemsCheckRecivedQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtItemsAtDepartmentsQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < IssueRowCount; i++) {
                ItemCode = tableIssue.getValueAt(i, 0).toString();
                ItemName = tableIssue.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableIssue.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableIssue.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tableIssue.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tableIssue.getValueAt(i, 5).toString()));
                ExpireDate = tableIssue.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [IssueItems]\n"
                        + "           ([IssueID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[MRNID]\n"
                        + "           ,[IssueDate]\n"
                        + "           ,[Notes])\n"
                        + "     VALUES\n"
                        + "           ('" + ID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + OtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + MRNID + "'\n"
                        + "           ,'" + Date + "'\n"
                        + "           ,'" + ForEmptyFields + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
                String CurrentQtyQuery = "SELECT Quantity, SellPrice, UnitSell FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETCurrentItemQuantity = stmtCurrentQty.executeQuery(CurrentQtyQuery);

                if (RSETCurrentItemQuantity.next()) {
                    CurrentQuantity = RSETCurrentItemQuantity.getDouble("Quantity");
                    NewQuantity = roundThreeDecimals(CurrentQuantity - Quantity);
                    SellPrice = RSETCurrentItemQuantity.getDouble("SellPrice");
                    UnitSell = RSETCurrentItemQuantity.getString("UnitSell");

                    String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "' where ItemCode='" + ItemCode + "'";
                    stmtStockUpdate.execute(StockUpdateQuery);

                    if (!MRNID.isEmpty() && MRNRowCount > 0) {
                        String RecivedQtyQuery = "SELECT Quantity, RecivedQuantity FROM MRNItems WHERE (MRNID = '" + MRNID + "' AND ItemCode='" + ItemCode + "')";
                        RSETPoRecivedItemQuantity = stmtPOItemsCheckRecivedQty.executeQuery(RecivedQtyQuery);

                        if (RSETPoRecivedItemQuantity.next()) {
                            recivedPoQuantity = RSETPoRecivedItemQuantity.getDouble("RecivedQuantity");
                            calculatedPoRecivedQuantity = recivedPoQuantity + Quantity;
                            String poItemsRecivedQtyUpdateQuery = "Update MRNItems set RecivedQuantity = '" + calculatedPoRecivedQuantity + "' where (MRNID = '" + MRNID + "' AND ItemCode='" + ItemCode + "')";
                            stmtPOItemsRecivedQtyUpdate.execute(poItemsRecivedQtyUpdateQuery);
                        }
                    }

                    String ItemsAtDepartmentsInsert = "INSERT INTO [ItemsAtDepartments]\n"
                            + "           ([ItemCode]\n"
                            + "           ,[DepartmentCode]\n"
                            + "           ,[SellPrice]\n"
                            + "           ,[Quantity]\n"
                            + "           ,[UnitSell]\n"
                            + "           ,[PriceLevel])\n"
                            + "     VALUES\n"
                            + "           ('" + ItemCode + "'\n"
                            + "           ,'" + departmentCode[1] + "'\n"
                            + "           ,'" + SellPrice + "'\n"
                            + "           ,'" + Quantity + "'\n"
                            + "           ,'" + UnitSell + "'\n"
                            + "           ,'" + PriceLevel + "')";
                    stmtItemsAtDepartmentsQty.execute(ItemsAtDepartmentsInsert);

                    String BinCardInsert = "INSERT INTO [BinCard]\n"
                            + "           ([ItemCode]\n"
                            + "           ,[Date]\n"
                            + "           ,[Time]\n"
                            + "           ,[OtherNotes]\n"
                            + "           ,[RecivedID]\n"
                            + "           ,[RecivedFrom]\n"
                            + "           ,[RecivedQuantity]\n"
                            + "           ,[IssuedID]\n"
                            + "           ,[IssuedTo]\n"
                            + "           ,[IssuedQuantity]\n"
                            + "           ,[BalanceQty])\n"
                            + "     VALUES\n"
                            + "           ('" + ItemCode + "'\n"
                            + "           ,'" + Date + "'\n"
                            + "           ,'" + Time + "'\n"
                            + "           ,'" + MRNID + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'0'\n"
                            + "           ,'" + ID + "'\n"
                            + "           ,'" + departmentCode[1] + "'\n"
                            + "           ,'" + Quantity + "'\n"
                            + "           ,'" + NewQuantity + "')";
                    stmtBinCardInsert.execute(BinCardInsert);
                }
            }

            stmtItems.close();
            stmtCurrentQty.close();
            stmtStockUpdate.close();
            stmtBinCardInsert.close();
            stmtPOItemsRecivedQtyUpdate.close();
            stmtPOItemsCheckRecivedQty.close();
            stmtItemsAtDepartmentsQty.close();

            if (!MRNID.isEmpty() && MRNRowCount > 0) {
                updateMRNItemIsPending();
            }

            JOptionPane.showMessageDialog(this, "'" + internalFrameName + "' is successfully saved.");
            buttonSave.setEnabled(false);
            btnCalculate.setEnabled(false);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void updateMRNItemIsPending() {
        String MRNItemCode, MRNItemStatue, MRNID;
        try {
            int poRowCount = tableMRN.getRowCount();
            MRNID = textMRNNumber.getText();
            java.sql.Statement stmtPOItemsIsPendingUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < poRowCount; i++) {
                MRNItemCode = tableMRN.getValueAt(i, 0).toString();
                MRNItemStatue = tableMRN.getValueAt(i, 6).toString();

                String poItemsRecivedQtyUpdateQuery = "Update MRNItems set IsPending = '" + MRNItemStatue + "' where (MRNID = '" + MRNID + "' AND ItemCode='" + MRNItemCode + "')";
                stmtPOItemsIsPendingUpdate.execute(poItemsRecivedQtyUpdateQuery);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        Refresh();

    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh '" + internalFrameName + "' window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            LoadSystemDate();
            loadDepartmentsToCombo();
            LoadTaxesToLables();

            buttonSave.setEnabled(false);
            textIssueBy.setText("");

            txtTotalNoTax.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            txtSearch.setText("");
            txtSearch.setEnabled(true);
            textMRNNumber.setText("");
            tableSearch.setEnabled(true);
            comboBoxFilter.setSelectedIndex(0);
            comboBoxFilter.setEnabled(true);
            buttonAddToTable.setEnabled(true);

            TextPurchasePrice.setText("0.00");
            textEnteredQuantity.setText("0.000");
            TextAmount.setText("0.00");
            CalendarButtonExpDate.setText("");
            txtIssueID.setText("");
            btnCalculate.setEnabled(true);

            textNumbersInIssue.setText("0");
            textNumbersInMRN.setText("0");

            ButtonAddSelected.setEnabled(true);
            ButtonAddAll.setEnabled(true);
            textAvailableQuantity.setText("0.000");

            try {
                int rowi = model_IssueTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_IssueTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            try {
                int rowj = model_ChooseFromTable.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_ChooseFromTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            try {
                int rowk = model_SearchTable.getRowCount();
                for (int k = 0; k < rowk; k++) {
                    model_SearchTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            listOrderByMRNIDForAll();
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void exit() {
        int rowCount = tableIssue.getRowCount();
        String ID = txtIssueID.getText();
        if (rowCount > 0 && ID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this '" + internalFrameName + "'?", "Exit '" + internalFrameName + "'?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (issueForMaterialRequisitionItemCodeWise != null) {
                    issueForMaterialRequisitionItemCodeWise = null;
                }
                this.dispose();
            }
        } else if (rowCount <= 0 && ID.isEmpty()) {
            if (issueForMaterialRequisitionItemCodeWise != null) {
                issueForMaterialRequisitionItemCodeWise = null;
            }
            this.dispose();
        } else {
            if (issueForMaterialRequisitionItemCodeWise != null) {
                issueForMaterialRequisitionItemCodeWise = null;
            }
            this.dispose();
        }
    }

    private void tableSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSearchMouseClicked
        String poID, supplierCode, supplierName;
        int SelectedRowCount = tableSearch.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            poID = tableSearch.getValueAt(tableSearch.getSelectedRow(), 0).toString();
            supplierCode = tableSearch.getValueAt(tableSearch.getSelectedRow(), 2).toString();
            textMRNNumber.setText(poID);
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                query = "SELECT DepartmentName FROM Departments where DepartmentCode = '" + supplierCode + "'";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                if (reset.next()) {
                    supplierName = reset.getString("DepartmentName");
                    comboBoxFilter.setSelectedItem(supplierName + "--" + supplierCode);
                    comboBoxFilter.setEnabled(false);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }//GEN-LAST:event_tableSearchMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        if (comboSelected.equals("MRN number")) {
            String MRNNumber = txtSearch.getText();
            SearchByMRNNumber(MRNNumber);
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchByMRNNumber(String MRNNumber) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!MRNNumber.equals("")) {
                query = "SELECT MRNID, MRNDate, DepartmentCode FROM MRNMain WHERE MRNID LIKE '%" + MRNNumber + "%' AND IsPending = 'Yes'";
            } else {
                query = "SELECT MRNID, MRNDate, DepartmentCode FROM MRNMain WHERE MRNID LIKE '%" + MRNNumber + "%' AND IsPending = 'Yes'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                tableSearch.setValueAt(reset.getString("MRNID"), rowCount, 0);
                tableSearch.setValueAt(reset.getString("MRNDate"), rowCount, 1);
                tableSearch.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            stmt.close();
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByMRNIDForAll() {
        RefreshSearchTable();
        int rowCount = 0;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT MRNID, MRNDate, DepartmentCode FROM MRNmain WHERE IsPending = 'Yes' ORDER BY MRNID";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                tableSearch.setValueAt(reset.getString("MRNID"), rowCount, 0);
                tableSearch.setValueAt(reset.getString("MRNDate"), rowCount, 1);
                tableSearch.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            stmt.close();
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshSearchTable() {
        try {
            int row = model_SearchTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_SearchTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void tableIssueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableIssueMouseClicked
        if (evt.getClickCount() == 1) {
            buttonSave.setEnabled(false);
            String PurchasePrice, Quantity, Amount;
            float CheckAmount = Float.parseFloat(tableIssue.getValueAt(tableIssue.getSelectedRow(), 5).toString());
            if (CheckAmount > 0) {
                PurchasePrice = tableIssue.getValueAt(tableIssue.getSelectedRow(), 3).toString();
                Quantity = tableIssue.getValueAt(tableIssue.getSelectedRow(), 4).toString();
                Amount = tableIssue.getValueAt(tableIssue.getSelectedRow(), 5).toString();
                TextPurchasePrice.setText(PurchasePrice);
                textEnteredQuantity.setText(Quantity);
                TextAmount.setText(Amount);
                textEnteredQuantity.requestFocus();
                textEnteredQuantity.selectAll();
            }
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableIssue.getSelectedRow();
                model_IssueTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                textEnteredQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalendarButtonExpDate.setText("");
                CalculateAmountWithOutTax();
                countGrnItems();
            }
        }
    }//GEN-LAST:event_tableIssueMouseClicked

    public void countGrnItems() {
        textNumbersInIssue.setText(model_IssueTable.getRowCount() + "");
    }

    private void CalendarButtonExpDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonExpDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date ExpDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonExpDate.setText(format.format(ExpDate));
            buttonUpdate.requestFocus();
        }
    }//GEN-LAST:event_CalendarButtonExpDatePropertyChange

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = tableIssue.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            if (!TextPurchasePrice.getText().equals("") && !textEnteredQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(textEnteredQuantity.getText());
                float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {
                    CheckAtUpdateButtonBeforeUpdate();
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void CheckAtUpdateButtonBeforeUpdate() {
        if (!TextPurchasePrice.getText().equals("") && !textEnteredQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            try {
                float Amount, AvailableQuantity;
                int SelectedRow = tableIssue.getSelectedRow();
                float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                float Quantity = Float.parseFloat(textEnteredQuantity.getText());
                if (0 < Quantity) {
                    String ItemCode = tableIssue.getValueAt(SelectedRow, 0).toString();
                    ResultSet RSETAvaItems;
                    java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                    RSETAvaItems = stmtItems.executeQuery(ItemQuery);
                    if (RSETAvaItems.next()) {
                        AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                        if (AvailableQuantity >= Quantity) {
                            Amount = PurchasePrice * Quantity;
                            TextAmount.setText("" + roundTwoDecimals(Amount));
                            UpdateToReturnTable();
                            buttonUpdate.requestFocus();
                        } else if (AvailableQuantity < Quantity) {
                            JOptionPane.showMessageDialog(this, "Issue quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                            textEnteredQuantity.requestFocus();
                        }
                    }
                    stmtItems.close();
                    RSETAvaItems.close();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity is not enough to Issue.", "Not enough.", JOptionPane.OK_OPTION);
                }
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (SQLException ex) {
                Logger.getLogger(IssueForMaterialRequisitionItemCodeWise.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (TextPurchasePrice.getText().equals("") || textEnteredQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void UpdateToReturnTable() {
        int SelectedRow = tableIssue.getSelectedRow();
        double PurchasePrice = Double.parseDouble(TextPurchasePrice.getText());
        double Quantity = Double.parseDouble(textEnteredQuantity.getText());
        double Amount = roundTwoDecimals(PurchasePrice * Quantity);
        String ExpireDate = CalendarButtonExpDate.getText();
        if (ExpireDate.isEmpty()) {
            ExpireDate = "Not Define";
        }

        tableIssue.setValueAt(PurchasePrice, SelectedRow, 3);
        tableIssue.setValueAt(Quantity, SelectedRow, 4);
        tableIssue.setValueAt(Amount, SelectedRow, 5);
        tableIssue.setValueAt(ExpireDate, SelectedRow, 6);

        CalculateAmountWithOutTax();
    }

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int GRNTableRowCount = tableIssue.getRowCount();
        for (int i = 0; i < GRNTableRowCount; i++) {
            ItemPriceAmount = Float.parseFloat(tableIssue.getValueAt(i, 5).toString());
            TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
        }
        txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
    }
    private void tableIssueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableIssueKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = tableIssue.getSelectedRow();
                model_IssueTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                textEnteredQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalendarButtonExpDate.setText("");
                CalculateAmountWithOutTax();
            }

        }
    }//GEN-LAST:event_tableIssueKeyPressed

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = tableMRN.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String itemInPO = tableMRN.getValueAt(tableMRN.getSelectedRow(), 0).toString();
            Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(itemInPO);
            if ((Boolean) CheckItemAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
            } else {
                ButtonAddAll.setEnabled(false);
                AddSingleItemToTransactionTable();
            }

        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    protected Object[] CheckItemAlreadyAdded(String itemInPO) {
        int rowCount = model_IssueTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String GRNTableItemCode = model_IssueTable.getValueAt(i, 0).toString();
            if (itemInPO.equals(GRNTableItemCode)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void AddSingleItemToTransactionTable() {
        String ItemCode, ItemName, PurchaseUnitCode, expireDate;
        double PurchasePrice, Quantity, Amount, availableQuantity, enteredQuantity;
        int getSelectedRowAtPO = tableMRN.getSelectedRow();
        try {
            availableQuantity = Double.parseDouble(textAvailableQuantity.getText());
            ItemCode = tableMRN.getValueAt(getSelectedRowAtPO, 0).toString();
            ItemName = tableMRN.getValueAt(getSelectedRowAtPO, 1).toString();
            PurchaseUnitCode = tableMRN.getValueAt(getSelectedRowAtPO, 2).toString();
            PurchasePrice = roundTwoDecimals(Double.parseDouble(tableMRN.getValueAt(getSelectedRowAtPO, 3).toString()));
            enteredQuantity = roundThreeDecimals(Double.parseDouble(textEnteredQuantity.getText()));
            Amount = enteredQuantity * PurchasePrice;
            expireDate = "Not define";

            if (availableQuantity >= enteredQuantity && enteredQuantity > 0) {
                model_IssueTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, enteredQuantity, Amount, expireDate});
                int getRowCountAtGRN = tableIssue.getRowCount();
                textNumbersInIssue.setText(String.valueOf(getRowCountAtGRN));
                CalculateAmountWithOutTax();
            } else if (availableQuantity < enteredQuantity || enteredQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Issue quantity should be less than or equal to available quantity.", "Not enough.", JOptionPane.OK_OPTION);
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void ButtonAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddAllActionPerformed
        buttonSave.setEnabled(false);
        AddAllItemsToTransactionTable();
    }//GEN-LAST:event_ButtonAddAllActionPerformed

    private void AddAllItemsToTransactionTable() {
        String ItemCode, ItemName, PurchaseUnitCode, expireDate;
        double PurchasePrice, Quantity, Amount, availableQuantity;
        int getRowCountAtPO = tableMRN.getRowCount();

        try {
            ResultSet RSETAvaItems;
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < getRowCountAtPO; i++) {
                ItemCode = tableMRN.getValueAt(i, 0).toString();
                String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETAvaItems = stmtItems.executeQuery(ItemQuery);
                if (RSETAvaItems.next()) {
                    availableQuantity = RSETAvaItems.getFloat("Quantity");

                    ItemName = tableMRN.getValueAt(i, 1).toString();
                    PurchaseUnitCode = tableMRN.getValueAt(i, 2).toString();
                    PurchasePrice = roundTwoDecimals(Double.parseDouble(tableMRN.getValueAt(i, 3).toString()));
                    Quantity = roundThreeDecimals(Double.parseDouble(tableMRN.getValueAt(i, 4).toString()));
                    Amount = Quantity * PurchasePrice;
                    expireDate = "Not define";
                    if (availableQuantity >= Quantity) {
                        model_IssueTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, Quantity, Amount, expireDate});
                    }
                }
                RSETAvaItems.close();
            }
            stmtItems.close();
            ButtonAddSelected.setEnabled(false);
            ButtonAddAll.setEnabled(false);
            int getRowCountAtGRN = tableIssue.getRowCount();
            textNumbersInIssue.setText(String.valueOf(getRowCountAtGRN));
            CalculateAmountWithOutTax();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (SQLException ex) {
            Logger.getLogger(IssueForMaterialRequisitionItemCodeWise.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void textIssueByKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textIssueByKeyReleased
        ValidateFields.CheckForOtherFields(textIssueBy);
    }//GEN-LAST:event_textIssueByKeyReleased

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String GRNID = txtIssueID.getText();
        if (GRNID.isEmpty()) {
            int GRnRowCount = tableIssue.getRowCount();
            if (GRnRowCount <= 0) {
                JOptionPane.showMessageDialog(this, "items are not added to preview.", "Not added", JOptionPane.OK_OPTION);
            } else if (GRnRowCount > 0) {
                int x = JOptionPane.showConfirmDialog(this, "'" + internalFrameName + "' is still not saved.\nDo you want to view a test preview?", "View a test preview?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    try {
                        java.sql.Statement stmtDelete = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String queryMain = "delete From InvTrTestPreviewMain";
                        stmtDelete.execute(queryMain);
                        String queryItems = "delete From InvTrTestPreviewItems";
                        stmtDelete.execute(queryItems);

                        String GRNTime = "No time";
                        String GRNDate = "No date";
                        SaveForTestPreview(GRNTime, GRNDate);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                }
            }
        } else if (!GRNID.isEmpty()) {
            Preview();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void SaveForTestPreview(String GRNTime, String GRNDate) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate;
        double PurchasePrice, Quantity, Amount;
        try {
            String POID = textMRNNumber.getText();
            String SupplierInvoice = textIssueBy.getText();
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = 0;
            float Tax1 = 0;
            float Tax2 = 0;
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = "Not define";
            String PaymentType = "Not define";
            String CreditPeriod = "0";
            String PeriodEndsOn = "Not define";

            String Remarks = "";
            String DepartmentsCode[] = comboBoxFilter.getSelectedItem().toString().split("--");
            String GRNID = "Test Preview";

            //////////////////////////////////////////////////////////////////
            int GRNRowCount = tableIssue.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [InvTrTestPreviewMain]\n"
                    + "           ([TransactionID]\n"
                    + "           ,[Date]\n"
                    + "           ,[Time]\n"
                    + "           ,[PreviousID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + GRNID + "'\n"
                    + "           ,'" + GRNDate + "'\n"
                    + "           ,'" + GRNTime + "'\n"
                    + "           ,'" + POID + "'\n"
                    + "           ,'" + DepartmentsCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + DepartmentsCode[1] + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < GRNRowCount; i++) {
                ItemCode = tableIssue.getValueAt(i, 0).toString();
                ItemName = tableIssue.getValueAt(i, 1).toString();
                PurchaseUnitCode = tableIssue.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(tableIssue.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(tableIssue.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(tableIssue.getValueAt(i, 5).toString()));
                ExpireDate = tableIssue.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [InvTrTestPreviewItems]\n"
                        + "           ([TransactionID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ExpireDate])\n"
                        + "     VALUES\n"
                        + "           ('" + GRNID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + ExpireDate + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
            }
            stmtItems.close();
            TestPreview();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void TestPreview() {
        String TransactionID = "Test Preview";
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", TransactionID);
            map.put("Logo", PathToLogo);

            String Report = "TestPreview.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Data Reports/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void comboBoxFilterPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxFilterPopupMenuWillBecomeInvisible
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        if (comboSelected.equals("All")) {
            listOrderByMRNIDForAll();
        } else if (comboSelected.equals("MRN number")) {
            RefreshForComboAtOthers();
            txtSearch.requestFocus();
        } else {
            RefreshForComboAtOthers();
        }
    }//GEN-LAST:event_comboBoxFilterPopupMenuWillBecomeInvisible

    private void comboBoxFilterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboBoxFilterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String comboSelected = comboBoxFilter.getSelectedItem().toString();
            if (comboSelected.equals("All")) {
                listOrderByMRNIDForAll();
            } else if (comboSelected.equals("MRN number")) {
                RefreshForComboAtOthers();
                txtSearch.requestFocus();
            } else {
                RefreshForComboAtOthers();
            }
        }
    }//GEN-LAST:event_comboBoxFilterKeyPressed

    private void textIssueByKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textIssueByKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!textIssueBy.getText().isEmpty()) {

            }
        }
    }//GEN-LAST:event_textIssueByKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        issueForMaterialRequisitionItemCodeWise.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void buttonWriteNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWriteNotesActionPerformed
        String ID = txtIssueID.getText();
        if (!ID.equals("")) {
            new WriteNotesCommon(this).setVisible(true);
        } else if (ID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the '" + internalFrameName + "'. After that you can write your notes.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonWriteNotesActionPerformed

    private void RefreshForComboAtOthers() {
        RefreshSearchTable();
        txtSearch.setText("");
        txtSearch.requestFocus();
        textNumberTransactions.setText("0");
    }

    private void buttonAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddToTableActionPerformed
        RefreshChooseItemsTable();
    }//GEN-LAST:event_buttonAddToTableActionPerformed

    private void buttonPreviewPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviewPOActionPerformed
        int SelectedRowCount = tableSearch.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            PreviewMRN();
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in search table.", "Select a single row", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonPreviewPOActionPerformed

    private void txtOtherChargersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherChargersFocusGained
        txtOtherChargers.selectAll();
    }//GEN-LAST:event_txtOtherChargersFocusGained

    private void txtOtherChargersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOtherChargersMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtOtherChargersMouseClicked

    private void txtOtherChargersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtherChargersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtOtherChargers.getText();
            if (!EnteredValue.isEmpty()) {
                btnCalculate.requestFocus();
            }
            //            else if(EnteredValue.isEmpty()){
            //                txtDiscount.setText("0.00");
            //                txtTax1.requestFocus();
            //            }
        }
    }//GEN-LAST:event_txtOtherChargersKeyPressed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        float TotalWithTaxes;
        //        String Value1 = txtTotalNoTax.getText().toString();
        String Value5 = txtOtherChargers.getText();

        if (!Value5.isEmpty()) {
            try {
                float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
                float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

                TotalWithTaxes = (TotalWithoutTaxes + OtherChargers);
                txtTotalWithTax.setText(String.valueOf(TotalWithTaxes));
                buttonSave.setEnabled(true);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (Value5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void TextPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPurchasePriceKeyPressed

    }//GEN-LAST:event_TextPurchasePriceKeyPressed

    private void textEnteredQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textEnteredQuantityFocusGained
        textEnteredQuantity.selectAll();
    }//GEN-LAST:event_textEnteredQuantityFocusGained

    private void textEnteredQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textEnteredQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckAtQuantityFieldBeforeUpdate();
        }
    }//GEN-LAST:event_textEnteredQuantityKeyPressed

    private void CheckAtQuantityFieldBeforeUpdate() {
        if (!TextPurchasePrice.getText().equals("") && !textEnteredQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            float Amount, AvailableQuantity;
            int SelectedRow = tableMRN.getSelectedRow();
            float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
            float TransferQuantity = Float.parseFloat(textEnteredQuantity.getText());

            if (TransferQuantity > 0) {
                try {
                    String ItemCode = tableMRN.getValueAt(SelectedRow, 0).toString();
                    ResultSet RSETAvaItems;
                    java.sql.Statement stmtGRNItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                    RSETAvaItems = stmtGRNItems.executeQuery(ItemQuery);
                    if (RSETAvaItems.next()) {
                        AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                        if (AvailableQuantity >= TransferQuantity) {
                            Amount = PurchasePrice * TransferQuantity;
                            TextAmount.setText("" + roundTwoDecimals(Amount));
                            buttonUpdate.requestFocus();
                        } else if (AvailableQuantity < TransferQuantity) {
                            JOptionPane.showMessageDialog(this, "Issue quantity should be less than the available quantity.", "Not enough.", JOptionPane.OK_OPTION);
                            textEnteredQuantity.requestFocus();
                        }
                    }
                    stmtGRNItems.close();
                    RSETAvaItems.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                } catch (HeadlessException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (TransferQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
            }

        } else if (TextPurchasePrice.getText().equals("") || textEnteredQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void TextAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAmountKeyPressed

    }//GEN-LAST:event_TextAmountKeyPressed

    private void tableMRNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMRNMouseClicked
        int SelectedRowCount = tableMRN.getSelectedRowCount();
        tableIssue.setSelectionMode(0);
        if (SelectedRowCount == 1) {
            float AvailableQuantity;
            int SelectedRow = tableMRN.getSelectedRow();
            try {
                String ItemCode = tableMRN.getValueAt(SelectedRow, 0).toString();
                ResultSet RSETAvaItems;
                java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String ItemQuery = "SELECT Quantity FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETAvaItems = stmtItems.executeQuery(ItemQuery);
                if (RSETAvaItems.next()) {
                    AvailableQuantity = RSETAvaItems.getFloat("Quantity");
                    textAvailableQuantity.setText("" + roundThreeDecimals((AvailableQuantity)));
                    textEnteredQuantity.requestFocus();
                    String PurchasePrice = tableMRN.getValueAt(tableMRN.getSelectedRow(), 3).toString();
                    String Quantity = tableMRN.getValueAt(tableMRN.getSelectedRow(), 4).toString();
                    TextPurchasePrice.setText(PurchasePrice);
                    textEnteredQuantity.setText(Quantity);
                }
                stmtItems.close();
                RSETAvaItems.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }//GEN-LAST:event_tableMRNMouseClicked

    private void PreviewMRN() {
        String poID = textMRNNumber.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("transactionID", poID);
            map.put("Logo", PathToLogo);

            String Report = "PO ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/PO/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshChooseItemsTable() {
        try {
            int row = model_ChooseFromTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ChooseFromTable.removeRow(0);
            }
            AddToChooseItemsTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void AddToChooseItemsTable() {
        String MRNID = textMRNNumber.getText();
        double calculatedQuantity, recivedQuantity, quantity;
        if (!MRNID.isEmpty()) {
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                int rowCount = 0;
                query = "SELECT ItemCode,ItemName,UnitPurchase,PurchasePrice,Quantity,RecivedQuantity,ItemPriceAmount FROM MRNItems where MRNID = '" + MRNID + "' AND IsPending = 'Yes' AND (Quantity > RecivedQuantity) ORDER BY ItemName";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                while (reset.next()) {
                    model_ChooseFromTable.addRow(new Object[model_ChooseFromTable.getColumnCount()]);
                    tableMRN.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                    tableMRN.setValueAt(reset.getString("ItemName"), rowCount, 1);
                    tableMRN.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                    tableMRN.setValueAt(reset.getString("PurchasePrice"), rowCount, 3);
                    recivedQuantity = reset.getDouble("RecivedQuantity");
                    quantity = reset.getDouble("Quantity");
                    calculatedQuantity = quantity - recivedQuantity;
                    tableMRN.setValueAt(calculatedQuantity, rowCount, 4);
                    tableMRN.setValueAt(reset.getString("ItemPriceAmount"), rowCount, 5);
                    tableMRN.setValueAt("No", rowCount, 6);
                    rowCount++;
                }
                textNumbersInMRN.setText(String.valueOf(rowCount));
                reset.close();
                stmt.close();
                buttonAddToTable.setEnabled(false);
                tableSearch.setEnabled(false);
                comboBoxFilter.setEnabled(false);
                txtSearch.setEnabled(false);
                comboInTableCell();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

        } else if (MRNID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Material requisition note is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }
    }

    private void comboInTableCell() {
        TableColumn AuthColumn = tableMRN.getColumnModel().getColumn(6);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("No");
        comboBox.addItem("Yes");
        AuthColumn.setCellEditor(new DefaultCellEditor(comboBox));
    }

    private void Preview() {
        String GRNID = txtIssueID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", GRNID);
            map.put("Logo", PathToLogo);

            String Report = "GRN ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/GRN/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddAll;
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonPreview;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonExpDate;
    private javax.swing.JPanel PanelGRN;
    private javax.swing.JPanel PanelPurchaseOrder;
    private javax.swing.JFormattedTextField TextAmount;
    private javax.swing.JTextField TextDate;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JLabel backgroundCornerLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton buttonAddToTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonPreviewPO;
    private javax.swing.JButton buttonRefresh;
    public static javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonWriteNotes;
    private javax.swing.JComboBox comboBoxFilter;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lableOtherCharges;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_category6;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_subAccount;
    public static javax.swing.JPanel panel1;
    public static javax.swing.JTable tableIssue;
    private javax.swing.JTable tableMRN;
    private javax.swing.JTable tableSearch;
    private javax.swing.JFormattedTextField textAvailableQuantity;
    private javax.swing.JFormattedTextField textEnteredQuantity;
    private javax.swing.JTextField textIssueBy;
    public static javax.swing.JTextField textMRNNumber;
    private javax.swing.JTextField textNumberTransactions;
    private javax.swing.JTextField textNumbersInIssue;
    private javax.swing.JTextField textNumbersInMRN;
    public static javax.swing.JTextField txtIssueID;
    private javax.swing.JFormattedTextField txtOtherChargers;
    private javax.swing.JTextField txtSearch;
    public static javax.swing.JFormattedTextField txtTotalNoTax;
    private javax.swing.JTextField txtTotalWithTax;
    // End of variables declaration//GEN-END:variables
}
