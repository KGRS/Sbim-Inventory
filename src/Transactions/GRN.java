/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.grn;
import OtherDialogs.WriteNotesCommon;
import OtherDialogs.AddFreeItems;
import SearchDialogs.GRNItemSearch;
import db.ConnectSql;
import functions.DocNumGenerator;
import functions.ReadConfig;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ravindu
 */


public class GRN extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_GRNTable, model_POTable, model_SearchTable;
    private final String spliter = "--";
    private DocNumGenerator AutoID;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form GRN
     */
    public GRN() {
        initComponents();

        buttonRecievedDate.setEnabled(false);
        txtCreditPeriod.setEnabled(false);
        buttonSave.setEnabled(false);

        model_GRNTable = (DefaultTableModel) TableGRN.getModel();
        model_POTable = (DefaultTableModel) TablePurchaseOrder.getModel();
        model_SearchTable = (DefaultTableModel) tableSearch.getModel();

        LoadSystemDate();
        LoadSuppliersToCombo();
        loadDepartmentsToCombo();
        listOrderByPOIDForAll();
        LoadTaxesToLables();
        enableV();
        
        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/Transaction/GRN.png");
        labelIcon.setIcon(DefaultBackGround);
        
        ImageIcon internalBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/GrayGradient.png");
        backgroundLabel.setIcon(internalBackGround);
        
        ImageIcon cornerBackGround = new ImageIcon(projectPath + "/pictures/DefaultBackgrounds/InternalFrames/cornerBackground.jpg");
        backgroundCornerLabel.setIcon(cornerBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        ButtonPreview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSearch = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        TextDate = new javax.swing.JTextField();
        PanelPurchaseOrder = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePurchaseOrder = new javax.swing.JTable();
        PanelGRN = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableGRN = new javax.swing.JTable();
        ButtonAddSelected = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lbl_accountType = new javax.swing.JLabel();
        cmbPaymentTypes = new javax.swing.JComboBox();
        buttonRecievedDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        txtTotalNoTax = new javax.swing.JFormattedTextField();
        txtDiscount = new javax.swing.JFormattedTextField();
        txtTax1 = new javax.swing.JFormattedTextField();
        lbl_category2 = new javax.swing.JLabel();
        lbl_category3 = new javax.swing.JLabel();
        txtTax2 = new javax.swing.JFormattedTextField();
        txtOtherChargers = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtTotalWithTax = new javax.swing.JTextField();
        lbl_category6 = new javax.swing.JLabel();
        lbl_accountType1 = new javax.swing.JLabel();
        lbl_accountType2 = new javax.swing.JLabel();
        txtCreditPeriod = new javax.swing.JFormattedTextField();
        lbl_accountType3 = new javax.swing.JLabel();
        txtPeriodEnds = new javax.swing.JTextField();
        lbl_accountType4 = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();
        lableTax2 = new javax.swing.JLabel();
        lableTax1 = new javax.swing.JLabel();
        lableOtherCharges = new javax.swing.JLabel();
        lbl_category1 = new javax.swing.JLabel();
        textPONumber = new javax.swing.JTextField();
        ButtonSearchItems = new javax.swing.JButton();
        buttonPreviewPO = new javax.swing.JButton();
        buttonAddToTable = new javax.swing.JButton();
        ButtonAddAll = new javax.swing.JButton();
        TextPurchasePrice = new javax.swing.JFormattedTextField();
        TextQuantity = new javax.swing.JFormattedTextField();
        TextAmount = new javax.swing.JFormattedTextField();
        CalendarButtonExpDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        buttonUpdate = new javax.swing.JButton();
        cmbSupplier = new javax.swing.JComboBox();
        lbl_category7 = new javax.swing.JLabel();
        TextInvoiceNum = new javax.swing.JTextField();
        txtGRNID = new javax.swing.JTextField();
        lbl_description1 = new javax.swing.JLabel();
        ComboDepartment = new javax.swing.JComboBox();
        buttonWriteNotes = new javax.swing.JButton();
        comboBoxFilter = new javax.swing.JComboBox();
        textNumberTransactions = new javax.swing.JTextField();
        textNumbersInPO = new javax.swing.JTextField();
        textNumbersInGRN = new javax.swing.JTextField();
        buttonAddFreeItems = new javax.swing.JButton();
        labelIcon = new javax.swing.JLabel();
        backgroundCornerLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setIconifiable(true);
        setTitle("GRN (Item code wise)");
        setPreferredSize(new java.awt.Dimension(1097, 674));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSave.setMnemonic('s');
        buttonSave.setText("Save");
        buttonSave.setActionCommand("Delete");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, 80, -1));

        buttonRefresh.setMnemonic('d');
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        panel1.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 80, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Department");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, 80, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText(" Search pending purchase orders");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 200, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 610, 80, -1));

        ButtonPreview.setText("Preview");
        ButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreviewActionPerformed(evt);
            }
        });
        panel1.add(ButtonPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 610, 80, -1));

        tableSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PO number", "Date", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSearch.getTableHeader().setReorderingAllowed(false);
        tableSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSearch);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 150));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 250, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 600, 350, -1));

        TextDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextDate.setEnabled(false);
        panel1.add(TextDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 130, -1));

        PanelPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Purchase order items"));

        TablePurchaseOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "PO Quantity", "Amount", "Set pending?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablePurchaseOrder.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TablePurchaseOrder);
        if (TablePurchaseOrder.getColumnModel().getColumnCount() > 0) {
            TablePurchaseOrder.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelPurchaseOrderLayout = new javax.swing.GroupLayout(PanelPurchaseOrder);
        PanelPurchaseOrder.setLayout(PanelPurchaseOrderLayout);
        PanelPurchaseOrderLayout.setHorizontalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelPurchaseOrderLayout.setVerticalGroup(
            PanelPurchaseOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPurchaseOrderLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        panel1.add(PanelPurchaseOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 1050, 120));

        PanelGRN.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "GRN items"));

        TableGRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "GRN Qunatity", "Amount", "Expire Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableGRN.getTableHeader().setReorderingAllowed(false);
        TableGRN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableGRNMouseClicked(evt);
            }
        });
        TableGRN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableGRNKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(TableGRN);
        if (TableGRN.getColumnModel().getColumnCount() > 0) {
            TableGRN.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout PanelGRNLayout = new javax.swing.GroupLayout(PanelGRN);
        PanelGRN.setLayout(PanelGRNLayout);
        PanelGRNLayout.setHorizontalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelGRNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelGRNLayout.setVerticalGroup(
            PanelGRNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGRNLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        panel1.add(PanelGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 1050, 120));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 120, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("Days");
        jPanel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 50, 20));

        cmbPaymentTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Credit" }));
        cmbPaymentTypes.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbPaymentTypesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbPaymentTypes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbPaymentTypesKeyPressed(evt);
            }
        });
        jPanel1.add(cmbPaymentTypes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 130, -1));

        buttonRecievedDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRecievedDateActionPerformed(evt);
            }
        });
        buttonRecievedDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                buttonRecievedDatePropertyChange(evt);
            }
        });
        jPanel1.add(buttonRecievedDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 130, -1));

        txtTotalNoTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTotalNoTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalNoTax.setText("0.00");
        txtTotalNoTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalNoTax.setEnabled(false);
        jPanel1.add(txtTotalNoTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 10, 160, -1));

        txtDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("0.00");
        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDiscountFocusGained(evt);
            }
        });
        txtDiscount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDiscountMouseClicked(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
        });
        jPanel1.add(txtDiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 40, 160, -1));

        txtTax1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTax1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTax1.setText("0.00");
        txtTax1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTax1FocusGained(evt);
            }
        });
        txtTax1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTax1MouseClicked(evt);
            }
        });
        txtTax1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTax1KeyPressed(evt);
            }
        });
        jPanel1.add(txtTax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 70, 160, -1));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Total (with taxes) =");
        jPanel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 120, 20));

        lbl_category3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category3.setText("Discounts (Rs)");
        jPanel1.add(lbl_category3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 20));

        txtTax2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtTax2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTax2.setText("0.00");
        txtTax2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTax2FocusGained(evt);
            }
        });
        txtTax2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTax2MouseClicked(evt);
            }
        });
        txtTax2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTax2KeyPressed(evt);
            }
        });
        jPanel1.add(txtTax2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 160, -1));

        txtOtherChargers.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtOtherChargers.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOtherChargers.setText("0.00");
        txtOtherChargers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOtherChargersFocusGained(evt);
            }
        });
        txtOtherChargers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOtherChargersMouseClicked(evt);
            }
        });
        txtOtherChargers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOtherChargersKeyPressed(evt);
            }
        });
        jPanel1.add(txtOtherChargers, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 160, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 160, -1));

        txtTotalWithTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalWithTax.setText("0.00");
        txtTotalWithTax.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWithTax.setEnabled(false);
        jPanel1.add(txtTotalWithTax, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 160, -1));

        lbl_category6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category6.setText("Total (without taxes)");
        jPanel1.add(lbl_category6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 110, 20));

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Payment type");
        jPanel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 20));

        lbl_accountType2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType2.setText("Recieved date");
        jPanel1.add(lbl_accountType2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, 20));

        txtCreditPeriod.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtCreditPeriod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCreditPeriod.setText("0");
        txtCreditPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCreditPeriodKeyPressed(evt);
            }
        });
        jPanel1.add(txtCreditPeriod, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 60, -1));

        lbl_accountType3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType3.setText("Period ends on");
        jPanel1.add(lbl_accountType3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 90, 20));

        txtPeriodEnds.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPeriodEnds.setEnabled(false);
        jPanel1.add(txtPeriodEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 130, -1));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("Credit period");
        jPanel1.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 80, 20));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, 100, 20));

        lableTax2.setForeground(new java.awt.Color(102, 102, 102));
        lableTax2.setText("Tax 2 (Rs)");
        jPanel1.add(lableTax2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 110, 20));

        lableTax1.setForeground(new java.awt.Color(102, 102, 102));
        lableTax1.setText("Tax 1 (Rs)");
        jPanel1.add(lableTax1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 110, 20));

        lableOtherCharges.setForeground(new java.awt.Color(102, 102, 102));
        lableOtherCharges.setText("Other chargers (Rs)");
        jPanel1.add(lableOtherCharges, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 110, 20));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 560, 200));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("Supplier invoice no");
        panel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, 110, 20));

        textPONumber.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textPONumber.setEnabled(false);
        panel1.add(textPONumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 120, -1));

        ButtonSearchItems.setText("Search items");
        ButtonSearchItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchItemsActionPerformed(evt);
            }
        });
        panel1.add(ButtonSearchItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 610, 120, -1));

        buttonPreviewPO.setText("Preview PO");
        buttonPreviewPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviewPOActionPerformed(evt);
            }
        });
        panel1.add(buttonPreviewPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 270, 110, -1));

        buttonAddToTable.setText("Add to PO items");
        buttonAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddToTableActionPerformed(evt);
            }
        });
        panel1.add(buttonAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 270, 120, -1));

        ButtonAddAll.setText("Add all");
        ButtonAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddAllActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, 110, -1));

        TextPurchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextPurchasePrice.setText("0.00");
        TextPurchasePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextPurchasePriceFocusGained(evt);
            }
        });
        TextPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPurchasePriceKeyPressed(evt);
            }
        });
        panel1.add(TextPurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, 110, -1));

        TextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        TextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextQuantity.setText("0.000");
        TextQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextQuantityFocusGained(evt);
            }
        });
        TextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextQuantityKeyPressed(evt);
            }
        });
        panel1.add(TextQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 440, 110, -1));

        TextAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        TextAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextAmount.setText("0.00");
        TextAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextAmountFocusGained(evt);
            }
        });
        TextAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAmountKeyPressed(evt);
            }
        });
        panel1.add(TextAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 110, -1));

        CalendarButtonExpDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarButtonExpDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarButtonExpDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 440, 120, -1));

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });
        panel1.add(buttonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, 120, -1));

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSupplier.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbSupplierPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbSupplier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSupplierKeyPressed(evt);
            }
        });
        panel1.add(cmbSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 30, 210, -1));

        lbl_category7.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category7.setText("Supplier");
        panel1.add(lbl_category7, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 30, 50, 20));

        TextInvoiceNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextInvoiceNumKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextInvoiceNumKeyReleased(evt);
            }
        });
        panel1.add(TextInvoiceNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 60, 160, -1));

        txtGRNID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtGRNID.setEnabled(false);
        panel1.add(txtGRNID, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 610, 110, -1));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("GRN Date");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, 80, 20));

        ComboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        ComboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                ComboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        ComboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(ComboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 130, -1));

        buttonWriteNotes.setText("Write any notes?");
        buttonWriteNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWriteNotesActionPerformed(evt);
            }
        });
        panel1.add(buttonWriteNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 610, 120, -1));

        comboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Purchase order number", "Supplier code", "Supplier name" }));
        comboBoxFilter.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxFilterPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboBoxFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 250, -1));

        textNumberTransactions.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumberTransactions.setEnabled(false);
        panel1.add(textNumberTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 70, -1));

        textNumbersInPO.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInPO.setText("0");
        textNumbersInPO.setEnabled(false);
        panel1.add(textNumbersInPO, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 70, -1));

        textNumbersInGRN.setEditable(false);
        textNumbersInGRN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textNumbersInGRN.setText("0");
        textNumbersInGRN.setEnabled(false);
        panel1.add(textNumbersInGRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 70, -1));

        buttonAddFreeItems.setText("Add free items");
        buttonAddFreeItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddFreeItemsActionPerformed(evt);
            }
        });
        panel1.add(buttonAddFreeItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 610, 110, -1));

        labelIcon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(labelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 250, 280));

        backgroundCornerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel1.add(backgroundCornerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 460, 120));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        panel1.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 184, 1070, 460));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void LoadSystemDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Statement stmt;
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rset = stmt.executeQuery("SELECT sysDate FROM SystemDate");
            if (rset.next()) {
                TextDate.setText(sdf.format(rset.getDate("sysDate")));
            }
            rset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void LoadSuppliersToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Suppliers order by SupplierName";
            ResultSet rset = stmt.executeQuery(query);

            cmbSupplier.removeAllItems();
            cmbSupplier.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSupplier.insertItemAt(rset.getString("SupplierName") + "--" + rset.getString("SupplierCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbSupplier.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void loadDepartmentsToCombo() {
        String Type = "Stock";
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments where Type = '" + Type + "' order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            ComboDepartment.removeAllItems();
            ComboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    ComboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            ComboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void LoadTaxesToLables() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Taxes";
            ResultSet rset = stmt.executeQuery(query);

            if (rset.next()) {
                lableTax1.setText(rset.getString("Tax1"));
                lableTax2.setText(rset.getString("Tax2"));
                lableOtherCharges.setText(rset.getString("Other"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void enableV(){
        lbl_subAccount.setVisible(false);
        comboBoxFilter.setVisible(false);
        txtSearch.setVisible(false);
        jScrollPane1.setVisible(false);
        tableSearch.setVisible(false);
        textNumberTransactions.setVisible(false);
        textPONumber.setVisible(false);
        buttonPreviewPO.setVisible(false);
        buttonAddToTable.setVisible(false);
    }
    
    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void CheckBeforeSave() {
        int GRnRowCount = TableGRN.getRowCount();
        String SupplierInvoice = TextInvoiceNum.getText();
        if (cmbSupplier.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Supplier is not selected.", "No supplier", JOptionPane.OK_OPTION);
            cmbSupplier.requestFocus();
        } else if (ComboDepartment.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Department is not selected.", "No department", JOptionPane.OK_OPTION);
            ComboDepartment.requestFocus();
        } else if (TextDate.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Something wrong. Date is not loaded. GRN will close now. Please restart the application.", "System error", JOptionPane.OK_OPTION);
            this.dispose();
        } else if (SupplierInvoice.equals("")) {
            JOptionPane.showMessageDialog(this, "Supplier's invoice number is not inserted.", "Empty invoice number", JOptionPane.OK_OPTION);
            TextInvoiceNum.requestFocus();
        } else if (GRnRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Items are not inserted to GRN.", "No items", JOptionPane.OK_OPTION);
            ButtonSearchItems.requestFocus();
        } else if (txtDiscount.getText().equals("") || txtTax1.getText().equals("") || txtTax2.getText().equals("") || txtOtherChargers.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Discount or taxes or other chargers fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            txtDiscount.requestFocus();
        } else if (!txtDiscount.getText().equals("") && !txtTax1.getText().equals("") && !txtTax2.getText().equals("") && !txtOtherChargers.getText().equals("")) {
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            if (Discount < 0) {
                JOptionPane.showMessageDialog(this, "Discount is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtDiscount.requestFocus();
            } else if (Tax1 < 0) {
                JOptionPane.showMessageDialog(this, "Tax1 is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtTax1.requestFocus();
            } else if (Tax2 < 0) {
                JOptionPane.showMessageDialog(this, "Tax2 is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtTax2.requestFocus();
            } else if (OtherChargers < 0) {
                JOptionPane.showMessageDialog(this, "Other Chargers is less than zero.", "Minus values", JOptionPane.OK_OPTION);
                txtOtherChargers.requestFocus();
            } else {
                int x = JOptionPane.showConfirmDialog(this, "Are you sure to save this GRN?", "Save GRN?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    LoadTime();
                }
            }
        }
    }

    private void LoadTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String GRNTime, GRNDate;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);

            if (resultset.next()) {
                GRNDate = IndexPage.LabelDate.getText();
//                GRNDate = resultset.getString("CurrentDateTime").split(" ")[0];
                GRNTime = resultset.getString("CurrentDateTime").split(" ")[1];
                GRNTime = GRNTime.split("\\.")[0];
                SaveAsGRN(GRNTime, GRNDate);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }

    }

    private void SaveAsGRN(String GRNTime, String GRNDate) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate, POID = "";
        double PurchasePrice, Quantity, Amount;
        double CurrentQuantity, NewQuantity, calculatedPoRecivedQuantity, recivedPoQuantity;
        double PresentageShowSellPrice, SellPrice = 0, AddedValueForCalSellPrice, OriginalSellPrice;
        ResultSet RSETCurrentItemQuantity, RSETPoRecivedItemQuantity;
        try {

            String SupplierCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String SupplierInvoice = TextInvoiceNum.getText();
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = buttonRecievedDate.getText();
            String PaymentType = cmbPaymentTypes.getSelectedItem().toString();
            String CreditPeriod = txtCreditPeriod.getText();
            String PeriodEndsOn = txtPeriodEnds.getText();

            String Remarks = " ";
            String DepartmentsCode[] = ComboDepartment.getSelectedItem().toString().split("--");
            int HasPaid = 0;
            String IsReturn = "No";
            String ForEmptyFields = "-";

            String GRNID;
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("GRN");
            GRNID = AutoID.getDocChar() + AutoID.getDocNumber();
            txtGRNID.setText(GRNID);
            GRNID = txtGRNID.getText();

            //////////////////////////////////////////////////////////////////
            int GRNRowCount = TableGRN.getRowCount();
            int poRowCount = TablePurchaseOrder.getRowCount();
            if (poRowCount > 0) {
                POID = textPONumber.getText();
            } else if (poRowCount <= 0) {
                POID = "";
            }

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [GRNMain]\n"
                    + "           ([GRNID]\n"
                    + "           ,[GRNDate]\n"
                    + "           ,[GRNTime]\n"
                    + "           ,[POID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[TotalWithOutTaxesAfterReturn]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[TotalWithTaxesAfterReturn]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode]\n"
                    + "           ,[HasPaid]\n"
                    + "           ,[IsReturn])\n"
                    + "     VALUES\n"
                    + "           ('" + GRNID + "'\n"
                    + "           ,'" + GRNDate + "'\n"
                    + "           ,'" + GRNTime + "'\n"
                    + "           ,'" + POID + "'\n"
                    + "           ,'" + SupplierCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + DepartmentsCode[1] + "'\n"
                    + "           ,'" + HasPaid + "'\n"
                    + "           ,'" + IsReturn + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtStockUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtCurrentQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtBinCardInsert = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtPOItemsRecivedQtyUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtPOItemsCheckRecivedQty = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < GRNRowCount; i++) {
                ItemCode = TableGRN.getValueAt(i, 0).toString();
                ItemName = TableGRN.getValueAt(i, 1).toString();
                PurchaseUnitCode = TableGRN.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TableGRN.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TableGRN.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(TableGRN.getValueAt(i, 5).toString()));
                ExpireDate = TableGRN.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [GRNItems]\n"
                        + "           ([GRNID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[QuantityAfterReturn]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ItemPriceAmountAfterReturn]\n"
                        + "           ,[IsReturn]\n"
                        + "           ,[ExpireDate]\n"
                        + "           ,[GRNDate]\n"
                        + "           ,[ReduceQuantity])\n"
                        + "     VALUES\n"
                        + "           ('" + GRNID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + IsReturn + "'\n"
                        + "           ,'" + ExpireDate + "'\n"
                        + "           ,'" + GRNDate + "'\n"
                        + "           ,'" + Quantity + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
                String CurrentQtyQuery = "SELECT Quantity, PresentageShowSellPrice, PurchasePrice, SellPrice FROM Items WHERE ItemCode='" + ItemCode + "'";
                RSETCurrentItemQuantity = stmtCurrentQty.executeQuery(CurrentQtyQuery);

                if (RSETCurrentItemQuantity.next()) {
                    CurrentQuantity = RSETCurrentItemQuantity.getDouble("Quantity");
                    NewQuantity = roundThreeDecimals(Quantity + CurrentQuantity);

                    if (ReadConfig.UpdateSellPriceAtGRN.equals("Yes")) {
                        PresentageShowSellPrice = RSETCurrentItemQuantity.getDouble("PresentageShowSellPrice");
                        PurchasePrice = RSETCurrentItemQuantity.getDouble("PurchasePrice");
                        OriginalSellPrice = RSETCurrentItemQuantity.getDouble("SellPrice");

                        if (PresentageShowSellPrice <= 0) {
                            SellPrice = OriginalSellPrice;
                        } else if (PresentageShowSellPrice > 0) {
                            AddedValueForCalSellPrice = ((PresentageShowSellPrice / 100) * PurchasePrice);
                            SellPrice = AddedValueForCalSellPrice + PurchasePrice;
                        }

                        String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "', PurchasePrice = '" + PurchasePrice + "', SellPrice = '" + SellPrice + "' where ItemCode='" + ItemCode + "'";
                        stmtStockUpdate.execute(StockUpdateQuery);

                    } else if (ReadConfig.UpdateSellPriceAtGRN.equals("No")) {
                        String StockUpdateQuery = "Update Items set Quantity = '" + NewQuantity + "', PurchasePrice = '" + PurchasePrice + "' where ItemCode='" + ItemCode + "'";
                        stmtStockUpdate.execute(StockUpdateQuery);
                    }

                    if (!POID.isEmpty() && poRowCount > 0) {
                        String RecivedQtyQuery = "SELECT Quantity, RecivedQuantity FROM PurchaseOrderItems WHERE (POID = '" + POID + "' AND ItemCode='" + ItemCode + "')";
                        RSETPoRecivedItemQuantity = stmtPOItemsCheckRecivedQty.executeQuery(RecivedQtyQuery);

                        if (RSETPoRecivedItemQuantity.next()) {
                            recivedPoQuantity = RSETPoRecivedItemQuantity.getDouble("RecivedQuantity");
                            calculatedPoRecivedQuantity = recivedPoQuantity + Quantity;
                            String poItemsRecivedQtyUpdateQuery = "Update PurchaseOrderItems set RecivedQuantity = '" + calculatedPoRecivedQuantity + "' where (POID = '" + POID + "' AND ItemCode='" + ItemCode + "')";
                            stmtPOItemsRecivedQtyUpdate.execute(poItemsRecivedQtyUpdateQuery);
                        }
                    }

                    String BinCardInsert = "INSERT INTO [BinCard]\n"
                            + "           ([ItemCode]\n"
                            + "           ,[Date]\n"
                            + "           ,[Time]\n"
                            + "           ,[OtherNotes]\n"
                            + "           ,[RecivedID]\n"
                            + "           ,[RecivedFrom]\n"
                            + "           ,[RecivedQuantity]\n"
                            + "           ,[IssuedID]\n"
                            + "           ,[IssuedTo]\n"
                            + "           ,[IssuedQuantity]\n"
                            + "           ,[BalanceQty])\n"
                            + "     VALUES\n"
                            + "           ('" + ItemCode + "'\n"
                            + "           ,'" + GRNDate + "'\n"
                            + "           ,'" + GRNTime + "'\n"
                            + "           ,'" + SupplierInvoice + "'\n"
                            + "           ,'" + GRNID + "'\n"
                            + "           ,'" + SupplierCode[1] + "'\n"
                            + "           ,'" + Quantity + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'" + ForEmptyFields + "'\n"
                            + "           ,'0'\n"
                            + "           ,'" + NewQuantity + "')";
                    stmtBinCardInsert.execute(BinCardInsert);
                }

            }

            stmtItems.close();
            stmtCurrentQty.close();
            stmtStockUpdate.close();
            stmtBinCardInsert.close();
            stmtPOItemsRecivedQtyUpdate.close();
            stmtPOItemsCheckRecivedQty.close();

            if (!POID.isEmpty() && poRowCount > 0) {
                updatePOItemIsPending();
            }

            JOptionPane.showMessageDialog(this, "GRN is successfully saved.");
            buttonSave.setEnabled(false);
            btnCalculate.setEnabled(false);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void updatePOItemIsPending() {
        String poItemCode, poItemStatue, POID;
        try {
            int poRowCount = TablePurchaseOrder.getRowCount();
            POID = textPONumber.getText();
            java.sql.Statement stmtPOItemsIsPendingUpdate = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < poRowCount; i++) {
                poItemCode = TablePurchaseOrder.getValueAt(i, 0).toString();
                poItemStatue = TablePurchaseOrder.getValueAt(i, 6).toString();

                String poItemsRecivedQtyUpdateQuery = "Update PurchaseOrderItems set IsPending = '" + poItemStatue + "' where (POID = '" + POID + "' AND ItemCode='" + poItemCode + "')";
                stmtPOItemsIsPendingUpdate.execute(poItemsRecivedQtyUpdateQuery);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        Refresh();

    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh GRN window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            LoadSystemDate();
            LoadSuppliersToCombo();
            loadDepartmentsToCombo();
            LoadTaxesToLables();

            buttonRecievedDate.setEnabled(false);
            txtCreditPeriod.setEnabled(false);
            buttonSave.setEnabled(false);
            TextInvoiceNum.setText("");
            cmbPaymentTypes.setSelectedIndex(0);
            buttonRecievedDate.setText("");
            txtCreditPeriod.setText("0");
            txtPeriodEnds.setText("");

            txtTotalNoTax.setText("0.00");
            txtDiscount.setText("0.00");
            txtTax1.setText("0.00");
            txtTax2.setText("0.00");
            txtOtherChargers.setText("0.00");
            txtTotalWithTax.setText("0.00");

            txtSearch.setText("");
            txtSearch.setEnabled(true);
            textPONumber.setText("");
            tableSearch.setEnabled(true);
            comboBoxFilter.setSelectedIndex(0);
            comboBoxFilter.setEnabled(true);
            buttonAddToTable.setEnabled(true);

            TextPurchasePrice.setText("0.00");
            TextQuantity.setText("0.000");
            TextAmount.setText("0.00");
            CalendarButtonExpDate.setText("");
            txtGRNID.setText("");
            btnCalculate.setEnabled(true);

            textNumbersInGRN.setText("0");
            textNumbersInPO.setText("0");

            ButtonAddSelected.setEnabled(true);
            ButtonAddAll.setEnabled(true);
            cmbSupplier.setEnabled(true);

            try {
                int rowi = model_GRNTable.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_GRNTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            try {
                int rowj = model_POTable.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_POTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            try {
                int rowk = model_SearchTable.getRowCount();
                for (int k = 0; k < rowk; k++) {
                    model_SearchTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            listOrderByPOIDForAll();
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void exit() {
        int GRnRowCount = TableGRN.getRowCount();
        String GRNID = txtGRNID.getText();
        if (GRnRowCount > 0 && GRNID.isEmpty()) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to exit without saving this GRN?", "Exit GRN?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                if (grn != null) {
                    grn = null;
                }
                this.dispose();
            }
        } else if (GRnRowCount <= 0 && GRNID.isEmpty()) {
            if (grn != null) {
                grn = null;
            }
            this.dispose();
        } else {
            if (grn != null) {
                grn = null;
            }
            this.dispose();
        }
    }

    private void cmbPaymentTypesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbPaymentTypesPopupMenuWillBecomeInvisible
        String text = cmbPaymentTypes.getSelectedItem().toString();
        if (text.equals("Credit")) {
            buttonRecievedDate.setEnabled(true);
            txtCreditPeriod.setEnabled(true);
        } else if (text.equals("Cash")) {
            buttonRecievedDate.setEnabled(false);
            txtCreditPeriod.setEnabled(false);
            buttonRecievedDate.setText("");
            txtCreditPeriod.setText("");
            txtPeriodEnds.setText("");

        }
    }//GEN-LAST:event_cmbPaymentTypesPopupMenuWillBecomeInvisible

    private void tableSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSearchMouseClicked
        String poID, supplierCode, supplierName;
        int SelectedRowCount = tableSearch.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            poID = tableSearch.getValueAt(tableSearch.getSelectedRow(), 0).toString();
            supplierCode = tableSearch.getValueAt(tableSearch.getSelectedRow(), 2).toString();
            textPONumber.setText(poID);
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                query = "SELECT SupplierName FROM Suppliers where SupplierCode = '" + supplierCode + "'";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                if (reset.next()) {
                    supplierName = reset.getString("SupplierName");
                    cmbSupplier.setSelectedItem(supplierName + "--" + supplierCode);
                    cmbSupplier.setEnabled(false);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }//GEN-LAST:event_tableSearchMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        if (comboSelected.equals("Purchase order number")) {
            String poNumber = txtSearch.getText();
            SearchByPurchasOrderNumber(poNumber);
        } else if (comboSelected.equals("Supplier code")) {
            String supplierCode = txtSearch.getText();
            SearchBySupplierCode(supplierCode);
        } else if (comboSelected.equals("Supplier name")) {
            String supplierCode = txtSearch.getText();
            SearchBySupplierName(supplierCode);
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchByPurchasOrderNumber(String poNumber) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!poNumber.equals("")) {
                query = "SELECT POID, PODate, SupplierCode FROM PurchaseOrderMain WHERE POID LIKE '%" + poNumber + "%' AND IsPending = 'Yes'";
            } else {
                query = "SELECT POID, PODate, SupplierCode FROM PurchaseOrderMain WHERE POID LIKE '%" + poNumber + "%' AND IsPending = 'Yes'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                tableSearch.setValueAt(reset.getString("POID"), rowCount, 0);
                tableSearch.setValueAt(reset.getString("PODate"), rowCount, 1);
                tableSearch.setValueAt(reset.getString("SupplierCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            stmt.close();
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchBySupplierCode(String supplierCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!supplierCode.equals("")) {
                query = "SELECT POID, PODate, SupplierCode FROM PurchaseOrderMain WHERE SupplierCode LIKE '%" + supplierCode + "%' AND IsPending = 'Yes'";
            } else {
                query = "SELECT POID, PODate, SupplierCode FROM PurchaseOrderMain WHERE SupplierCode LIKE '%" + supplierCode + "%' AND IsPending = 'Yes'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                tableSearch.setValueAt(reset.getString("POID"), rowCount, 0);
                tableSearch.setValueAt(reset.getString("PODate"), rowCount, 1);
                tableSearch.setValueAt(reset.getString("SupplierCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            stmt.close();
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchBySupplierName(String supplierName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshSearchTable();

            if (!supplierName.equals("")) {
                query = "SELECT\n"
                        + "     Suppliers.\"SupplierName\" AS Suppliers_SupplierName,\n"
                        + "     Suppliers.\"SupplierCode\" AS Suppliers_SupplierCode,\n"
                        + "     PurchaseOrderMain.\"PODate\" AS PurchaseOrderMain_PODate,\n"
                        + "     PurchaseOrderMain.\"POID\" AS PurchaseOrderMain_POID,\n"
                        + "     PurchaseOrderMain.\"SupplierCode\" AS PurchaseOrderMain_SupplierCode,\n"
                        + "     PurchaseOrderMain.\"IsPending\" AS PurchaseOrderMain_IsPending\n"
                        + "FROM\n"
                        + "     \"dbo\".\"Suppliers\" Suppliers INNER JOIN \"dbo\".\"PurchaseOrderMain\" PurchaseOrderMain ON Suppliers.\"SupplierCode\" = PurchaseOrderMain.\"SupplierCode\"\n"
                        + "WHERE Suppliers.\"SupplierName\" LIKE '%" + supplierName + "%' AND\n"
                        + "      PurchaseOrderMain.\"IsPending\" = 'Yes'";
            } else {
                query = "SELECT\n"
                        + "     Suppliers.\"SupplierName\" AS Suppliers_SupplierName,\n"
                        + "     Suppliers.\"SupplierCode\" AS Suppliers_SupplierCode,\n"
                        + "     PurchaseOrderMain.\"PODate\" AS PurchaseOrderMain_PODate,\n"
                        + "     PurchaseOrderMain.\"POID\" AS PurchaseOrderMain_POID,\n"
                        + "     PurchaseOrderMain.\"SupplierCode\" AS PurchaseOrderMain_SupplierCode,\n"
                        + "     PurchaseOrderMain.\"IsPending\" AS PurchaseOrderMain_IsPending\n"
                        + "FROM\n"
                        + "     \"dbo\".\"Suppliers\" Suppliers INNER JOIN \"dbo\".\"PurchaseOrderMain\" PurchaseOrderMain ON Suppliers.\"SupplierCode\" = PurchaseOrderMain.\"SupplierCode\"\n"
                        + "WHERE Suppliers.\"SupplierName\" LIKE '%" + supplierName + "%' AND\n"
                        + "      PurchaseOrderMain.\"IsPending\" = 'Yes'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                tableSearch.setValueAt(reset.getString("PurchaseOrderMain_POID"), rowCount, 0);
                tableSearch.setValueAt(reset.getString("PurchaseOrderMain_PODate"), rowCount, 1);
                tableSearch.setValueAt(reset.getString("Suppliers_SupplierCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            stmt.close();
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void listOrderByPOIDForAll() {
        RefreshSearchTable();
        int rowCount = 0;

        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT POID, PODate, SupplierCode FROM PurchaseOrderMain WHERE IsPending = 'Yes' ORDER BY POID";
            ResultSet reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_SearchTable.addRow(new Object[model_SearchTable.getColumnCount()]);
                tableSearch.setValueAt(reset.getString("POID"), rowCount, 0);
                tableSearch.setValueAt(reset.getString("PODate"), rowCount, 1);
                tableSearch.setValueAt(reset.getString("SupplierCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            stmt.close();
            textNumberTransactions.setText(String.valueOf(rowCount));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshSearchTable() {
        try {
            int row = model_SearchTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_SearchTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void txtDiscountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDiscountMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtDiscountMouseClicked

    private void txtTax1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTax1MouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtTax1MouseClicked

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        float TotalWithTaxes;
        String Value1 = txtTotalNoTax.getText();
        String Value2 = txtDiscount.getText();
        String Value3 = txtTax1.getText();
        String Value4 = txtTax2.getText();
        String Value5 = txtOtherChargers.getText();

        if (!Value1.isEmpty() && !Value2.isEmpty() && !Value3.isEmpty() && !Value4.isEmpty() && !Value5.isEmpty()) {
            try {
                float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
                float Discount = Float.parseFloat(txtDiscount.getText());
                float Tax1 = Float.parseFloat(txtTax1.getText());
                float Tax2 = Float.parseFloat(txtTax2.getText());
                float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

                TotalWithTaxes = (TotalWithoutTaxes + Tax1 + Tax2 + OtherChargers) - Discount;
                txtTotalWithTax.setText(String.valueOf(TotalWithTaxes));
                buttonSave.setEnabled(true);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }
        } else if (Value1.isEmpty() || Value2.isEmpty() || Value3.isEmpty() || Value4.isEmpty() || Value5.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }

        CreditPeriod();

    }//GEN-LAST:event_btnCalculateActionPerformed

    private void txtTax2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTax2MouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtTax2MouseClicked

    private void txtOtherChargersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOtherChargersMouseClicked
        buttonSave.setEnabled(false);
    }//GEN-LAST:event_txtOtherChargersMouseClicked

    private void TableGRNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableGRNMouseClicked
        if (evt.getClickCount() == 1) {
            buttonSave.setEnabled(false);
            String PurchasePrice, Quantity, Amount;
            float CheckAmount = Float.parseFloat(TableGRN.getValueAt(TableGRN.getSelectedRow(), 5).toString());
            if (CheckAmount > 0) {
                PurchasePrice = TableGRN.getValueAt(TableGRN.getSelectedRow(), 3).toString();
                Quantity = TableGRN.getValueAt(TableGRN.getSelectedRow(), 4).toString();
                Amount = TableGRN.getValueAt(TableGRN.getSelectedRow(), 5).toString();
                TextPurchasePrice.setText(PurchasePrice);
                TextQuantity.setText(Quantity);
                TextAmount.setText(Amount);
                TextPurchasePrice.requestFocus();
                TextPurchasePrice.selectAll();
            } else if (CheckAmount <= 0) {
                JOptionPane.showMessageDialog(this, "Free items cannot be update.", "Cannot update", JOptionPane.OK_OPTION);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
            }
        } else if (evt.getClickCount() == 2) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = TableGRN.getSelectedRow();
                model_GRNTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalendarButtonExpDate.setText("");
                CalculateAmountWithOutTax();
                countGrnItems();
            }
        }
    }//GEN-LAST:event_TableGRNMouseClicked

    public void countGrnItems() {
//        DefaultTableModel model_GRNTable = null;
//        model_GRNTable = (DefaultTableModel) GRN.TableGRN.getModel();
        textNumbersInGRN.setText(model_GRNTable.getRowCount() + "");
    }

    private void buttonRecievedDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_buttonRecievedDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            buttonRecievedDate.setText(format.format(RecievedDate));
            txtCreditPeriod.requestFocus();
            txtCreditPeriod.setText("0");
            txtPeriodEnds.setText("");
        }
    }//GEN-LAST:event_buttonRecievedDatePropertyChange

    private void CalendarButtonExpDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarButtonExpDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date ExpDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarButtonExpDate.setText(format.format(ExpDate));
            buttonUpdate.requestFocus();
        }
    }//GEN-LAST:event_CalendarButtonExpDatePropertyChange

    private void ButtonSearchItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchItemsActionPerformed
        Object obj = panel1;
        GRNItemSearch form = new GRNItemSearch(this, false, obj);
        form.setVisible(true);
        panel1.setEnabled(false);

//        JDialog dialog = new JDialog(javax.swing.JOptionPane.getFrameForComponent(GRN.this), "Title", true);
    }//GEN-LAST:event_ButtonSearchItemsActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = TableGRN.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float CheckQuantity = Float.parseFloat(TextQuantity.getText());
                float CheckPurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                if (CheckQuantity <= 0 || CheckPurchasePrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity and purchase price should be more than zero.", "Zero fields", JOptionPane.OK_OPTION);
                } else if (CheckQuantity > 0 && CheckPurchasePrice > 0) {
                    CheckAtUpdateButtonBeforeUpdate();
                }
            }
        } else if (SelectedRowCount <= 0) {
            JOptionPane.showMessageDialog(this, "There is no item to update.", "No item", JOptionPane.OK_OPTION);
        } else if (SelectedRowCount > 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void CheckAtUpdateButtonBeforeUpdate() {
        if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
            try {
                float Quantity = Float.parseFloat(TextQuantity.getText());
                if (0 < Quantity) {
                    UpdateToReturnTable();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity is not enough to GRN.", "Not enough.", JOptionPane.OK_OPTION);
                }
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
        }
    }

    private void UpdateToReturnTable() {
        int SelectedRow = TableGRN.getSelectedRow();
        double PurchasePrice = Double.parseDouble(TextPurchasePrice.getText());
        double Quantity = Double.parseDouble(TextQuantity.getText());
        double Amount = roundTwoDecimals(PurchasePrice * Quantity);
        String ExpireDate = CalendarButtonExpDate.getText();
        if (ExpireDate.isEmpty()) {
            ExpireDate = "Not Define";
        }

        TableGRN.setValueAt(PurchasePrice, SelectedRow, 3);
        TableGRN.setValueAt(Quantity, SelectedRow, 4);
        TableGRN.setValueAt(Amount, SelectedRow, 5);
        TableGRN.setValueAt(ExpireDate, SelectedRow, 6);

        CalculateAmountWithOutTax();
    }

    private void CalculateAmountWithOutTax() {

        float ItemPriceAmount;
        float TotalWithoutTaxes = 0;
        int GRNTableRowCount = TableGRN.getRowCount();
        for (int i = 0; i < GRNTableRowCount; i++) {
            ItemPriceAmount = Float.parseFloat(TableGRN.getValueAt(i, 5).toString());
            TotalWithoutTaxes = TotalWithoutTaxes + ItemPriceAmount;
        }
        txtTotalNoTax.setText(String.valueOf(TotalWithoutTaxes));
    }
    private void TextPurchasePriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextPurchasePriceFocusGained
        TextPurchasePrice.selectAll();
    }//GEN-LAST:event_TextPurchasePriceFocusGained

    private void TextQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextQuantityFocusGained
        TextQuantity.selectAll();
    }//GEN-LAST:event_TextQuantityFocusGained

    private void TextAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextAmountFocusGained
        TextAmount.selectAll();
    }//GEN-LAST:event_TextAmountFocusGained

    private void TextPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPurchasePriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                TextQuantity.requestFocus();
                TextQuantity.selectAll();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_TextPurchasePriceKeyPressed

    private void TextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (!TextPurchasePrice.getText().equals("") && !TextQuantity.getText().equals("") && !TextAmount.getText().equals("")) {
                float Amount;
                float PurchasePrice = Float.parseFloat(TextPurchasePrice.getText());
                float Quantity = Float.parseFloat(TextQuantity.getText());

                Amount = PurchasePrice * Quantity;
                TextAmount.setText("" + roundTwoDecimals(Amount));
                TextAmount.requestFocus();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }

        }
    }//GEN-LAST:event_TextQuantityKeyPressed

    private void TableGRNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableGRNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                int i = TableGRN.getSelectedRow();
                model_GRNTable.removeRow(i);
                TextPurchasePrice.setText("0.00");
                TextQuantity.setText("0.000");
                TextAmount.setText("0.00");
                CalendarButtonExpDate.setText("");
                CalculateAmountWithOutTax();
            }

        }
    }//GEN-LAST:event_TableGRNKeyPressed

    private void TextAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAmountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextAmount.getText().equals("") && !TextQuantity.getText().equals("") && !TextPurchasePrice.getText().equals("")) {
                float Amount = Float.parseFloat(TextAmount.getText());
                float PurchasePrice;
                float Quantity = Float.parseFloat(TextQuantity.getText());

                PurchasePrice = Amount / Quantity;
                TextPurchasePrice.setText("" + roundTwoDecimals(PurchasePrice));
                CalendarButtonExpDate.requestFocus();
            } else if (TextPurchasePrice.getText().equals("") || TextQuantity.getText().equals("") || TextAmount.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Some fields are empty.", "Empty fields", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_TextAmountKeyPressed

    private void txtCreditPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCreditPeriodKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CreditPeriod();
        }
    }//GEN-LAST:event_txtCreditPeriodKeyPressed

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        buttonSave.setEnabled(false);
        int SelectedRowCount = TablePurchaseOrder.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String itemInPO = TablePurchaseOrder.getValueAt(TablePurchaseOrder.getSelectedRow(), 0).toString();
            Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(itemInPO);
            if ((Boolean) CheckItemAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
            } else {
                AddSingleItemToTransactionTable();
                ButtonAddAll.setEnabled(false);
            }

        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    protected Object[] CheckItemAlreadyAdded(String itemInPO) {
        int rowCount = model_GRNTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String GRNTableItemCode = model_GRNTable.getValueAt(i, 0).toString();
            if (itemInPO.equals(GRNTableItemCode)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void AddSingleItemToTransactionTable() {
        String ItemCode, ItemName, PurchaseUnitCode, expireDate;
        double PurchasePrice, Quantity, Amount;
        int getSelectedRowAtPO = TablePurchaseOrder.getSelectedRow();
        try {
            ItemCode = TablePurchaseOrder.getValueAt(getSelectedRowAtPO, 0).toString();
            ItemName = TablePurchaseOrder.getValueAt(getSelectedRowAtPO, 1).toString();
            PurchaseUnitCode = TablePurchaseOrder.getValueAt(getSelectedRowAtPO, 2).toString();
            PurchasePrice = roundTwoDecimals(Double.parseDouble(TablePurchaseOrder.getValueAt(getSelectedRowAtPO, 3).toString()));
            Quantity = roundThreeDecimals(Double.parseDouble(TablePurchaseOrder.getValueAt(getSelectedRowAtPO, 4).toString()));
            Amount = Quantity * PurchasePrice;
            expireDate = "Not define";

            model_GRNTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, Quantity, Amount, expireDate});
            int getRowCountAtGRN = TableGRN.getRowCount();
            textNumbersInGRN.setText(String.valueOf(getRowCountAtGRN));
            CalculateAmountWithOutTax();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void ButtonAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddAllActionPerformed
        buttonSave.setEnabled(false);
        AddAllItemsToTransactionTable();
    }//GEN-LAST:event_ButtonAddAllActionPerformed

    private void AddAllItemsToTransactionTable() {
        String ItemCode, ItemName, PurchaseUnitCode, expireDate;
        double PurchasePrice, Quantity, Amount;
        int getRowCountAtPO = TablePurchaseOrder.getRowCount();
        try {
            for (int i = 0; i < getRowCountAtPO; i++) {
                ItemCode = TablePurchaseOrder.getValueAt(i, 0).toString();
                ItemName = TablePurchaseOrder.getValueAt(i, 1).toString();
                PurchaseUnitCode = TablePurchaseOrder.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TablePurchaseOrder.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TablePurchaseOrder.getValueAt(i, 4).toString()));
                Amount = Quantity * PurchasePrice;
                expireDate = "Not define";
                model_GRNTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, PurchasePrice, Quantity, Amount, expireDate});
                ButtonAddSelected.setEnabled(false);
                ButtonAddAll.setEnabled(false);
            }

            int getRowCountAtGRN = TableGRN.getRowCount();
            textNumbersInGRN.setText(String.valueOf(getRowCountAtGRN));
            CalculateAmountWithOutTax();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void cmbSupplierPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbSupplierPopupMenuWillBecomeInvisible
        if (!cmbSupplier.getSelectedItem().equals(select)) {
            TextInvoiceNum.requestFocus();
        }
    }//GEN-LAST:event_cmbSupplierPopupMenuWillBecomeInvisible

    private void TextInvoiceNumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextInvoiceNumKeyReleased
        ValidateFields.CheckForOtherFields(TextInvoiceNum);
    }//GEN-LAST:event_TextInvoiceNumKeyReleased

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtDiscount.getText();
            if (!EnteredValue.isEmpty()) {
                txtTax1.requestFocus();
            }
//            else if(EnteredValue.isEmpty()){
//                txtDiscount.setText("0.00");
//                txtTax1.requestFocus();
//            }
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void txtTax1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTax1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtTax1.getText();
            if (!EnteredValue.isEmpty()) {
                txtTax2.requestFocus();
            }
//            else if(EnteredValue.isEmpty()){
//                txtDiscount.setText("0.00");
//                txtTax1.requestFocus();
//            }
        }
    }//GEN-LAST:event_txtTax1KeyPressed

    private void txtTax2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTax2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtTax2.getText();
            if (!EnteredValue.isEmpty()) {
                txtOtherChargers.requestFocus();
            }
//            else if(EnteredValue.isEmpty()){
//                txtDiscount.setText("0.00");
//                txtTax1.requestFocus();
//            }
        }
    }//GEN-LAST:event_txtTax2KeyPressed

    private void txtOtherChargersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtherChargersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String EnteredValue = txtOtherChargers.getText();
            if (!EnteredValue.isEmpty()) {
                btnCalculate.requestFocus();
            }
//            else if(EnteredValue.isEmpty()){
//                txtDiscount.setText("0.00");
//                txtTax1.requestFocus();
//            }
        }
    }//GEN-LAST:event_txtOtherChargersKeyPressed

    private void ButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreviewActionPerformed
        String GRNID = txtGRNID.getText();
        if (GRNID.isEmpty()) {
            int GRnRowCount = TableGRN.getRowCount();
            if (GRnRowCount <= 0) {
                JOptionPane.showMessageDialog(this, "items are not added to preview.", "Not added", JOptionPane.OK_OPTION);
            } else if (GRnRowCount > 0) {
                int x = JOptionPane.showConfirmDialog(this, "GRN is still not saved.\nDo you want to view a test preview?", "View a test preview?", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    try {
                        java.sql.Statement stmtDelete = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String queryMain = "delete From InvTrTestPreviewMain";
                        stmtDelete.execute(queryMain);
                        String queryItems = "delete From InvTrTestPreviewItems";
                        stmtDelete.execute(queryItems);

                        String GRNTime = "No time";
                        String GRNDate = "No date";
                        SaveForTestPreview(GRNTime, GRNDate);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                }
            }
        } else if (!GRNID.isEmpty()) {
            Preview();
        }
    }//GEN-LAST:event_ButtonPreviewActionPerformed

    private void SaveForTestPreview(String GRNTime, String GRNDate) {
        String ItemCode, ItemName, PurchaseUnitCode, ExpireDate;
        double PurchasePrice, Quantity, Amount;
        try {
            String POID = textPONumber.getText();

            String SupplierCode[] = cmbSupplier.getSelectedItem().toString().split("--");
            String SupplierInvoice = TextInvoiceNum.getText();
            String userId = IndexPage.user;

            float TotalWithoutTaxes = Float.parseFloat(txtTotalNoTax.getText());
            float Discount = Float.parseFloat(txtDiscount.getText());
            float Tax1 = Float.parseFloat(txtTax1.getText());
            float Tax2 = Float.parseFloat(txtTax2.getText());
            float OtherChargers = Float.parseFloat(txtOtherChargers.getText());

            float itemTax1 = 0;
            float itemTax2 = 0;
            float itemOtherChargers = 0;

            float TotalWithTaxes = Float.parseFloat(txtTotalWithTax.getText());

            String RecievedDate = buttonRecievedDate.getText();
            String PaymentType = cmbPaymentTypes.getSelectedItem().toString();
            String CreditPeriod = txtCreditPeriod.getText();
            String PeriodEndsOn = txtPeriodEnds.getText();

            String Remarks = "";
            String DepartmentsCode[] = ComboDepartment.getSelectedItem().toString().split("--");
            String GRNID = "Test Preview";

            //////////////////////////////////////////////////////////////////
            int GRNRowCount = TableGRN.getRowCount();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String MainInsertQuery = "INSERT INTO [InvTrTestPreviewMain]\n"
                    + "           ([TransactionID]\n"
                    + "           ,[Date]\n"
                    + "           ,[Time]\n"
                    + "           ,[PreviousID]\n"
                    + "           ,[SupplierCode]\n"
                    + "           ,[SupplierInvoice]\n"
                    + "           ,[UserID]\n"
                    + "           ,[TotalWithOutTaxes]\n"
                    + "           ,[Discount]\n"
                    + "           ,[Tax1]\n"
                    + "           ,[Tax2]\n"
                    + "           ,[OtherChargers]\n"
                    + "           ,[TotalWithTaxes]\n"
                    + "           ,[RecievedDate]\n"
                    + "           ,[PaymentType]\n"
                    + "           ,[CreditPeriod]\n"
                    + "           ,[PeriodEndsOn]\n"
                    + "           ,[Remarks]\n"
                    + "           ,[DepartmentsCode])\n"
                    + "     VALUES\n"
                    + "           ('" + GRNID + "'\n"
                    + "           ,'" + GRNDate + "'\n"
                    + "           ,'" + GRNTime + "'\n"
                    + "           ,'" + POID + "'\n"
                    + "           ,'" + SupplierCode[1] + "'\n"
                    + "           ,'" + SupplierInvoice + "'\n"
                    + "           ,'" + userId + "'\n"
                    + "           ,'" + TotalWithoutTaxes + "'\n"
                    + "           ,'" + Discount + "'\n"
                    + "           ,'" + Tax1 + "'\n"
                    + "           ,'" + Tax2 + "'\n"
                    + "           ,'" + OtherChargers + "'\n"
                    + "           ,'" + TotalWithTaxes + "'\n"
                    + "           ,'" + RecievedDate + "'\n"
                    + "           ,'" + PaymentType + "'\n"
                    + "           ,'" + CreditPeriod + "'\n"
                    + "           ,'" + PeriodEndsOn + "'\n"
                    + "           ,'" + Remarks + "'\n"
                    + "           ,'" + DepartmentsCode[1] + "')";
            stmtMain.execute(MainInsertQuery);
            stmtMain.close();

            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            for (int i = 0; i < GRNRowCount; i++) {
                ItemCode = TableGRN.getValueAt(i, 0).toString();
                ItemName = TableGRN.getValueAt(i, 1).toString();
                PurchaseUnitCode = TableGRN.getValueAt(i, 2).toString();
                PurchasePrice = roundTwoDecimals(Double.parseDouble(TableGRN.getValueAt(i, 3).toString()));
                Quantity = roundThreeDecimals(Double.parseDouble(TableGRN.getValueAt(i, 4).toString()));
                Amount = roundTwoDecimals(Double.parseDouble(TableGRN.getValueAt(i, 5).toString()));
                ExpireDate = TableGRN.getValueAt(i, 6).toString();

                String ItemInsertQuery = "INSERT INTO [InvTrTestPreviewItems]\n"
                        + "           ([TransactionID]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[ItemName]\n"
                        + "           ,[UnitPurchase]\n"
                        + "           ,[Quantity]\n"
                        + "           ,[PurchasePrice]\n"
                        + "           ,[Tax1]\n"
                        + "           ,[Tax2]\n"
                        + "           ,[OtherChargers]\n"
                        + "           ,[ItemPriceAmount]\n"
                        + "           ,[ExpireDate])\n"
                        + "     VALUES\n"
                        + "           ('" + GRNID + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + ItemName + "'\n"
                        + "           ,'" + PurchaseUnitCode + "'\n"
                        + "           ,'" + Quantity + "'\n"
                        + "           ,'" + PurchasePrice + "'\n"
                        + "           ,'" + itemTax1 + "'\n"
                        + "           ,'" + itemTax2 + "'\n"
                        + "           ,'" + itemOtherChargers + "'\n"
                        + "           ,'" + Amount + "'\n"
                        + "           ,'" + ExpireDate + "')";
                stmtItems.execute(ItemInsertQuery);

                //////////////////////////////////////////////////////////////////
            }
            stmtItems.close();
            TestPreview();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void TestPreview() {
        String TransactionID = "Test Preview";
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", TransactionID);
            map.put("Logo", PathToLogo);

            String Report = "TestPreview.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Data Reports/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void ComboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ComboDepartmentPopupMenuWillBecomeInvisible
        if (!ComboDepartment.getSelectedItem().equals(select)) {
            String POID = textPONumber.getText();
            if (!POID.isEmpty()) {
                TextInvoiceNum.requestFocus();
            } else if (POID.isEmpty()) {
                cmbSupplier.requestFocus();
            }
        }
    }//GEN-LAST:event_ComboDepartmentPopupMenuWillBecomeInvisible

    private void ComboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!ComboDepartment.getSelectedItem().equals(select)) {
                String POID = textPONumber.getText();
                if (!POID.isEmpty()) {
                    TextInvoiceNum.requestFocus();
                } else if (POID.isEmpty()) {
                    cmbSupplier.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_ComboDepartmentKeyPressed

    private void cmbSupplierKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSupplierKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!cmbSupplier.getSelectedItem().equals(select)) {
                TextInvoiceNum.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbSupplierKeyPressed

    private void TextInvoiceNumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextInvoiceNumKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!TextInvoiceNum.getText().isEmpty()) {
                cmbPaymentTypes.requestFocus();
            }
        }
    }//GEN-LAST:event_TextInvoiceNumKeyPressed

    private void cmbPaymentTypesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbPaymentTypesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (cmbPaymentTypes.getSelectedItem().equals("Cash")) {
                ButtonSearchItems.requestFocus();
            } else if (cmbPaymentTypes.getSelectedItem().equals("Credit")) {
                buttonRecievedDate.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbPaymentTypesKeyPressed

    private void buttonRecievedDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRecievedDateActionPerformed
        if (!buttonRecievedDate.getText().isEmpty()) {
            txtCreditPeriod.requestFocus();
        }
    }//GEN-LAST:event_buttonRecievedDateActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        grn.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtDiscountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusGained
        txtDiscount.selectAll();
    }//GEN-LAST:event_txtDiscountFocusGained

    private void txtTax1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTax1FocusGained
        txtTax1.selectAll();
    }//GEN-LAST:event_txtTax1FocusGained

    private void txtTax2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTax2FocusGained
        txtTax2.selectAll();
    }//GEN-LAST:event_txtTax2FocusGained

    private void txtOtherChargersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherChargersFocusGained
        txtOtherChargers.selectAll();
    }//GEN-LAST:event_txtOtherChargersFocusGained

    private void buttonWriteNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWriteNotesActionPerformed
        String GRNID = txtGRNID.getText();
        if (!GRNID.equals("")) {
            new WriteNotesCommon(this).setVisible(true);
        } else if (GRNID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the GRN. After that you can write your notes.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonWriteNotesActionPerformed

    private void comboBoxFilterPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxFilterPopupMenuWillBecomeInvisible
        String comboSelected = comboBoxFilter.getSelectedItem().toString();
        if (comboSelected.equals("All")) {
            listOrderByPOIDForAll();
        } else if (comboSelected.equals("Purchase order number")) {
            RefreshForComboAtOthers();
        } else if (comboSelected.equals("Supplier code")) {
            RefreshForComboAtOthers();
        } else if (comboSelected.equals("Supplier name")) {
            RefreshForComboAtOthers();
        }
    }//GEN-LAST:event_comboBoxFilterPopupMenuWillBecomeInvisible

    private void RefreshForComboAtOthers() {
        RefreshSearchTable();
        txtSearch.setText("");
        txtSearch.requestFocus();
        textNumberTransactions.setText("0");
    }

    private void buttonAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddToTableActionPerformed
        RefreshPurchaseOrderItemsTable();
    }//GEN-LAST:event_buttonAddToTableActionPerformed

    private void buttonAddFreeItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddFreeItemsActionPerformed
        String GRNID = txtGRNID.getText();
        if (!GRNID.equals("")) {
            new AddFreeItems(this).setVisible(true);
        } else if (GRNID.equals("")) {
            JOptionPane.showMessageDialog(this, "Please save the GRN. After that you can add free items.", "Save first", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonAddFreeItemsActionPerformed

    private void buttonPreviewPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviewPOActionPerformed
        int SelectedRowCount = tableSearch.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            PreviewPO();
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in search table.", "Select a single row", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonPreviewPOActionPerformed

    private void PreviewPO() {
        String poID = textPONumber.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("transactionID", poID);
            map.put("Logo", PathToLogo);

            String Report = "PO ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/PO/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshPurchaseOrderItemsTable() {
        try {
            int row = model_POTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_POTable.removeRow(0);
            }
            AddToPurchaseOrderItems();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void AddToPurchaseOrderItems() {
        String poID = textPONumber.getText();
        double calculatedQuantity, recivedQuantity, quantity;
        if (!poID.isEmpty()) {
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                int rowCount = 0;
                query = "SELECT ItemCode,ItemName,UnitPurchase,PurchasePrice,Quantity,RecivedQuantity,ItemPriceAmount FROM PurchaseOrderItems where POID = '" + poID + "' AND IsPending = 'Yes' AND (Quantity > RecivedQuantity) ORDER BY ItemName";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                while (reset.next()) {
                    model_POTable.addRow(new Object[model_POTable.getColumnCount()]);
                    TablePurchaseOrder.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                    TablePurchaseOrder.setValueAt(reset.getString("ItemName"), rowCount, 1);
                    TablePurchaseOrder.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                    TablePurchaseOrder.setValueAt(reset.getString("PurchasePrice"), rowCount, 3);
                    recivedQuantity = reset.getDouble("RecivedQuantity");
                    quantity = reset.getDouble("Quantity");
                    calculatedQuantity = quantity - recivedQuantity;
                    TablePurchaseOrder.setValueAt(calculatedQuantity, rowCount, 4);
                    TablePurchaseOrder.setValueAt(reset.getString("ItemPriceAmount"), rowCount, 5);
                    TablePurchaseOrder.setValueAt("No", rowCount, 6);
                    rowCount++;

                    buttonAddToTable.setEnabled(false);
                    tableSearch.setEnabled(false);
                    comboBoxFilter.setEnabled(false);
                    txtSearch.setEnabled(false);
                }
                textNumbersInPO.setText(String.valueOf(rowCount));
                reset.close();
                stmt.close();
                comboInTableCell();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

        } else if (poID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Purchase order is not selected.", "Not selected", JOptionPane.OK_OPTION);
        }
    }

    private void comboInTableCell() {
        TableColumn AuthColumn = TablePurchaseOrder.getColumnModel().getColumn(6);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("No");
        comboBox.addItem("Yes");
        AuthColumn.setCellEditor(new DefaultCellEditor(comboBox));
    }

    private void Preview() {
        String GRNID = txtGRNID.getText();
        String PathToLogo = projectPath + "/pictures/Logo/ClientLogo.jpg";
        Connection sqlcon = ConnectSql.conn;
        try {
            Map map = new HashMap();
            map.put("User", IndexPage.user.trim());
            map.put("GRNID", GRNID);
            map.put("Logo", PathToLogo);

            String Report = "GRN ID wise single report.jrxml";
            JasperDesign jasperdesigns = JRXmlLoader.load(projectPath + "/Reports/Transaction Reports Purchase/GRN/" + Report);
            JasperReport jasperreport = JasperCompileManager.compileReport(jasperdesigns);
            JasperPrint jasperprint = JasperFillManager.fillReport(jasperreport, map, sqlcon);
            JasperViewer.viewReport(jasperprint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void CreditPeriod() {

        String RecievedDate = buttonRecievedDate.getText();
        String CreditPeriod = txtCreditPeriod.getText();
        if (cmbPaymentTypes.getSelectedItem().equals("Credit")) {
            if (RecievedDate.equals("")) {
                JOptionPane.showMessageDialog(this, "Please select a recieved date.", "Empty date", JOptionPane.OK_OPTION);
                buttonRecievedDate.requestFocus();
            } else if (CreditPeriod.equals("")) {
                JOptionPane.showMessageDialog(this, "Please insert credit period.", "Empty date", JOptionPane.OK_OPTION);
                txtCreditPeriod.requestFocus();
            } else {
                int date = Integer.parseInt(txtCreditPeriod.getText());
                CalculateDate(date);
            }
        }
    }

    private void CalculateDate(int date) {
        DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd ");
        Date d = new Date();
        String ddddd = format1.format(d);

        System.out.println("dddd : " + ddddd);

        String[] split = buttonRecievedDate.getText().split("-");
        String yy = split[0];
        String mm = split[1];
        String dd = split[2].trim();

//        System.out.println("yy : " + yy);
//        System.out.println("yy : " + mm);
//        System.out.println("yy : " + dd);
        String[] ddsplit = dd.split(" ");
        String day = ddsplit[0];

        int year = Integer.parseInt(yy);
        int month = Integer.parseInt(mm);
        int ddd = Integer.parseInt(dd) + date;
//        System.out.println("Year : " + year);
//        System.out.println("month : " + month);
//        System.out.println("ddd : " + ddd);
        Date newDate = new GregorianCalendar(year, month - 1, ddd).getTime();

        DateFormat format = new SimpleDateFormat("yyyy-MM-dd ");
        String newDateTxt = format.format(newDate);
        txtPeriodEnds.setText(newDateTxt);
        ButtonSearchItems.requestFocus();

    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddAll;
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonPreview;
    private javax.swing.JButton ButtonSearchItems;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarButtonExpDate;
    private javax.swing.JComboBox ComboDepartment;
    private javax.swing.JPanel PanelGRN;
    private javax.swing.JPanel PanelPurchaseOrder;
    public static javax.swing.JTable TableGRN;
    private javax.swing.JTable TablePurchaseOrder;
    private javax.swing.JFormattedTextField TextAmount;
    private javax.swing.JTextField TextDate;
    private javax.swing.JTextField TextInvoiceNum;
    private javax.swing.JFormattedTextField TextPurchasePrice;
    private javax.swing.JFormattedTextField TextQuantity;
    private javax.swing.JLabel backgroundCornerLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton buttonAddFreeItems;
    private javax.swing.JButton buttonAddToTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonPreviewPO;
    private org.sourceforge.jcalendarbutton.JCalendarButton buttonRecievedDate;
    private javax.swing.JButton buttonRefresh;
    public static javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JButton buttonWriteNotes;
    private javax.swing.JComboBox cmbPaymentTypes;
    public static javax.swing.JComboBox cmbSupplier;
    private javax.swing.JComboBox comboBoxFilter;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lableOtherCharges;
    private javax.swing.JLabel lableTax1;
    private javax.swing.JLabel lableTax2;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_accountType2;
    private javax.swing.JLabel lbl_accountType3;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_category3;
    private javax.swing.JLabel lbl_category6;
    private javax.swing.JLabel lbl_category7;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_subAccount;
    public static javax.swing.JPanel panel1;
    private javax.swing.JTable tableSearch;
    private javax.swing.JTextField textNumberTransactions;
    private javax.swing.JTextField textNumbersInGRN;
    private javax.swing.JTextField textNumbersInPO;
    public static javax.swing.JTextField textPONumber;
    private javax.swing.JFormattedTextField txtCreditPeriod;
    private javax.swing.JFormattedTextField txtDiscount;
    public static javax.swing.JTextField txtGRNID;
    private javax.swing.JFormattedTextField txtOtherChargers;
    private javax.swing.JTextField txtPeriodEnds;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JFormattedTextField txtTax1;
    private javax.swing.JFormattedTextField txtTax2;
    public static javax.swing.JFormattedTextField txtTotalNoTax;
    private javax.swing.JTextField txtTotalWithTax;
    // End of variables declaration//GEN-END:variables
}
